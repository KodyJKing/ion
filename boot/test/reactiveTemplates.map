{"version":3,"sources":["reactiveTemplates.ion"],"names":["ion","object","x","y","templates","properties","name","replace","key","a","b","c",{"type":"Identifier","name":"double","loc":{"start":{"line":24,"column":18,"fixed":true},"end":{"line":24,"column":24,"fixed":true}}},"double","value","z","factor","multiply","items","i","sum","deep","one","touch","Type","alpha","beta","charlie","next","nextId","index","item","id","thisArg","templateType","argument","patch","expected","done","template","call","checkIfDone","check","JSON","stringify","deactivate","activate","watch","observe","changes","checkForChanges","test"],"mappings":"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","sourcesContent":["const ion = import '../'\r\n\r\nconst templates = []\r\n    []\r\n        \"regular expression\"\r\n        {}\r\n        template (properties) ->\r\n            return properties.name.replace(/a/g, 'b')\r\n        {name:\"alpha\"}\r\n        {}\r\n        \"blphb\"\r\n    []\r\n        \"array comprehension for of\"\r\n        {}\r\n        template (properties) ->\r\n            return [key for key of properties]\r\n        {a:1,b:2}\r\n        {b:undefined,c:3}\r\n        ['a','c']\r\n    []\r\n        \"imperative functions\"\r\n        {}\r\n        template (properties) ->\r\n            const double(a) -> a * 2\r\n            return {}\r\n                for key, value of properties\r\n                    [key]: double(value)\r\n        {x:1,y:2}\r\n        {x:4,z:3,y:undefined}\r\n        {x:8,y:4,z:6}\r\n    []\r\n        \"for else statements\"\r\n        {}\r\n        template (properties) ->\r\n            return {}\r\n                for key, value of properties\r\n                    [key]: value\r\n                else\r\n                    [key]: undefined\r\n        {x:1,y:2}\r\n        {x:4,y:undefined,z:3}\r\n        {x:4,z:3}\r\n    []\r\n        \"shared variables functions\"\r\n        {}\r\n        template (properties) ->\r\n            let factor = properties.factor ? 3\r\n            const multiply(a) -> a * factor\r\n            return {}\r\n                for key, value of properties if key isnt 'factor'\r\n                    [key]: multiply(value)\r\n        {x:1,y:2}\r\n        {x:4,y:undefined,z:5,factor:10}\r\n        {x:40,y:6,z:50}\r\n    []\r\n        \"reactive destructured parameters\"\r\n        {}\r\n        template ({a,b}) -> a + b\r\n        {a:1,b:2}\r\n        {a:5}\r\n        7\r\n    []\r\n        \"array comprehension for in\"\r\n        {}\r\n        template ({items}) -> [x + i for x, i in items]\r\n        {items:[1,2,3]}\r\n        {items:{3:4}}\r\n        [1,3,5,7]\r\n    []\r\n        \"changing object with function\"\r\n        {}\r\n        template (object) -> object.sum()\r\n        {}\r\n            sum: -> @x + @y\r\n            x: 1\r\n            y: 2\r\n        {}\r\n            x: 6\r\n        8\r\n    []\r\n        \"nested templates\"\r\n        {}\r\n        do ->\r\n            let sum = template ({deep:{a,b}}) -> a + b\r\n            return template (object) ->\r\n                return sum(object.one)\r\n        {}\r\n            one:\r\n                deep:\r\n                    a: 1\r\n                    b: 2\r\n        {}\r\n            one:\r\n                deep:\r\n                    a: 2\r\n        4\r\n    []\r\n        \"bidirectional properties\"\r\n        {}\r\n        template (object) ->\r\n            object:\r\n                x :: object.y\r\n            return object\r\n        {x:1,y:2}\r\n        {x:3}\r\n        {x:3,y:3}\r\n    []\r\n        \"literal objects\"\r\n        {}\r\n        template () ->\r\n            return {touch:1,\"touch-start\":2}\r\n        {}\r\n        {}\r\n        {touch:1,\"touch-start\":2}\r\n    []\r\n        \"this\"\r\n        let object = {x:1,y:2}\r\n        object\r\n        template -> this.x + this.y\r\n        object\r\n        {x:10}\r\n        12\r\n    do ->\r\n        # this test verifies that statements are reused when a value shifts within an array\r\n        let Type = ->\r\n        let alpha = new Type\r\n            name: 'alpha'\r\n        let beta = new Type\r\n            name: 'beta'\r\n        let charlie = new Type\r\n            name: 'charlie'\r\n        let next = 0\r\n        let nextId = -> next++\r\n        return []\r\n            \"for in reuse values\"\r\n            {}\r\n            template (items) ->\r\n                return []\r\n                    for item, index in items\r\n                        { id: nextId(), name: item.name, index: index }\r\n            [alpha,beta,charlie]\r\n            {0:alpha,1:charlie,2:undefined}\r\n            [{id:0,name:'alpha',index:0},{id:2,name:'charlie',index:1}]\r\n    do ->\r\n        # this test verifies that statements are reused when a value shifts within an array\r\n        let next = 0\r\n        let nextId = -> next++\r\n        return []\r\n            \"for of reuse keys\"\r\n            {}\r\n            template (items) ->\r\n                return []\r\n                    for key, value of items\r\n                        { id: nextId(), key: key, value: value }\r\n            {alpha:1,beta:2,charlie:3}\r\n            {beta:3,charlie:undefined}\r\n            [{id:0,key:'alpha',value:1},{id:1,key:'beta',value:3}]\r\n\r\nexport\r\n    test:\r\n        for [name, thisArg, templateType,argument,patch,expected] in templates if expected?\r\n            [name]: do (thisArg, templateType, argument, patch, expected) ->\r\n                return (done) ->\r\n                    let template = templateType.template.call(thisArg, argument)\r\n                    const checkIfDone (check) ->\r\n                        # console.log(JSON.stringify({check,expected,argument}))\r\n                        if JSON.stringify(check) is JSON.stringify(expected)\r\n                            template.deactivate()\r\n                            done()\r\n                    template.activate()\r\n                    template.watch(\r\n                        (value) ->\r\n                            checkIfDone(value)\r\n                            ion.observe(\r\n                                value\r\n                                (changes) ->\r\n                                    checkIfDone(value)\r\n                            )\r\n                    )\r\n                    ion.patch(argument, patch)\r\n                    # console.log('just patched')\r\n                    # console.log(JSON.stringify({expected,argument}))\r\n                    ion.checkForChanges()\r\n"]}