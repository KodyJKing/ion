{"version":3,"sources":["reactiveTemplates.ion"],"names":["ion","object","x","y","templates","name","a","b","c","z","factor","items","sum",{"type":"Identifier","name":"sum","loc":{"start":{"line":74,"column":12,"fixed":true},"end":{"line":74,"column":15,"fixed":true}}},"one","deep","touch","Type","alpha","beta","charlie","next","nextId","id","index","key","value","thisArg","templateType","argument","patch","expected","done","template","call","checkIfDone","check","JSON","stringify","deactivate","activate","watch","observe","changes","checkForChanges","test"],"mappings":"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","sourcesContent":["const ion = import '../'\r\n\r\nconst templates = []\r\n    []\r\n        \"regular expression\"\r\n        {}\r\n        template (properties) ->\r\n            return properties.name.replace(/a/g, 'b')\r\n        {name:\"alpha\"}\r\n        {}\r\n        \"blphb\"\r\n    []\r\n        \"array comprehension for of\"\r\n        {}\r\n        template (properties) ->\r\n            return [key for key of properties]\r\n        {a:1,b:2}\r\n        {b:undefined,c:3}\r\n        ['a','c']\r\n    []\r\n        \"imperative functions\"\r\n        {}\r\n        template (properties) ->\r\n            const double(a) -> a * 2\r\n            return {}\r\n                for key, value of properties\r\n                    [key]: double(value)\r\n        {x:1,y:2}\r\n        {x:4,z:3,y:undefined}\r\n        {x:8,y:4,z:6}\r\n    []\r\n        \"for else statements\"\r\n        {}\r\n        template (properties) ->\r\n            return {}\r\n                for key, value of properties\r\n                    [key]: value\r\n                else\r\n                    [key]: undefined\r\n        {x:1,y:2}\r\n        {x:4,y:undefined,z:3}\r\n        {x:4,z:3}\r\n    []\r\n        \"shared variables functions\"\r\n        {}\r\n        template (properties) ->\r\n            let factor = properties.factor ? 3\r\n            const multiply(a) -> a * factor\r\n            return {}\r\n                for key, value of properties if key isnt 'factor'\r\n                    [key]: multiply(value)\r\n        {x:1,y:2}\r\n        {x:4,y:undefined,z:5,factor:10}\r\n        {x:40,y:6,z:50}\r\n    []\r\n        \"reactive destructured parameters\"\r\n        {}\r\n        template ({a,b}) -> a + b\r\n        {a:1,b:2}\r\n        {a:5}\r\n        7\r\n    []\r\n        \"array comprehension for in\"\r\n        {}\r\n        template ({items}) -> [x + i for x, i in items]\r\n        {items:[1,2,3]}\r\n        {items:{3:4}}\r\n        [1,3,5,7]\r\n    []\r\n        \"changing object with function\"\r\n        {}\r\n        template (object) -> object.sum()\r\n        {}\r\n            sum: -> @x + @y\r\n            x: 1\r\n            y: 2\r\n        {}\r\n            x: 6\r\n        8\r\n    []\r\n        \"nested templates\"\r\n        {}\r\n        do ->\r\n            return template (object) ->\r\n                let sum = template ({deep:{a,b}}) -> a + b\r\n                return sum(object.one)\r\n        {}\r\n            one:\r\n                deep:\r\n                    a: 1\r\n                    b: 2\r\n        {}\r\n            one:\r\n                deep:\r\n                    a: 2\r\n        4\r\n    []\r\n        \"bidirectional properties\"\r\n        {}\r\n        template (object) ->\r\n            object:\r\n                x :: object.y\r\n            return object\r\n        {x:1,y:2}\r\n        {x:3}\r\n        {x:3,y:3}\r\n    []\r\n        \"literal objects\"\r\n        {}\r\n        template () ->\r\n            return {touch:1,\"touch-start\":2}\r\n        {}\r\n        {}\r\n        {touch:1,\"touch-start\":2}\r\n    []\r\n        \"this\"\r\n        let object = {x:1,y:2}\r\n        object\r\n        template -> this.x + this.y\r\n        object\r\n        {x:10}\r\n        12\r\n    do ->\r\n        # this test verifies that statements are reused when a value shifts within an array\r\n        let Type = ->\r\n        let alpha = new Type\r\n            name: 'alpha'\r\n        let beta = new Type\r\n            name: 'beta'\r\n        let charlie = new Type\r\n            name: 'charlie'\r\n        let next = 0\r\n        let nextId = -> next++\r\n        return []\r\n            \"for in reuse values\"\r\n            {}\r\n            template (items) ->\r\n                return []\r\n                    for item, index in items\r\n                        { id: nextId(), name: item.name, index: index }\r\n            [alpha,beta,charlie]\r\n            {0:alpha,1:charlie,2:undefined}\r\n            [{id:0,name:'alpha',index:0},{id:2,name:'charlie',index:1}]\r\n    do ->\r\n        # this test verifies that statements are reused when a value shifts within an array\r\n        let next = 0\r\n        let nextId = -> next++\r\n        return []\r\n            \"for of reuse keys\"\r\n            {}\r\n            template (items) ->\r\n                return []\r\n                    for key, value of items\r\n                        { id: nextId(), key: key, value: value }\r\n            {alpha:1,beta:2,charlie:3}\r\n            {beta:3,charlie:undefined}\r\n            [{id:0,key:'alpha',value:1},{id:1,key:'beta',value:3}]\r\n\r\nexport\r\n    test:\r\n        for [name, thisArg, templateType,argument,patch,expected] in templates if expected?\r\n            [name]: do (thisArg, templateType, argument, patch, expected) ->\r\n                return (done) ->\r\n                    let template = templateType.call(thisArg, argument)\r\n                    const checkIfDone (check) ->\r\n                        # console.log(JSON.stringify({check,expected,argument}))\r\n                        if JSON.stringify(check) is JSON.stringify(expected)\r\n                            template.deactivate()\r\n                            done()\r\n                    template.activate()\r\n                    template.watch(\r\n                        (value) ->\r\n                            checkIfDone(value)\r\n                            ion.observe(\r\n                                value\r\n                                (changes) ->\r\n                                    checkIfDone(value)\r\n                            )\r\n                    )\r\n                    ion.patch(argument, patch)\r\n                    # console.log('just patched')\r\n                    # console.log(JSON.stringify({expected,argument}))\r\n                    ion.checkForChanges()\r\n"]}