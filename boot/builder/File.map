{"version":3,"sources":["File.ion"],"names":["global","Window","ion","fs","np","utility","File","constructor","path","Error","Object","defineProperties","value","enumerable","writable","modified","getModified","makeReactive","watcher","existsSync","watch","close","properties","directoryName","get",{"type":"Identifier","name":"get","loc":{"start":{"line":41,"column":12,"fixed":true},"end":{"line":41,"column":15,"fixed":true}}},"dirname","copyFrom","file","write","read","console","log","normalize","encoding","getExtension","index","lastIndexOf","substring","content","toString","valueOf"],"mappings":"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","sourcesContent":["\r\nif global.Window\r\n    return\r\n\r\nconst\r\n    ion = import '../'\r\n    fs = import 'fs'\r\n    np = import 'path'\r\n    utility = import './utility'\r\n\r\nexport class File\r\n    constructor: (path) ->\r\n        if path?.constructor is File\r\n            return path\r\n        if @constructor isnt File\r\n            return new File(path)\r\n        if typeof path isnt 'string'\r\n            throw new Error(\"path string is required\")\r\n        (Object.defineProperties)\r\n            @\r\n            {}\r\n                path:\r\n                    value: path\r\n                    enumerable: true\r\n                    writable: false\r\n        # set modified immediately\r\n        @modified = utility.getModified(path)\r\n        # make us reactive to observers.  Specifically we will just update our modified value as needed.\r\n        (ion.makeReactive)\r\n            @\r\n            =>\r\n                let watcher\r\n                if fs.existsSync(@path)\r\n                    watcher = (fs.watch)\r\n                        @path\r\n                        =>\r\n                            @modified = utility.getModified(@path)\r\n                return -> watcher?.close()\r\n    properties:\r\n        directoryName:\r\n            get: -> np.dirname(@path)\r\n        copyFrom: (file) ->\r\n            file = File(file)\r\n            @write(file.read(null), null)\r\n            console.log(\"Copied: {{np.normalize(@path)}}\")\r\n        read: (encoding) ->\r\n            if fs.existsSync(@path)\r\n                return utility.read(@path, encoding)\r\n            else\r\n                return null\r\n        getExtension: ->\r\n            let index = @path.lastIndexOf('.')\r\n            return index < 0 ? \"\" : @path.substring(index)\r\n        write: (content, encoding) -> utility.write(@path, content, encoding)\r\n        toString: -> @path\r\n        valueOf: -> @path\r\n"]}