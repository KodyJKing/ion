{"version":3,"sources":["File.ion"],"names":["global","Window","ion","fs","np","utility","File","constructor","path","Error","Object","defineProperties","value","enumerable","writable","modified","getModified","makeReactive","watcher","existsSync","watch","checkForChanges","close","properties","isFile","get",{"type":"Identifier","name":"get","loc":{"start":{"line":47,"column":12,"fixed":true},"end":{"line":47,"column":15,"fixed":true}}},"isDirectory","statSync","directoryName","dirname","exists","copyFrom","file","write","read","console","log","normalize","encoding","content","_lastModified","_content","getExtension","index","lastIndexOf","substring","delete","toString","valueOf"],"mappings":"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","sourcesContent":["\r\nif global.Window\r\n    return\r\n\r\nconst\r\n    ion = import '../'\r\n    fs = import 'fs'\r\n    np = import 'path'\r\n    utility = import './utility'\r\n\r\nexport class File\r\n    constructor: (path) ->\r\n        if path?.constructor is File\r\n            return path\r\n        if @constructor isnt File\r\n            return new File(path)\r\n        if typeof path isnt 'string'\r\n            throw new Error(\"path string is required\")\r\n        Object.defineProperties(\r\n            @\r\n            {}\r\n                path:\r\n                    value: path\r\n                    enumerable: true\r\n                    writable: false\r\n        )\r\n        # set modified immediately\r\n        @modified = utility.getModified(path)\r\n        # make us reactive to observers.  Specifically we will just update our modified value as needed.\r\n        ion.makeReactive(\r\n            @\r\n            =>\r\n                let watcher\r\n                if fs.existsSync(@path)\r\n                    watcher = fs.watch(\r\n                        @path\r\n                        =>\r\n                            @modified = utility.getModified(@path)\r\n                            # explicit check is only because current\r\n                            # nodejs versions don't have Object.observe yet.\r\n                            ion.checkForChanges()\r\n                    )\r\n                return -> watcher?.close()\r\n        )\r\n    properties:\r\n        isFile:\r\n            get: -> not @isDirectory\r\n        isDirectory:\r\n            get: -> fs.statSync(@path).isDirectory()\r\n        directoryName:\r\n            get: -> np.dirname(@path)\r\n        exists:\r\n            get: -> fs.existsSync(@path)\r\n        copyFrom: (file) ->\r\n            file = File(file)\r\n            @write(file.read(null), null)\r\n            console.log(\"Copied: {{np.normalize(@path)}}\")\r\n        read: (encoding) ->\r\n            if fs.existsSync(@path)\r\n                # cache file content as long as the file remains unmodified\r\n                let modified = utility.getModified(@path)\r\n                let content\r\n                if modified is @_lastModified\r\n                    content = @_content\r\n                else\r\n                    @_content = content = utility.read(@path, encoding)\r\n                    @_lastModified = modified\r\n                return content\r\n            else\r\n                return null\r\n        getExtension: ->\r\n            let index = @path.lastIndexOf('.')\r\n            return index < 0 ? \"\" : @path.substring(index)\r\n        write: (content, encoding) ->\r\n            if content? and content isnt @read(encoding)\r\n                utility.write(@path, content, encoding)\r\n        delete: -> utility.write(@path, null)\r\n        toString: -> @path\r\n        valueOf: -> @path\r\n"]}