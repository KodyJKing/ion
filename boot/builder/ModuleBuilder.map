{"version":3,"sources":["ModuleBuilder.ion"],"names":["ion","File","Directory","builder","compilers","compile","compileCoffeeScript","compilePegjs","shimJavascript","compileIon","compileWithSourceMap","compileIonWithSourceMap","packagePatch","packageJson","patch","JSON","parse","read","input","directories","src","output","lib","moduleName","name","extensions","Object","keys","search","build","exclude","path","source","compiler","getExtension","targetPath","changeExtension","mapPath","mapName","split","slice","code","map","write","outputFiles","key","endsWith","top","isPrivate","indexOf","sortedFiles","concat","manifestFileName","manifestFile","getFile","file","modified","normalizePath","manifest","Math","max","apply","files","stringify","merge","join","package","clone","main","test","runTests"],"mappings":"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","sourcesContent":["\r\nconst\r\n    ion = import '../'\r\n    File = import './File'\r\n    Directory = import './Directory'\r\n    builder = import './'\r\n    compilers =\r\n        \".coffee\":\r\n            compile: builder.compileCoffeeScript\r\n        \".pegjs\":\r\n            compile: builder.compilePegjs\r\n        \".js\":\r\n            compile: builder.shimJavascript\r\n        \".ion\":\r\n            compile: builder.compileIon\r\n            compileWithSourceMap: builder.compileIonWithSourceMap\r\n\r\nexport template (packagePatch) ->\r\n    let packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})\r\n    let input = new Directory(packageJson.directories.src ? 'src')\r\n    let output = new Directory(packageJson.directories.lib ? 'lib')\r\n    let moduleName = packageJson.name ? ''\r\n    # build all source files with a single search\r\n    let extensions = Object.keys(compilers)\r\n    for path, source of input.search(extensions, packageJson.build.exclude)\r\n        let compiler = compilers[source.getExtension()]\r\n        let targetPath = builder.changeExtension(path, '.js')\r\n        if compiler.compileWithSourceMap?\r\n            let mapPath = builder.changeExtension(path, '.map')\r\n            let mapName = mapPath.split(/[\\/\\\\]/g).slice(-1)[0]\r\n            let [code,map] = compiler.compileWithSourceMap(source, packageJson)\r\n            output.write(targetPath, code + \"\\n//@ sourceMappingURL=./\" + mapName)\r\n            output.write(mapPath, map)\r\n        else\r\n            output.write(targetPath, compiler.compile(source, packageJson))\r\n    else\r\n        output.delete(targetPath)\r\n        output.delete(mapPath)\r\n    # build a manifest file with require.js at the top\r\n    let outputFiles = output.search(\".js\", [/^_/, 'node_modules']) # ignore output _browser.js and node_modules\r\n    let top = [key for key of outputFiles if key.endsWith('require.js')]\r\n    let sortedFiles = top.concat([key for key of outputFiles if not builder.isPrivate(key) and top.indexOf(key) < 0])\r\n    let manifestFileName = \"manifest.json\"\r\n    let manifestFile = output.getFile(manifestFileName)\r\n    let manifest =\r\n        modified: Math.max.apply(null, [file.modified for path, file of outputFiles])\r\n        files: [builder.normalizePath(path) for path in sortedFiles]\r\n    manifestFile.write(JSON.stringify(manifest, null, '  ', sortedFiles))\r\n\r\n    # build merged file, just so we can test locally with file:// protocol\r\n    if packageJson.build.merge?\r\n        output.write(packageJson.build.merge, [outputFiles[name].read() for name in sortedFiles].join('\\n'))\r\n\r\n    # copy the package.json to the lib directory\r\n    if packageJson.build.package\r\n        output.write('package.json', JSON.stringify(ion.patch(ion.clone(packageJson), {main:undefined}), null, '    '))\r\n\r\n    # builder.test\r\n    if packageJson.build.test isnt false\r\n        builder.runTests(manifestFile, manifestFile.modified)\r\n"]}