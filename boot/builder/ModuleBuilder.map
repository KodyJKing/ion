{"version":3,"sources":["ModuleBuilder.ion"],"names":["ion","File","Directory","builder","compilers","compile","compileCoffeeScript","compilePegjs","shimJavascript","compileIon","compileWithSourceMap","compileIonWithSourceMap","packagePatch","packageJson","patch","JSON","parse","read","input","directories","src","output","lib","moduleName","name","key","outputFiles","endsWith","isPrivate","top","indexOf","path","file","modified","sortedFiles","normalizePath","extensions","Object","keys","search","build","exclude","source","compiler","getExtension","targetPath","changeExtension","mapPath","mapName","split","slice","code","map","concat","manifestFileName","manifest","Math","max","apply","files","stringify","merge","join","package","clone","main","test","manifestFile","getFile","runTests"],"mappings":"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","sourcesContent":["\r\nconst\r\n    ion = import '../'\r\n    File = import './File'\r\n    Directory = import './Directory'\r\n    builder = import './'\r\n    compilers =\r\n        \".coffee\":\r\n            compile: builder.compileCoffeeScript\r\n        \".pegjs\":\r\n            compile: builder.compilePegjs\r\n        \".js\":\r\n            compile: builder.shimJavascript\r\n        \".ion\":\r\n            compile: builder.compileIon\r\n            compileWithSourceMap: builder.compileIonWithSourceMap\r\n\r\nexport template (packagePatch) ->\r\n    let packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})\r\n    let input = new Directory(packageJson.directories.src ? 'src')\r\n    let output = new Directory(packageJson.directories.lib ? 'lib')\r\n    let moduleName = packageJson.name ? ''\r\n    output:\r\n        # build all source files with a single search\r\n        let extensions = Object.keys(compilers)\r\n        for path, source of input.search(extensions, packageJson.build.exclude)\r\n            let compiler = compilers[source.getExtension()]\r\n            let targetPath = builder.changeExtension(path, '.js')\r\n            if compiler.compileWithSourceMap?\r\n                let mapPath = builder.changeExtension(path, '.map')\r\n                let mapName = mapPath.split(/[\\/\\\\]/g).slice(-1)[0]\r\n                let [code,map] = compiler.compileWithSourceMap(source, packageJson)\r\n                [targetPath]: code + \"\\n//@ sourceMappingURL=./\" + mapName\r\n                [mapPath]: map\r\n            else\r\n                [targetPath]: compiler.compile(source, packageJson)\r\n        # build a manifest file with require.js at the top\r\n        let outputFiles = output.search(\".js\", [/^_/, 'node_modules']) # ignore output _browser.js and node_modules\r\n        let top = [key for key of outputFiles if key.endsWith('require.js')]\r\n        let sortedFiles = top.concat([key for key of outputFiles if not builder.isPrivate(key) and top.indexOf(key) < 0])\r\n        let manifestFileName = \"manifest.json\"\r\n        let manifest =\r\n            modified: Math.max.apply(null, [file.modified for path, file of outputFiles])\r\n            files: [builder.normalizePath(path) for path in sortedFiles]\r\n        [manifestFileName]: JSON.stringify(manifest, null, '  ', sortedFiles)\r\n\r\n        # build merged file, just so we can test locally with file:// protocol\r\n        if packageJson.build.merge?\r\n            [packageJson.build.merge]: [outputFiles[name].read() for name in sortedFiles].join('\\n')\r\n\r\n        # copy the package.json to the lib directory\r\n        if packageJson.build.package\r\n            ['package.json']: JSON.stringify(ion.patch(ion.clone(packageJson), {main:undefined}), null, '    ')\r\n\r\n        # builder.test\r\n        if packageJson.build.test isnt false\r\n            let manifestFile = output.getFile(manifestFileName)\r\n            builder.runTests(manifestFile, manifestFile.modified)\r\n"]}