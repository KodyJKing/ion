{"version":3,"sources":["ModuleBuilder.ion"],"names":["global","window","ion","np","File","Directory","builder","utility","compilers","compile","compileCoffeeScript","compilePegjs","compilePegs","shimJavascript","compileIon","compileWithSourceMap","compileIonWithSourceMap"],"mappings":"aAAA;AAAA,IAAGA,MAAA,CAAOC,MAAV,EACA;AAAA,IAAI,OAAJ;AAAA,CADA;AAGA,IACIC,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,EAAA,G,OAAK,CAAO,MAAP,CAFT,EAGIC,IAAA,G,OAAO,CAAO,QAAP,CAHX,EAIIC,SAAA,G,OAAY,CAAO,aAAP,CAJhB,EAKIC,OAAA,G,OAAU,CAAO,IAAP,CALd,EAMIC,OAAA,G,OAAU,CAAO,WAAP,CANd,EAQIC,SAAA,GAAW;AAAA,Q,SACP,EAAU,EACNC,OAAA,EAASH,OAAA,CAAQI,mBADX,EADH;AAAA,Q,QAGP,EAAS,EACLD,OAAA,EAASH,OAAA,CAAQK,YADZ,EAHF;AAAA,Q,OAKP,EAAQ,EACJF,OAAA,EAASH,OAAA,CAAQM,WADb,EALD;AAAA,Q,KAOP,EAAM,EACFH,OAAA,EAASH,OAAA,CAAQO,cADf,EAPC;AAAA,Q,MASP,EAAO;AAAA,YACHJ,OAAA,EAASH,OAAA,CAAQQ,UADd;AAAA,YAEHC,oBAAA,EAAsBT,OAAA,CAAQU,uBAF3B;AAAA,SATA;AAAA,KARf,CAHA","sourcesContent":["if global.window\n    return\n\nconst\n    ion = import '../'\n    np = import 'path'\n    File = import './File'\n    Directory = import './Directory'\n    builder = import './'\n    utility = import './utility'\n\n    compilers =\n        \".coffee\":\n            compile: builder.compileCoffeeScript\n        \".pegjs\":\n            compile: builder.compilePegjs\n        \".pegs\":\n            compile: builder.compilePegs\n        \".js\":\n            compile: builder.shimJavascript\n        \".ion\":\n            compile: builder.compileIon\n            compileWithSourceMap: builder.compileIonWithSourceMap\n\nexport template (packagePatch) ->\n    let packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})\n    let input = new Directory(packageJson.directories.src ? 'src')\n    let output = new Directory(packageJson.directories.lib ? 'lib')\n    let moduleName = packageJson.name ? ''\n\n    # build all source files with a single search, and also build a list of their output names\n    let extensions = Object.keys(compilers)\n    for path, source of input.search(extensions, packageJson.build.exclude)\n        if not source.isDirectory\n            let compiler = compilers[source.getExtension()]\n            let targetPath = builder.changeExtension(path, '.js')\n            # let outputFile = output.getFile(targetPath)\n            # if source.modified > outputFile.modified\n            if compiler.compileWithSourceMap?\n                let mapPath = builder.changeExtension(path, '.map')\n                let mapName = mapPath.split(/[\\/\\\\]/g).slice(-1)[0]\n                let [code,map] = compiler.compileWithSourceMap(source, packageJson)\n                void output.write(targetPath, code + \"\\n//# sourceMappingURL=./\" + mapName)\n                void output.write(mapPath, map)\n            else\n                void output.write(targetPath, compiler.compile(source, packageJson))\n\n    # build a default index file for each output directory (including root)\n    let potentialIndexDirectories = input.search(null, extensions.concat(packageJson.build.exclude))\n        [\".\"]: input.getFile('.')\n    for path, file of potentialIndexDirectories\n        if file.isDirectory\n            # see if there is an input.js or input.ion file\n            let isInputFile = input.getFile(path + \"/index.js\").exists or input.getFile(path + \"/index.ion\").exists or input.getFile(path + \"/index.coffee\").exists\n            if not isInputFile\n                # then create an output file\n                let indexDirectory = output.getDirectory(path)\n                let indexName = \"index.js\"\n                let indexFile = indexDirectory.getFile(indexName)\n                # get a list of all output files in that directory\n                let lines = {}\n                    for key, childFile of indexDirectory.search(null, null, {recursive:false})\n                        if key isnt indexName and (childFile.path.endsWith('.js') or childFile.isDirectory)\n                            let name = childFile.isDirectory ? key : key.substring(0, key.lastIndexOf('.js'))\n                            if not name.startsWith('_') and name isnt ''\n                                [key]: \"Object.defineProperty(exports, '{{name}}', {get:function(){ return require('./{{name}}') }, enumerable: true}) \"\n\n                let indexModuleId = np.join(moduleName, path, \"index\").replace(/\\\\/g, '/')\n                void indexDirectory.write(indexName, builder.addBrowserShim([value for key, value of lines].join('\\n'), indexModuleId))\n\n    # build a manifest file with require.js at the top\n\n    let outputFiles = output.search(\".js\", [/^_/, 'node_modules'].concat(packageJson.build.exclude))\n    let top = [key for key of outputFiles if key.endsWith('require.js')]\n    let sortedFiles = top.concat([key for key of outputFiles if not builder.isPrivate(key) and top.indexOf(key) < 0])\n    let manifestFileName = \"manifest.json\"\n    let manifestFile = output.getFile(manifestFileName)\n    let manifest =\n        modified: Math.max.apply(null, [file.modified for path, file of outputFiles])\n        files: [builder.normalizePath(path) for path in sortedFiles]\n    output.write(manifestFileName, JSON.stringify(manifest, null, '  ', sortedFiles))\n\n    # builder.test\n    if packageJson.build.test isnt false\n        builder.runTests(manifestFile, manifestFile.modified)\n"]}