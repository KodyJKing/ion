{"version":3,"sources":["WebsiteBuilder.ion"],"names":["ion","clientJsDir","serverJsDir","serverJavaDir","np","fs","builder","File","Directory","utility","ModuleBuilder"],"mappings":"aAAA;AACA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,E,IAAA,E,KAAA,EAIIC,WAAA,GAAc,IAJlB,EAKIC,WAAA,GAAc,YALlB,EAMIC,aAAA,GAAgB,cANpB,EAOIC,EAAA,G,OAAK,CAAO,MAAP,CAPT,EAQIC,EAAA,G,OAAK,CAAO,IAAP,CART,CADA;OAGgBL,G,CAHhB;IAGKM,O,QAAAA,O,CAHL;QAI6CA,O,CAJ7C;IAIKC,I,SAAAA,I,CAJL;IAIUC,S,SAAAA,S,CAJV;IAIoBC,O,SAAAA,O,CAJpB;IAI4BC,a,SAAAA,a,CAJ5B","sourcesContent":["\nconst\n    ion = import '../'\n    {builder} = ion\n    {File,Directory,utility,ModuleBuilder} = builder\n    clientJsDir = 'js'\n    serverJsDir = 'WEB-INF/js'\n    serverJavaDir = 'WEB-INF/java'\n    np = import 'path'\n    fs = import 'fs'\n\nexport template ->\n    const\n        packageJson = JSON.parse(new File('package.json').read())\n        input = new Directory(packageJson.directories.src ? 'src')\n        output = new Directory(packageJson.directories.www ? 'debug')\n        clientOutput = output.getDirectory(clientJsDir)\n        serverOutput = output.getDirectory(serverJsDir)\n        nodepaths = ['node_modules']\n\n    # Copy local development versions of glass-pages to input directory if available\n    # They will be copied from src to the build directory by ant\n    let glassPages = new Directory('../glass-pages/dist')\n    if glassPages.exists\n        let javaDirectory = input.getDirectory(serverJavaDir)\n        for key, source of glassPages.search()\n            let target = javaDirectory.getFile(key)\n            if target.modified < source.modified\n                target.copyFrom(source)\n\n    let copyModules = template (modules, outputDirectory) ->\n        for moduleName in modules\n            for nodepath in nodepaths\n                let directory = new Directory(np.join(nodepath, moduleName + \"/lib\"))\n                for key, source of directory.search([\".js\",\".map\",\".json\"], [].concat(packageJson.build.client.exclude))\n                    let target = outputDirectory.getFile(source.path.substring(nodepath.length))\n                    if target.modified < source.modified\n                        target.copyFrom(source)\n                else\n                    target.delete()\n\n    copyModules(packageJson.build.client.modules, clientOutput)\n    copyModules(packageJson.build.server.modules, serverOutput)\n\n    # build client javascript\n    ModuleBuilder(\n        directories:\n            src:input + '/js' # client side javascript\n            lib:output + '/' + clientJsDir\n        build:\n            exclude: packageJson.build.client.exclude\n            test: false\n    )\n\n    # build server javascript\n    ModuleBuilder(\n        directories:\n            src:input + '/js' # server side javascript\n            lib:output + '/' + serverJsDir\n        build:\n            exclude: packageJson.build.server.exclude\n            test: true\n    )\n\n    # Copy all other files from src to output\n    for path, file of input.search(null, [\".js\", \".DS_Store\", \".ionpage\",\".coffeepage\",\".coffee\",\".java\",\".class\",\".jar\", \".ion\"])\n        if file.isFile\n            output.write(path, file.read(null), null)\n    else\n        output.delete(path)\n\n    # Compile plain ion files, while excluding the js directory\n    for path, file of input.search(\".ion\", \"js\")\n        let targetPath = builder.changeExtension(path, \".js\")\n        output.write(targetPath, builder.compileIon(file))\n    else\n        output.delete(targetPath)\n\n    # Compile ion pages\n    let pageOutput = output.getDirectory('WEB-INF/pages')\n    for path, file of input.search(\".ionpage\")\n        let targetPath = builder.changeExtension(path, \".js\")\n        pageOutput.write(targetPath, \"(function {{path.replace(/[\\.\\/\\\\]/g, '_')}}(){ {{builder.compileIon(file)}} })\")\n    else\n        pageOutput.delete(targetPath)\n\n    # Build our scripts debug include file.\n    let files = {}\n        for manifestFilename in packageJson.build.manifests\n            let manifestFile = clientOutput.getFile(manifestFilename)\n            let manifest = JSON.parse(manifestFile.read())\n            for jsfile in manifest.files\n                let jspath = np.join(manifestFile.directoryName, jsfile).substring(output.path.length)\n                [jspath]: true\n            else\n                [jspath]: false\n    let scripts = [key for key, value of files if value]\n    output.write(\n        \"scripts.js\"\n        \"\"\n            ({{JSON.stringify(scripts)}}\n            .forEach(function(a) {\n                \n                document.writeln(\"<script src='\" + a + \"'></script>\")\n            }));\n    )\n"]}