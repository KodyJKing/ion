{"version":3,"sources":["WebsiteBuilder.ion"],"names":["ion","File","Directory","builder","utility","ModuleBuilder","clientJsDir","serverJsDir","serverJavaDir","np","packagePatch","packageJson","patch","JSON","parse","read","input","directories","src","output","www","clientOutput","getDirectory","serverOutput","nodepaths","concat","process","env","NODE_PATH","split","delimiter","glassPages","exists","javaDirectory","search","key","source","target","getFile","modified","copyFrom","build","client","modules","moduleName","nodepath","directory","join","exclude","path","substring","length","server","lib","test","targetPath","changeExtension","compileIon","pageOutput","replace","compileCoffeeScript"],"mappings":"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","sourcesContent":["const\r\n    ion = import '../'\r\n    File = import './File'\r\n    Directory = import './Directory'\r\n    builder = import './'\r\n    utility = import './utility'\r\n    ModuleBuilder = import './ModuleBuilder'\r\n    clientJsDir = 'js'\r\n    serverJsDir = 'WEB-INF/js'\r\n    serverJavaDir = 'WEB-INF/java'\r\n    np = import 'path'\r\n\r\n\r\nexport template (packagePatch) ->\r\n    const\r\n        packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})\r\n        input = new Directory(packageJson.directories.src ? 'src')\r\n        output = new Directory(packageJson.directories.www ? 'debug')\r\n        clientOutput = output.getDirectory(clientJsDir)\r\n        serverOutput = output.getDirectory(serverJsDir)\r\n        nodepaths = ['node_modules'].concat(process.env.NODE_PATH.split(np.delimiter))\r\n\r\n    # Copy local development versions of glass-pages to input directory if available\r\n    # They will be copied from src to the build directory by ant\r\n    let glassPages = new Directory('../glass-pages/dist')\r\n    if glassPages.exists\r\n        let javaDirectory = input.getDirectory(serverJavaDir)\r\n        for key, source of glassPages.search()\r\n            let target = javaDirectory.getFile(key)\r\n            if target.modified < source.modified\r\n                target.copyFrom(source)\r\n\r\n    # Copy client and server node modules to the output\r\n    for moduleName in packageJson.build.client.modules\r\n        for nodepath in nodepaths\r\n            let directory = new Directory(np.join(nodepath, moduleName))\r\n            for key, source of directory.search([\".js\",\".map\"], [\"node_modules\"].concat(packageJson.build.client.exclude))\r\n                clientOutput:\r\n                    [source.path.substring(nodepath.length)]: source.read()\r\n    for moduleName in packageJson.build.server.modules\r\n        for nodepath in nodepaths\r\n            let directory = new Directory(np.join(nodepath, moduleName))\r\n            for key, source of directory.search([\".js\",\".map\"], [\"node_modules\"].concat(packageJson.build.server.exclude))\r\n                serverOutput:\r\n                    [source.path.substring(nodepath.length)]: source.read()\r\n\r\n    # build client javascript\r\n    (ModuleBuilder)\r\n        directories:\r\n            src:input + '/js' # client side javascript\r\n            lib:output + '/' + clientJsDir\r\n        build:\r\n            exclude: packageJson.build.client.exclude\r\n            test: false\r\n\r\n    # build server javascript\r\n    (ModuleBuilder)\r\n        directories:\r\n            src:input + '/js' # server side javascript\r\n            lib:output + '/' + serverJsDir\r\n        build:\r\n            exclude: packageJson.build.server.exclude\r\n            test: true\r\n\r\n    # Copy all other files from src to output\r\n    for key, source of input.search(null, [\".ionpage\",\".coffeepage\",\".coffee\",\".java\",\".class\",\".jar\", \".ion\"])\r\n        let target = output.getFile(key)\r\n        output:\r\n            [key]: source.read()\r\n\r\n    # Compile plain ion files, while excluding the js directory\r\n    for key, source of input.search(\".ion\", \"js\")\r\n        let targetPath = builder.changeExtension(key, \".js\")\r\n        output:\r\n            [targetPath]: builder.compileIon(source)\r\n\r\n    # Compile ion pages\r\n    let pageOutput = output.getDirectory('WEB-INF/pages')\r\n    for key, source of input.search(\".ionpage\")\r\n        let targetPath = builder.changeExtension(key, \".js\")\r\n        pageOutput:\r\n            [targetPath]: \"(function {{key.replace(/[\\.\\/\\\\]/g, '_')}}(){ {{builder.compileIon(source)}} })\"\r\n\r\n    # Compile coffee pages\r\n    # TODO: port all .coffeepages to .ionpages and delete this.\r\n    for key, source of input.search(\".coffeepage\")\r\n        let targetPath = builder.changeExtension(key, \".js\")\r\n        pageOutput:\r\n            [targetPath]: \"(function {{key.replace(/[\\.\\/\\\\]/g, '_')}}(){ {{builder.compileCoffeeScript(source)}} })\"\r\n"]}