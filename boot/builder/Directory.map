{"version":3,"sources":["Directory.ion"],"names":["global","Window","ion","fs","np","utility","watcher","File","Directory","constructor","path","String","properties","exists","get",{"type":"Identifier","name":"get","loc":{"start":{"line":20,"column":12,"fixed":true},"end":{"line":20,"column":15,"fixed":true}}},"existsSync","toString","hasOwnProperty","getAbsoluteName","read","set","content","console","log","write","getFile","getDirectory","getRelativeName","relative","join","search","include","exclude","options","initial","results","makeReactive","unwatch","watchDirectory","filename","files","list"],"mappings":"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","sourcesContent":["\r\nif global.Window\r\n    return\r\n\r\nconst\r\n    ion = import '../'\r\n    fs = import 'fs'\r\n    np = import 'path'\r\n    utility = import './utility'\r\n    watcher = import './watcher'\r\n    File = import './File'\r\n\r\nexport class Directory\r\n    constructor: (path) ->\r\n        if path?\r\n            @path = String(path)\r\n    properties:\r\n        exists:\r\n            # exists is not reactive\r\n            get: -> fs.existsSync(@path)\r\n        path: '.'\r\n        toString: -> @path\r\n        get: (path) ->\r\n            # allow us to get our own properties\r\n            if @hasOwnProperty(path) or @[path]?\r\n                return @[path]\r\n\r\n            path = @getAbsoluteName(path)\r\n            if fs.existsSync(path)\r\n                return utility.read(path)\r\n            else\r\n                return undefined\r\n        set: (path, content) ->\r\n            if @hasOwnProperty(path) or @[path]?\r\n                return @[path] = content\r\n\r\n            path = @getAbsoluteName(path)\r\n            if content?\r\n                console.log(\"Writing: \" + path)\r\n            else\r\n                console.log(\"Deleting: \" + path)\r\n            utility.write(path, content)\r\n            return content\r\n        getFile: (path) -> new File(@getAbsoluteName(path))\r\n        getDirectory: (path) -> new Directory(@getAbsoluteName(path))\r\n        getRelativeName: (path) -> np.relative(@path, String(path))\r\n        getAbsoluteName: (path) -> np.join(@path, String(path))\r\n        search: (include, exclude) ->\r\n            let options =\r\n                initial: false\r\n            if include?\r\n                options.include = include\r\n            if exclude?\r\n                options.exclude = exclude\r\n            let results = {}\r\n            (ion.makeReactive)\r\n                results\r\n                =>\r\n                    let unwatch = (watcher.watchDirectory)\r\n                        @path\r\n                        options\r\n                        (filename) =>\r\n                            let path = @getRelativeName(filename)\r\n                            if fs.existsSync(filename)\r\n                                if not results[path]?\r\n                                    results[path] = new File(filename)\r\n                            else\r\n                                delete results[path]\r\n                    return unwatch\r\n            let files = utility.list(@path, options)\r\n            for path in files\r\n                results[@getRelativeName(path)] = new File(path)\r\n            return results\r\n\r\n\r\n\r\n"]}