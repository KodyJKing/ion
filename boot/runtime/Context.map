{"version":3,"sources":["Context.ion"],"names":["ion","Factory","Literal","Context","constructor","parent","output","variables","root","properties","newContext",{"type":"Identifier","name":"newContext","loc":{"start":{"line":18,"column":8,"fixed":true},"end":{"line":18,"column":18,"fixed":true}}},"createRuntime","node","get","name","variable","getVariable","Error","value","watcher","a","watch","unwatch","context","global","cachedGlobals","globals","setVariable"],"mappings":"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","sourcesContent":["\r\nconst\r\n    ion = import '../'\r\n    Factory = import './Factory'\r\n    Literal = import './Literal'\r\n\r\nexport class Context\r\n    constructor: (parent, output) ->\r\n        # the output object that values are written to\r\n        @output = output\r\n        # parent is either null or another Context\r\n        @parent = parent\r\n        # an object that maps variable names to variable expressions\r\n        @variables = {}\r\n        # store a reference to the root context\r\n        @root = @parent?.root ? @\r\n    properties:\r\n        newContext: (output = @output) -> new Context(@, output)\r\n        createRuntime: (node) -> Factory.createRuntime(@, node)\r\n        get: (name) ->\r\n            let variable = @getVariable(name)\r\n            if not variable?\r\n                throw new Error(\"Variable not found: '{{name}}'\")\r\n            let value = variable.value\r\n            if value is undefined\r\n                let watcher = (a) ->\r\n                    if a isnt undefined\r\n                        value = a\r\n                variable.watch(watcher)\r\n                variable.unwatch(watcher)\r\n            return value\r\n        getVariable: (name) ->\r\n            let context = @, value\r\n            while context?\r\n                let variable = context.variables[name]\r\n                if variable?\r\n                    return variable\r\n                context = context.parent\r\n            # if the variable is not defined by us then it is probably a global variable.\r\n            # we do however require that it be a globally defined variable, otherwise we throw an error.\r\n            value = global[name]\r\n            if value is undefined\r\n                throw new Error(\"Variable not found: '{{name}}'\")\r\n            # global values are considered to be constants.\r\n            # we could consider caching these values within the context.\r\n            let cachedGlobals = @root.globals ?= {}\r\n            return cachedGlobals[name] ?= new Literal({value:value})\r\n        setVariable: (name, node) ->\r\n            if name?\r\n                let variable = @variables[name] = @createRuntime(node)\r\n                return variable\r\n\r\n"]}