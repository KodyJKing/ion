{"version":3,"sources":["Context.ion"],"names":["ion","Factory","Literal","noop",{"type":"Identifier","name":"noop","loc":{"start":{"line":6,"column":4,"fixed":true,"source":"ion/runtime/Context.ion"},"end":{"line":6,"column":8,"fixed":true,"source":"ion/runtime/Context.ion"}}},"createArrayInserter","container","isOrdered","value","sortCompareFunction","unordered","convert","getLength","length","add","index","splice","push","remove","moving","indexOf","isNode","nodeType","createHtmlInserter","name","id","Error","capture","captureSuffix","endsWith","substring","originalValue","apply","arguments","sync","document","createTextNode","childNodes","addEventListener","after","insertBefore","appendChild","removeEventListener","removeChild","createOrderManager","inserter","Array","isArray","insert","order","fastInsert","update","oldOrder","newOrder","baseLength","insertionOrders","insertionValues","pendingOrderChanges","insertInternal","JSON","stringify","previousValue","newValue","sort","removeInternal","key","insertedValue","reinsertValues","i","oldOrderValue","newOrderValue","startsWith","Context","constructor","parent","output","depth","variables","root","_runtimes","returnExpression","properties","newContext","createRuntime","node","setFastInsert","get","_order","set","oldValue","variable","getVariable","context","global","cachedGlobals","globals","setVariableFromAst","setVariableExpression","setVariableLiteral","expression"],"mappings":"aAAA;AACA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,OAAA,G,OAAU,CAAO,WAAP,CAFd,EAGIC,OAAA,G,OAAU,CAAO,WAAP,CAHd,EAIIC,IAAA,GAAOC,Y;KAJX,CADA;AAOA,IAAMC,mBAAA,GAAsBD,UAACE,SAADF,EAE5B;AAAA,IAAI,OAAM;AAAA,QACFG,SAAA,EAAWH,UAACI,KAADJ,EACnB;AAAA,YAAY,IAAGE,SAAA,CAAUG,mB,QAAb,EACZ;AAAA,gBAAgB,OAAO,KAAP,CAAhB;AAAA,aADA;AAAA,YAEY,OAAOH,SAAA,CAAUI,SAAV,KAAyB,IAAhC,CAFZ;AAAA,SAFU;AAAA,QAKFC,OAAA,EAASP,UAACI,KAADJ,E;mBAAWI,K;SALlB;AAAA,QAMFI,SAAA,EAAWR,Y;mBAAGE,SAAA,CAAUO,M;SANtB;AAAA,QAOFC,GAAA,EAAKV,UAACI,KAADJ,EAAQW,KAARX,EACb;AAAA,YAAY,IAAGW,K,QAAH,EACZ;AAAA,gBAAgBT,SAAA,CAAUU,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB,EAA2BP,KAA3B,EAAhB;AAAA,aADY,MAGZ;AAAA,gBAAgBF,SAAA,CAAUW,IAAV,CAAeT,KAAf,EAAhB;AAAA,aAHA;AAAA,SARU;AAAA,QAYFU,MAAA,EAAQd,UAACW,KAADX,EAAQI,KAARJ,EAAee,MAAff,EAChB;AAAA,YAAYW,KAAA,GAAAA,K,WAAAA,K,GAAST,SAAA,CAAUc,OAAV,CAAkBZ,KAAlB,CAAT,CAAZ;AAAA,YACYF,SAAA,CAAUU,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB,EADZ;AAAA,SAbU;AAAA,KAAN,CAAJ;AAAA,CAFA,CAPA;AAyBA,IAAMM,MAAA,GAASjB,UAACI,KAADJ,E;WAAW,O,CAAOI,K,WAAAA,KAAA,CAAOc,Q,UAAd,K;CAA1B,CAzBA;AA0BA,IAAMC,kBAAA,GAAqBnB,UAACE,SAADF,EAC3B;AAAA,IAAI,OAAM;AAAA,QACFG,SAAA,EAAWH,UAACI,KAADJ,EACnB;AAAA,YAAY,IAAG,OAAOI,KAAP,KAAkB,UAArB,EACZ;AAAA,gBAAgB,OAAO,KAAP,CAAhB;AAAA,aADA;AAAA,YAEY,IAAGF,SAAA,CAAUI,SAAb,EACZ;AAAA,gBAAgB,OAAO,KAAP,CAAhB;AAAA,aAHA;AAAA,YAIY,OAAO,IAAP,CAJZ;AAAA,SAFU;AAAA,QAOFC,OAAA,EAASP,UAACI,KAADJ,EACjB;AAAA,YAAY,IAAG,OAAOI,KAAP,KAAgB,UAAnB,EACZ;AAAA,gBAAgB,IAAIgB,IAAA,GAAOhB,KAAA,CAAMiB,E,WAANjB,KAAA,CAAMiB,E,GAAKjB,KAAA,CAAMgB,IAA5B,CAAhB;AAAA,gBACgB,IAAG,C,CAAIA,I,SAAP,EAChB;AAAA,oBAAoB,MAAM,IAAIE,KAAJ,C,6CAAA,CAAN,CAApB;AAAA,iBAFA;AAAA,gBAGgB,IAAIC,OAAA,GAAU,KAAd,CAHhB;AAAA,gBAIgB,IAAIC,aAAA,GAAgB,UAApB,CAJhB;AAAA,gBAKgB,IAAGJ,IAAA,CAAKK,QAAL,CAAcD,aAAd,CAAH,EAChB;AAAA,oBAAoBD,OAAA,GAAU,IAAV,CAApB;AAAA,oBACoBH,IAAA,GAAOA,IAAA,CAAKM,SAAL,CAAe,CAAf,EAAkBN,IAAA,CAAKX,MAAL,GAAce,aAAA,CAAcf,MAA9C,CAAP,CADpB;AAAA,iBANA;AAAA,gBAQgB,IAAIkB,aAAA,GAAgBvB,KAApB,CARhB;AAAA,gBASgBA,KAAA,GAAQ,YACxB;AAAA,oBAAoBuB,aAAA,CAAcC,KAAd,CAAoB,IAApB,EAAuBC,SAAvB,EAApB;AAAA,oBACoBjC,GAAA,CAAIkC,IAAJ,GADpB;AAAA,iBADgB,CAThB;AAAA,gBAYgB1B,KAAA,CAAMiB,EAAN,GAAWD,IAAX,CAZhB;AAAA,gBAagBhB,KAAA,CAAMmB,OAAN,GAAgBA,OAAhB,CAbhB;AAAA,aADY,MAeK,IAAG,CAAIN,MAAA,CAAOb,KAAP,CAAP,EACjB;AAAA,gBAAgBA,KAAA,GAAQ2B,QAAA,CAASC,cAAT,CAAwB5B,KAAxB,CAAR,CAAhB;AAAA,aAhBA;AAAA,YAiBY,OAAOA,KAAP,CAjBZ;AAAA,SARU;AAAA,QA0BFI,SAAA,EAAWR,Y;mBAAGE,SAAA,CAAU+B,UAAV,CAAqBxB,M;SA1BjC;AAAA,QA2BFC,GAAA,EAAKV,UAACI,KAADJ,EAAQW,KAARX,EACb;AAAA,YAAY,IAAG,OAAOI,KAAP,KAAgB,UAAnB,EACZ;AAAA,gBAAgBF,SAAA,CAAUgC,gBAAV,CAA2B9B,KAAA,CAAMiB,EAAjC,EAAqCjB,KAArC,EAA4CA,KAAA,CAAMmB,OAAlD,EAAhB;AAAA,aADY,MAGZ;AAAA,gBAAgB,IAAGZ,K,QAAH,EAChB;AAAA,oBAAoB,IAAIwB,KAAA,GAAQjC,SAAA,CAAU+B,UAAV,CAAqBtB,KAArB,CAAZ,CAApB;AAAA,oBACoB,IAAGwB,K,QAAH,EACpB;AAAA,wBAAwBjC,SAAA,CAAUkC,YAAV,CAAuBhC,KAAvB,EAA8B+B,KAA9B,EAAxB;AAAA,wBACwB,OADxB;AAAA,qBAFA;AAAA,iBADA;AAAA,gBAKgBjC,SAAA,CAAUmC,WAAV,CAAsBjC,KAAtB,EALhB;AAAA,aAHA;AAAA,SA5BU;AAAA,QAqCFU,MAAA,EAAQd,UAACW,KAADX,EAAQI,KAARJ,EAAee,MAAff,EAChB;AAAA,YAAY,IAAG,OAAOI,KAAP,KAAgB,UAAnB,EACZ;AAAA,gBAAgBF,SAAA,CAAUoC,mBAAV,CAA8BlC,KAAA,CAAMiB,EAApC,EAAwCjB,KAAxC,EAAhB;AAAA,aADY,MAEK,IAAG,CAAIW,MAAP,EACjB;AAAA,gBAAgBb,SAAA,CAAUqC,WAAV,CAAsBnC,KAAtB,EAAhB;AAAA,aAHA;AAAA,SAtCU;AAAA,KAAN,CAAJ;AAAA,CADA,CA1BA;AAsEA,IAAMoC,kBAAA,GAAqBxC,UAACE,SAADF,EAC3B;AAAA,IAAI,IAAIyC,QAAJ,CAAJ;AAAA,IACI,IAAGC,KAAA,CAAMC,OAAN,CAAczC,SAAd,CAAH,EACJ;AAAA,QAAQuC,QAAA,GAAWxC,mBAAA,CAAoBC,SAApB,CAAX,CAAR;AAAA,KADI,MAEK,IAAGe,MAAA,CAAOf,SAAP,CAAH,EACT;AAAA,QAAQuC,QAAA,GAAWtB,kBAAA,CAAmBjB,SAAnB,CAAX,CAAR;AAAA,KADS,MAGT;AAAA,QAAQ,OAAM;AAAA,YACF0C,MAAA,EAAQ5C,UAACI,KAADJ,EAAQ6C,KAAR7C,EAAe8C,UAAf9C,E;uBAA8BJ,GAAA,CAAIc,GAAJ,CAAQR,SAAR,EAAmBE,KAAnB,C;aADpC;AAAA,YAEF2C,MAAA,EAAQ/C,UAACgD,QAADhD,EAAWiD,QAAXjD,E;aAFN;AAAA,SAAN,CAAR;AAAA,KANA;AAAA,IAUI,IAAIkD,UAAA,GAAaT,QAAA,CAASjC,SAAT,EAAjB,CAVJ;AAAA,IAWI,IAAI2C,eAAA,GAAkB,EAAtB,CAXJ;AAAA,IAYI,IAAIC,eAAA,GAAkB,EAAtB,CAZJ;AAAA,IAaI,IAAIC,mBAAA,GAAsB,EAA1B,CAbJ;AAAA,IAeI,IAAIC,cAAA,GAAiBtD,UAACI,KAADJ,EAAQ6C,KAAR7C,EAAe8C,UAAf9C,EACzB;AAAA,QAAQ,IAAGoD,eAAA,CAAgBP,KAAhB,C,QAAH,EACR;AAAA,YAAY,MAAM,IAAIvB,KAAJ,C,oEAA4EiC,IAAA,CAAKC,SAAL,CAAe;AAAA,gBAACX,KAAA,EAAAA,KAAD;AAAA,gBAAOY,aAAA,EAAcL,eAAA,CAAgBP,KAAhB,CAArB;AAAA,gBAA4Ca,QAAA,EAAStD,KAArD;AAAA,aAAf,CAA5E,CAAN,CAAZ;AAAA,SADA;AAAA,QAGQ,IAAGqC,QAAA,CAAStC,SAAT,CAAmBC,KAAnB,CAAH,EACR;AAAA,YAAYgD,eAAA,CAAgBP,KAAhB,IAAyBzC,KAAzB,CAAZ;AAAA,YACY+C,eAAA,CAAgBtC,IAAhB,CAAqBgC,KAArB,EADZ;AAAA,SADQ,MAIR;AAAA,YAAYC,UAAA,GAAa,IAAb,CAAZ;AAAA,SAPA;AAAA,QASQ,IAAGA,UAAH,EACR;AAAA,YAAYL,QAAA,CAAS/B,GAAT,CAAaN,KAAb,EAAZ;AAAA,SADQ,MAGR;AAAA,YAAY+C,eAAA,CAAgBQ,IAAhB,GAAZ;AAAA,YACY,IAAIhD,KAAA,GAAQwC,eAAA,CAAgBnC,OAAhB,CAAwB6B,KAAxB,CAAZ,CADZ;AAAA,YAEYJ,QAAA,CAAS/B,GAAT,CAAaN,KAAb,EAAoB8C,UAAA,GAAavC,KAAjC,EAFZ;AAAA,SAZA;AAAA,KADI,CAfJ;AAAA,IA+BI,IAAIiD,cAAA,GAAiB5D,UAACI,KAADJ,EAAQ6C,KAAR7C,EAAee,MAAff,EACzB;AAAA,QAAQ,IAAG,CAAIyC,QAAA,CAAStC,SAAT,CAAmBC,KAAnB,CAAP,EACR;AAAA,YAAYqC,QAAA,CAAS3B,MAAT,CAAgB,IAAhB,EAAsBV,KAAtB,EAAZ;AAAA,SADQ,MAIR;AAAA,YAAY,IAAGgD,eAAA,CAAgBP,KAAhB,MAA4BzC,KAA/B,EAEZ;AAAA,gBAAgByC,KAAA,GAAQ,IAAR,CAAhB;AAAA,gBACgB,SAAIgB,GAAJ,IAA0BT,eAA1B,EAChB;AAAA,oB,IADyBU,a,GAAiBV,e,CAAtBS,G,EACpB;AAAA,oBAAoB,IAAGC,aAAA,KAAiB1D,KAApB,EACpB;AAAA,wBAAwByC,KAAA,GAAQgB,GAAR,CAAxB;AAAA,wBACwB,MADxB;AAAA,qBADA;AAAA,iBAFA;AAAA,gBAKgB,IAAGhB,KAAA,KAAS,IAAZ,EAChB;AAAA,oBAAoB,MAAM,IAAIvB,KAAJ,C,0CAAU,GAA6ClB,KAAvD,CAAN,CAApB;AAAA,iBANA;AAAA,aAFA;AAAA,YAUY,IAAIO,KAAA,GAAQwC,eAAA,CAAgBnC,OAAhB,CAAwB6B,KAAxB,CAAZ,CAVZ;AAAA,YAWY,IAAGlC,KAAA,GAAQ,CAAX,EACZ;AAAA,gBAAgB,MAAM,IAAIW,KAAJ,C,qBAA6BiC,IAAA,CAAKC,SAAL,CAAeX,KAAf,C,mBAAoCU,IAAA,CAAKC,SAAL,CAAeL,eAAf,CAAjE,CAAN,CAAhB;AAAA,aAZA;AAAA,YAcYA,eAAA,CAAgBvC,MAAhB,CAAuBD,KAAvB,EAA8B,CAA9B,EAdZ;AAAA,YAgBY8B,QAAA,CAAS3B,MAAT,CAAgBoC,UAAA,GAAavC,KAA7B,EAAoCP,KAApC,EAA2CW,MAA3C,EAhBZ;AAAA,YAkBY,OAAOqC,eAAA,CAAgBP,KAAhB,CAAP,CAlBZ;AAAA,SAJA;AAAA,KADI,CA/BJ;AAAA,IAwDI,OAAM;AAAA,QACFD,MAAA,EAAQ5C,UAACI,KAADJ,EAAQ6C,KAAR7C,EAAe8C,UAAf9C,EAChB;AAAA,YAAYI,KAAA,GAAQqC,QAAA,CAASlC,OAAT,CAAiBH,KAAjB,CAAR,CAAZ;AAAA,YACYkD,cAAA,CAAelD,KAAf,EAAsByC,KAAtB,EAA6BC,UAA7B,EADZ;AAAA,YAEY,OAAO,Y;uBAAGc,cAAA,CAAexD,KAAf,EAAsByC,KAAtB,C;aAAV,CAFZ;AAAA,SAFU;AAAA,QAKFE,MAAA,EAAQ/C,UAACgD,QAADhD,EAAWiD,QAAXjD,EAChB;AAAA,YAAY,IAAGgD,Q,QAAA,IAAcC,Q,QAAjB,EACZ;AAAA,gBAAgBI,mBAAA,CAAoBL,QAApB,IAAgCC,QAAhC,CAAhB;AAAA,aADY,MAGZ;AAAA,gBAAgB,IAAIc,cAAA,GAAiB,EAArB,CAAhB;AAAA,gBACgB,KAAI,IAAIC,CAAA,GAAIb,eAAA,CAAgB1C,MAAhB,GAAyB,CAAjC,CAAJ,CAAwCuD,CAAA,IAAK,CAA7C,EAAgDA,CAAA,EAAhD,EAChB;AAAA,oBAAoB,IAAInB,KAAA,GAAQM,eAAA,CAAgBa,CAAhB,CAAZ,CAApB;AAAA,oBACoB,SAAIC,aAAJ,IAAoCZ,mBAApC,EACpB;AAAA,wB,IADuCa,a,GAAiBb,mB,CAAhCY,a,EACxB;AAAA,wBAAwB,IAAGpB,KAAA,CAAMsB,UAAN,CAAiBF,aAAjB,CAAH,EACxB;AAAA,4BAA4B,IAAIH,aAAA,GAAgBV,eAAA,CAAgBP,KAAhB,CAApB,CAA5B;AAAA,4BAI4BkB,cAAA,CAAeG,aAAA,GAAgBrB,KAAA,CAAMnB,SAAN,CAAgBuC,aAAA,CAAcxD,MAA9B,CAA/B,IAAwEqD,aAAxE,CAJ5B;AAAA,4BAK4BF,cAAA,CAAeE,aAAf,EAA8BjB,KAA9B,EAAqC,IAArC,EAL5B;AAAA,yBADA;AAAA,qBAFA;AAAA,iBAFA;AAAA,gBAagB,SAAIA,KAAJ,IAAoBkB,cAApB,EAGhB;AAAA,oB,IAH2B3D,K,GAAS2D,c,CAAhBlB,K,EAGpB;AAAA,oBAAoBS,cAAA,CAAelD,KAAf,EAAsByC,KAAtB,EAApB;AAAA,iBAhBA;AAAA,gBAmBgBQ,mBAAA,GAAsB,EAAtB,CAnBhB;AAAA,aAHA;AAAA,SANU;AAAA,KAAN,CAxDJ;AAAA,CADA,CAtEA;IA6Jae,O;;QACTC,WAAA,EAAa,SADJD,OACI,CAACE,MAAD,EAASC,MAAT,EAAiB1B,KAAjB,EAEjB;AAAA,YAAQ,KAAC0B,MAAD,GAAUA,MAAV,CAAR;AAAA,YAEQ,KAACD,MAAD,GAAUA,MAAV,CAFR;AAAA,YAIQ,KAACE,KAAD,GAASF,M,QAAA,GAAUA,MAAA,CAAOE,KAAP,GAAe,CAAzB,GAA6B,CAAtC,CAJR;AAAA,YAMQ,KAACC,SAAD,GAAa,EAAb,CANR;AAAA,YAQQ,KAACC,IAAD,G,CAAQJ,M,WAAAA,MAAA,CAAQI,I,qBAARJ,MAAA,CAAQI,I,GAAO,IAAvB,CARR;AAAA,YAUQ,KAACC,SAAD,GAAa,EAAb,CAVR;AAAA,YAYQ,KAACC,gBAAD,GAAoBN,M,WAAAA,MAAA,CAAQM,gB,SAA5B,CAZR;AAAA,YAeQ,KAACnC,QAAD,GAAY8B,MAAA,K,CAAUD,M,WAAAA,MAAA,CAAQC,M,UAAlB,GAA2BD,M,WAAAA,MAAA,CAAQ7B,Q,SAAnC,GAA8CD,kBAAA,CAAmB+B,MAAnB,CAA1D,CAfR;AAAA,YAgBQ,KAAC1B,KAAD,GAASA,KAAT,CAhBR;AAAA,S;QAiBIgC,UAAA,EAAW;AAAA,YACPC,UAAA,EAAY9E,UAACuE,MAADvE,EAAmB6C,KAAnB7C,E;oBAACuE,M;oBAAAA,M,GAAS,KAACA,M;uBAAkB,IAAIH,OAAJ,CAAY,IAAZ,EAAeG,MAAf,EAAuB1B,KAAvB,C;aADlC;AAAA,YAEPkC,aAAA,EAAe/E,UAACgF,IAADhF,EACvB;AAAA,gBAAY,OAAOH,OAAA,CAAQkF,aAAR,CAAsB,IAAtB,EAAyBC,IAAzB,CAAP,CAAZ;AAAA,aAHe;AAAA,YAIPC,aAAA,EAAejF,UAACI,KAADJ,EACvB;AAAA,gBAAY,IAAG,KAACyC,Q,QAAJ,EACZ;AAAA,oBAAgB,KAACA,QAAD,CAAUK,UAAV,GAAuB1C,KAAvB,CAAhB;AAAA,iBADA;AAAA,aALe;AAAA,YAOPyC,KAAA,EAAM;AAAA,gBACFqC,GAAA,EAAKlF,YACjB;AAAA,oBAAgB,IAAII,KAAA,GAAQ,KAAC+E,M,WAAD,KAACA,M,KAAb,CAAhB;AAAA,oBACgB,IAAG,KAACZ,M,QAAD,IAAa,KAACA,MAAD,K,CAAW,KAACD,M,WAAD,KAACA,MAAD,CAASC,M,UAApC,EAChB;AAAA,wBAAoBnE,KAAA,GAAQ,KAACkE,MAAD,CAAQzB,KAAR,GAAgBzC,KAAxB,CAApB;AAAA,qBAFA;AAAA,oBAGgB,OAAOA,KAAP,CAHhB;AAAA,iBAFc;AAAA,gBAMFgF,GAAA,EAAKpF,UAACI,KAADJ,EACjB;AAAA,oBAAgB,IAAImF,MAAA,GAAS,KAACA,MAAd,CAAhB;AAAA,oBACgB,IAAIE,QAAA,GAAW,KAACxC,KAAhB,CADhB;AAAA,oBAEgB,KAACsC,MAAD,GAAU/E,K,WAAAA,K,KAAV,CAFhB;AAAA,oBAGgB,IAAIsD,QAAA,GAAW,KAACb,KAAhB,CAHhB;AAAA,oBAIgB,IAAGsC,M,QAAA,IAAYzB,QAAA,KAAc2B,QAA7B,EAChB;AAAA,wBAAoB,KAAC5C,Q,WAAD,KAACA,QAAD,CAAWM,MAAX,CAAkBsC,QAAlB,EAA4B3B,QAA5B,C,SAAA,CAApB;AAAA,qBALA;AAAA,iBAPc;AAAA,aAPC;AAAA,YAoBPd,MAAA,EAAQ5C,UAACI,KAADJ,EAAQ6C,KAAR7C,EAChB;AAAA,gBAAY6C,KAAA,GAAQ,KAACA,KAAD,G,CAAUA,K,WAAAA,K,MAAlB,CAAZ;AAAA,gBACY,OAAO,KAACJ,QAAD,CAAUG,MAAV,CAAiBxC,KAAjB,EAAwByC,KAAxB,EAA+B,KAACJ,QAAD,CAAUK,UAAzC,CAAP,CADZ;AAAA,aArBe;AAAA,YAuBPoC,GAAA,EAAKlF,UAACoB,IAADpB,EACb;AAAA,gBAAY,IAAIsF,QAAA,GAAW,KAACC,WAAD,CAAanE,IAAb,CAAf,CAAZ;AAAA,gBACY,IAAG,C,CAAIkE,Q,SAAP,EACZ;AAAA,oBAAgB,MAAM,IAAIhE,KAAJ,C,2BAAkCF,I,OAAlC,CAAN,CAAhB;AAAA,iBAFA;AAAA,gBAGY,OAAOkE,QAAA,CAASlF,KAAhB,CAHZ;AAAA,aAxBe;AAAA,YA4BPmF,WAAA,EAAavF,UAACoB,IAADpB,EACrB;AAAA,gBAAY,IAAIwF,OAAA,GAAU,IAAd,EAAiBpF,KAAjB,CAAZ;AAAA,gBACY,OAAMoF,O,QAAN,EACZ;AAAA,oBAAgB,IAAIF,QAAA,GAAWE,OAAA,CAAQf,SAAR,CAAkBrD,IAAlB,CAAf,CAAhB;AAAA,oBACgB,IAAGkE,Q,QAAH,EAChB;AAAA,wBAAoB,OAAOA,QAAP,CAApB;AAAA,qBAFA;AAAA,oBAGgBE,OAAA,GAAUA,OAAA,CAAQlB,MAAlB,CAHhB;AAAA,iBAFA;AAAA,gBAQYlE,KAAA,GAAQqF,MAAA,CAAOrE,IAAP,CAAR,CARZ;AAAA,gBASY,IAAGhB,KAAA,KAAS,MAAZ,EACZ;AAAA,oBAAgB,MAAM,IAAIkB,KAAJ,C,2BAAkCF,I,OAAlC,CAAN,CAAhB;AAAA,iBAVA;AAAA,gBAaY,IAAIsE,aAAA,GAAgB,KAAChB,IAAD,CAAMiB,OAAN,QAACjB,IAAD,CAAMiB,O,WAAN,KAACjB,IAAD,CAAMiB,O,GAAW,EAArC,CAbZ;AAAA,gBAcY,OAAOD,aAAA,CAActE,IAAd,IAAAsE,aAAA,CAActE,IAAd,C,WAAAsE,aAAA,CAActE,IAAd,C,GAAuB,IAAItB,OAAJ,CAAY,EAACM,KAAA,EAAAA,KAAD,EAAZ,CAA9B,CAdZ;AAAA,aA7Be;AAAA,YA4CPwF,kBAAA,EAAoB5F,UAACoB,IAADpB,EAAOgF,IAAPhF,EAC5B;AAAA,gBAAY,IAAGoB,I,QAAH,EACZ;AAAA,oBAAgB,OAAO,KAACyE,qBAAD,CAAuBzE,IAAvB,EAA6B,KAAC2D,aAAD,CAAeC,IAAf,CAA7B,CAAP,CAAhB;AAAA,iBADA;AAAA,aA7Ce;AAAA,YA+CPc,kBAAA,EAAoB9F,UAACoB,IAADpB,EAAOI,KAAPJ,EAC5B;AAAA,gBAAY,IAAGoB,I,QAAH,EACZ;AAAA,oBAAgB,OAAO,KAACyE,qBAAD,CAAuBzE,IAAvB,EAA6B,IAAItB,OAAJ,CAAY,EAACM,KAAA,EAAAA,KAAD,EAAZ,CAA7B,CAAP,CAAhB;AAAA,iBADA;AAAA,aAhDe;AAAA,YAkDPyF,qBAAA,EAAuB7F,UAACoB,IAADpB,EAAO+F,UAAP/F,EAC/B;AAAA,gBAAY,IAAGoB,I,QAAH,EACZ;AAAA,oBAAgB,IAAG,KAACqD,SAAD,CAAWrD,IAAX,C,QAAH,EAChB;AAAA,wBAAoB,MAAM,IAAIE,KAAJ,C,cAAsBF,I,wBAAtB,CAAN,CAApB;AAAA,qBADA;AAAA,oBAIgB,KAACqD,SAAD,CAAWrD,IAAX,IAAmB2E,UAAnB,CAJhB;AAAA,oBAKgB,OAAOA,UAAP,CALhB;AAAA,iBADA;AAAA,aAnDe;AAAA,S;OAjLf;2BA6Ja3B,O","sourcesContent":["\nconst\n    ion = import '../'\n    Factory = import './Factory'\n    Literal = import './Literal'\n    noop = ->\n\nconst createArrayInserter = (container) ->\n    # need to override sort..\n    return\n        isOrdered: (value) ->\n            if container.sortCompareFunction?\n                return false\n            return container.unordered isnt true\n        convert: (value) -> value\n        getLength: -> container.length\n        add: (value, index) ->\n            if index?\n                container.splice(index, 0, value)\n            else\n                container.push(value)\n        remove: (index, value, moving) ->\n            index ?= container.indexOf(value)\n            container.splice(index, 1)\n\nconst isNode = (value) -> typeof value?.nodeType is \"number\"\nconst createHtmlInserter = (container) ->\n    return\n        isOrdered: (value) ->\n            if typeof value isnt 'function'\n                return false\n            if container.unordered\n                return false\n            return true\n        convert: (value) ->\n            if typeof value is 'function'\n                let name = value.id ? value.name\n                if not name?\n                    throw new Error(\"Functions added to an Element must be named\")\n                let capture = false\n                let captureSuffix = '_capture'\n                if name.endsWith(captureSuffix)\n                    capture = true\n                    name = name.substring(0, name.length - captureSuffix.length)\n                let originalValue = value\n                value = ->\n                    originalValue.apply(@, arguments)\n                    ion.sync()\n                value.id = name\n                value.capture = capture\n            else if not isNode(value)\n                value = document.createTextNode(value)\n            return value\n        getLength: -> container.childNodes.length\n        add: (value, index) ->\n            if typeof value is 'function'\n                container.addEventListener(value.id, value, value.capture)\n            else\n                if index?\n                    let after = container.childNodes[index]\n                    if after?\n                        container.insertBefore(value, after)\n                        return\n                container.appendChild(value)\n        remove: (index, value, moving) ->\n            if typeof value is 'function'\n                container.removeEventListener(value.id, value)\n            else if not moving\n                container.removeChild(value)\n\nconst createOrderManager = (container) ->\n    let inserter\n    if Array.isArray(container)\n        inserter = createArrayInserter(container)\n    else if isNode(container)\n        inserter = createHtmlInserter(container)\n    else\n        return\n            insert: (value, order, fastInsert) -> ion.add(container, value)\n            update: (oldOrder, newOrder) ->\n\n    let baseLength = inserter.getLength()\n    let insertionOrders = []\n    let insertionValues = {}        # order => value\n    let pendingOrderChanges = {}    # oldOrder => newOrder\n\n    let insertInternal = (value, order, fastInsert) ->\n        if insertionValues[order]?\n            throw new Error(\"Cannot add a new item with the same order as an existing item: {{JSON.stringify({order,previousValue:insertionValues[order],newValue:value})}}\")\n\n        if inserter.isOrdered(value)\n            insertionValues[order] = value\n            insertionOrders.push(order)\n        else\n            fastInsert = true\n\n        if fastInsert\n            inserter.add(value)\n        else\n            insertionOrders.sort()\n            let index = insertionOrders.indexOf(order)\n            inserter.add(value, baseLength + index)\n    let removeInternal = (value, order, moving) ->\n        if not inserter.isOrdered(value)\n            inserter.remove(null, value)\n        else\n            # order MAY change during reactive runtime, so we may have to look it back up\n            if insertionValues[order] isnt value\n                # then we must find the new order for this value... this could be a fucking big bug source IF our values are equivalent primitives\n                order = null\n                for key, insertedValue of insertionValues\n                    if insertedValue is value\n                        order = key\n                        break\n                if order is null\n                    throw new Error(\"Could not find value in insertionValues \" + value)\n\n            let index = insertionOrders.indexOf(order)\n            if index < 0\n                throw new Error(\"Insertion order {{JSON.stringify(order)}} not found {{JSON.stringify(insertionOrders)}}\")\n            # remove from insertionOrder\n            insertionOrders.splice(index, 1)\n            # remove from container at baseLength plus index\n            inserter.remove(baseLength + index, value, moving)\n            # delete from insertion values\n            delete insertionValues[order]\n\n    return\n        insert: (value, order, fastInsert) ->\n            value = inserter.convert(value)\n            insertInternal(value, order, fastInsert)\n            return -> removeInternal(value, order)\n        update: (oldOrder, newOrder) ->\n            if oldOrder? and newOrder?\n                pendingOrderChanges[oldOrder] = newOrder\n            else\n                let reinsertValues = {}\n                for let i = insertionOrders.length - 1; i >= 0; i--\n                    let order = insertionOrders[i]\n                    for oldOrderValue, newOrderValue of pendingOrderChanges\n                        if order.startsWith(oldOrderValue)\n                            let insertedValue = insertionValues[order]\n                            # if insertedValue?.debug\n                            #     console.log('REMOVING----------', insertedValue)\n\n                            reinsertValues[newOrderValue + order.substring(oldOrderValue.length)] = insertedValue\n                            removeInternal(insertedValue, order, true)\n\n                # new re-add changed values\n                for order, value of reinsertValues\n                    # if value?.debug\n                    #     console.log('REINSERTING+++++++++', insertedValue)\n                    insertInternal(value, order)\n\n                # now reset pendingOrderChanges\n                pendingOrderChanges = {}\n\nexport class Context\n    constructor: (parent, output, order) ->\n        # the output object that values are written to\n        @output = output\n        # parent is either null or another Context\n        @parent = parent\n        # calculate and set the depth\n        @depth = parent? ? parent.depth + 1 : 0\n        # an object that maps variable names to variable expressions\n        @variables = {}\n        # store a reference to the root context\n        @root = parent?.root ? @\n        # runtime nodes keyed by toCode\n        @_runtimes = {}\n        # if there is a return expression, copy it\n        @returnExpression = parent?.returnExpression\n        # if this is a new output object then create a new list of objects inserted into output object\n        # they are keyed by order string\n        @inserter = output is parent?.output ? parent?.inserter : createOrderManager(output)\n        @order = order\n    properties:\n        newContext: (output = @output, order) -> new Context(@, output, order)\n        createRuntime: (node) ->\n            return Factory.createRuntime(@, node)\n        setFastInsert: (value) ->\n            if @inserter?\n                @inserter.fastInsert = value\n        order:\n            get: ->\n                let value = @_order ? \"\"\n                if @output? and @output is @parent?.output\n                    value = @parent.order + value\n                return value\n            set: (value) ->\n                let _order = @_order\n                let oldValue = @order\n                @_order = value ? \"\"\n                let newValue = @order\n                if _order? and newValue isnt oldValue\n                    @inserter?.update(oldValue, newValue)\n        insert: (value, order) ->\n            order = @order + (order ? \"\")\n            return @inserter.insert(value, order, @inserter.fastInsert)\n        get: (name) ->\n            let variable = @getVariable(name)\n            if not variable?\n                throw new Error(\"Variable not found: '{{name}}'\")\n            return variable.value\n        getVariable: (name) ->\n            let context = @, value\n            while context?\n                let variable = context.variables[name]\n                if variable?\n                    return variable\n                context = context.parent\n            # if the variable is not defined by us then it is probably a global variable.\n            # we do however require that it be a globally defined variable, otherwise we throw an error.\n            value = global[name]\n            if value is undefined\n                throw new Error(\"Variable not found: '{{name}}'\")\n            # global values are considered to be constants.\n            # we could consider caching these values within the context.\n            let cachedGlobals = @root.globals ?= {}\n            return cachedGlobals[name] ?= new Literal({value})\n        setVariableFromAst: (name, node) ->\n            if name?\n                return @setVariableExpression(name, @createRuntime(node))\n        setVariableLiteral: (name, value) ->\n            if name?\n                return @setVariableExpression(name, new Literal({value}))\n        setVariableExpression: (name, expression) ->\n            if name?\n                if @variables[name]?\n                    throw new Error(\"Variable {{name}} is already defined\")\n                # we always watch the expression to make sure it is created only once\n                # if we don't, then it may be created and destroyed multiple times which can cause bugs\n                @variables[name] = expression\n                return expression\n"]}