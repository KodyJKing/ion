{"version":3,"sources":["Property.ion"],"names":["ion","Statement","Property","properties","activate",{"type":"Identifier","name":"activate","loc":{"start":{"line":7,"column":8,"fixed":true},"end":{"line":7,"column":16,"fixed":true}}},"keyExpression","context","createRuntime","computed","key","name","value","valueExpression","watch","keyWatcher","setLeftValue","currentValue","output","get","restoreProperty","keyValue","setProperty","valueWatcher","valueValue","bi","observe","contextObserver","setMemberValue","deactivate","unobserve","leftValue","unwatch","explicitUndefined","operator","originalKey","originalValue","set"],"mappings":"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","sourcesContent":["const\r\n    ion = import '../'\r\n    Statement = import './Statement'\r\n\r\nexport class Property extends Statement\r\n    properties:\r\n        activate: ->\r\n            super\r\n            # create the runtime expressions\r\n            @keyExpression ?= @context.createRuntime(@computed ? @key : (@key.name ? @key.value))\r\n            @valueExpression ?= @context.createRuntime(@value)\r\n            # then watch them, this way, the keywatcher can set the left value on the right hand side\r\n            # before it is activated\r\n            (@keyExpression.watch)\r\n                @keyWatcher ?= (key) =>\r\n                    if key? and @valueExpression.setLeftValue?\r\n                        # if there is a context.output then get the current key from that\r\n                        # otherwise the key is probably referring to a variable\r\n                        let currentValue = @context.output ? ion.get(@context.output, key) : @context.get(key)\r\n                        if currentValue?\r\n                            @valueExpression.setLeftValue(currentValue)\r\n\r\n                    @restoreProperty()\r\n                    @keyValue = key\r\n                    @setProperty()\r\n            (@valueExpression.watch)\r\n                @valueWatcher ?= (value) =>\r\n                    @valueValue = value\r\n                    @setProperty()\r\n\r\n            if @bi\r\n                # then we need to observe the context output object for changes to the leftValue property.\r\n                # console.log('bidirectional!!!!!!!!!!!!!', @valueValue, @keyValue, @context.output)\r\n                (ion.observe)\r\n                    @context.output\r\n                    @contextObserver ?= =>\r\n                        # console.log('CALLBACK FROM OBSERVER', @valueValue)\r\n                        let value = ion.get(@context.output, @keyValue)\r\n                        if value isnt undefined\r\n                            @valueExpression.setMemberValue(value)\r\n                    @keyValue\r\n\r\n        deactivate: ->\r\n            super\r\n            @restoreProperty()\r\n            ion.unobserve(@context.output, @contextObserver, @leftValue)\r\n            @keyExpression.unwatch(@keyWatcher)\r\n            @valueExpression.unwatch(@valueWatcher)\r\n        restoreProperty: ->\r\n            # if @originalKey?\r\n            #     ion.set(@context.output, @originalKey, @originalValue)\r\n            #     @originalKey = undefined\r\n            #     @originalValue = undefined\r\n        setProperty: (key = @keyValue, value = @valueValue) ->\r\n            # we must have a key, and the value must not be undefined UNLESS the value is explicitly undefined!\r\n            let explicitUndefined = @value.operator is 'void'\r\n            if key? and (value isnt undefined or explicitUndefined)\r\n                let currentValue = ion.get(@context.output, key)\r\n                if explicitUndefined or currentValue isnt value\r\n                    @originalKey ?= key\r\n                    @originalValue ?= currentValue\r\n                    ion.set(@context.output, key, value, not explicitUndefined)\r\n"]}