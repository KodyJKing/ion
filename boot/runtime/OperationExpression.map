{"version":3,"sources":["OperationExpression.ion"],"names":["ion","DynamicExpression","OperationExpression","constructor","properties","args","type","left","right","argument","test","consequent","alternate","activate",{"type":"Identifier","name":"activate","loc":{"start":{"line":18,"column":8,"fixed":true},"end":{"line":18,"column":16,"fixed":true}}},"argumentExpressions","context","createRuntime","elements","observeElements","factory","observe","watch","watcher","value","argumentValues","evaluate","deactivate","unwatch","Error","apply","setValue","module","exports"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,iBAAA,G,OAAoB,CAAO,qBAAP,CAFxB;IAIuBC,mB;;QACnBC,WAAA,EAAa,SADMD,mBACN,CAACE,UAAD,EACjB;AAAA,Y,gDAAQ,CAAR;AAAA,YAEQ,IAAG,C,CAAI,KAACC,I,SAAR,EACR;AAAA,gBAAY,IAAG,KAACC,IAAD,KAAS,kBAAZ,EACZ;AAAA,oBAAgB,KAACD,IAAD,GAAQ;AAAA,wBAAC,KAACE,IAAF;AAAA,wBAAQ,KAACC,KAAT;AAAA,qBAAR,CAAhB;AAAA,iBADY,MAEK,IAAG,KAACF,IAAD,KAAS,iBAAZ,EACjB;AAAA,oBAAgB,KAACD,IAAD,GAAQ,CAAC,KAACI,QAAF,CAAR,CAAhB;AAAA,iBADiB,MAEA,IAAG,KAACH,IAAD,KAAS,uBAAZ,EACjB;AAAA,oBAAgB,KAACD,IAAD,GAAQ;AAAA,wBAAC,KAACK,IAAF;AAAA,wBAAQ,KAACC,UAAT;AAAA,wBAAqB,KAACC,SAAtB;AAAA,qBAAR,CAAhB;AAAA,iBALA;AAAA,aAHA;AAAA,S;QASIR,UAAA,EAAW;AAAA,YACPC,IAAA,EAAM,IADC;AAAA,YAEPQ,QAAA,EAAUC,YAClB;AAAA,gB,oCADQD,Q,uBACI,CAAZ;AAAA,gBACY,KAACE,mBAAD,QAACA,mB,WAAD,KAACA,mB,GAAuB,KAACC,OAAD,CAASC,aAAT,CAAuB;AAAA,oBAACX,IAAA,EAAK,iBAAN;AAAA,oBAAwBY,QAAA,EAAS,KAACb,IAAlC;AAAA,oBAAwCc,eAAA,EAAgB,KAACC,OAAD,CAASC,OAAjE;AAAA,iBAAvB,CAAxB,CADZ;AAAA,gBAEa,KAACN,mBAAD,CAAqBO,KAAtB,CACI,KAACC,OAAD,QAACA,O,WAAD,KAACA,O,YAAW,UAACC,KAAD,EAC5B;AAAA,oBAAoB,KAACC,cAAD,GAAkBD,KAAlB,CAApB;AAAA,oBACoB,KAACE,QAAD,GADpB;AAAA,iB,OAFY,EAFZ;AAAA,aAHe;AAAA,YASPC,UAAA,EAAYb,YACpB;AAAA,gB,oCADQa,U,uBACI,CAAZ;AAAA,gBACY,KAACZ,mBAAD,CAAqBa,OAArB,CAA6B,KAACL,OAA9B,EADZ;AAAA,aAVe;AAAA,YAYPG,QAAA,EAAUZ,YAClB;AAAA,gBAAY,IAAG,C,CAAI,KAACM,OAAD,CAASM,Q,SAAhB,EACZ;AAAA,oBAAgB,MAAM,IAAIG,KAAJ,C,6CAAU,GAAgD,KAACT,OAA3D,CAAN,CAAhB;AAAA,iBADA;AAAA,gBAEY,IAAII,KAAA,GAAQ,KAACJ,OAAD,CAASM,QAAT,CAAkBI,KAAlB,CAAwB,KAACd,OAAzB,EAAkC,KAACS,cAAnC,CAAZ,CAFZ;AAAA,gBAGY,KAACM,QAAD,CAAUP,KAAV,EAHZ;AAAA,aAbe;AAAA,S;OAXoCvB,iB,EAJnD;AAIA+B,MAAA,CAAOC,OAAP,GAAuB/B,mBAAvB","sourcesContent":["const\r\n    ion = import '../'\r\n    DynamicExpression = import './DynamicExpression'\r\n\r\nmodule.exports = class OperationExpression extends DynamicExpression\r\n    constructor: (properties) ->\r\n        super\r\n        # default args for common types of BinaryExpressions\r\n        if not @args?\r\n            if @type is 'BinaryExpression'\r\n                @args = [@left, @right]\r\n            else if @type is 'UnaryExpression'\r\n                @args = [@argument]\r\n            else if @type is 'ConditionalExpression'\r\n                @args = [@test, @consequent, @alternate]\r\n    properties:\r\n        args: null\r\n        activate: ->\r\n            super\r\n            @argumentExpressions ?= @context.createRuntime({type:'ArrayExpression',elements:@args, observeElements:@factory.observe})\r\n            (@argumentExpressions.watch)\r\n                @watcher ?= (value) =>\r\n                    @argumentValues = value\r\n                    @evaluate()\r\n        deactivate: ->\r\n            super\r\n            @argumentExpressions.unwatch(@watcher)\r\n        evaluate: ->\r\n            if not @factory.evaluate?\r\n                throw new Error(\"evaluate method not defined for operation: \" + @factory)\r\n            let value = @factory.evaluate.apply(@context, @argumentValues)\r\n            @setValue(value)\r\n"]}