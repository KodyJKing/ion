{"version":3,"sources":["Object.observe.ion"],"names":["clone",{"type":"Identifier","name":"clone","loc":{"start":{"line":2,"column":6,"fixed":true},"end":{"line":2,"column":11,"fixed":true}}},"object","key","value","createObjectObserveAndUnobserve","map","Map","array","observe","callback","nodeType","global","document","meta","get","callbacks","set","push","unobserve","index","lastIndexOf","splice","length","delete","getChanges","oldValue","newValue","changes","change","type","name","hasOwnProperty","oldPropertyValue","newPropertyValue","checkForChanges","maxCycles","i","totalChanges","pendingChanges","slice","Error","test","a","b","c","d","handler","JSON","stringify","Object"],"mappings":"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","sourcesContent":["\r\nconst clone = (object) ->\r\n    return {}\r\n        for key, value of object\r\n            [key]: value\r\n\r\nconst createObjectObserveAndUnobserve = ->\r\n    # multiple callbacks on same object.\r\n    let map = new Map()\r\n    let array = []\r\n\r\n    let observe = (object, callback) ->\r\n        # console.log('+observe', object, callback)\r\n        if object.nodeType is 1 or object is global.document\r\n            return\r\n        let meta = map.get(object)\r\n        if not meta?\r\n            meta =\r\n                object: object\r\n                clone: clone(object)\r\n                callbacks: []\r\n            map.set(object, meta)\r\n            array.push(meta)\r\n        meta.callbacks.push(callback)\r\n    let unobserve = (object, callback) ->\r\n        # console.log('-unobserve', object, callback)\r\n        if object.nodeType is 1 or object is global.document\r\n            return\r\n        let meta = map.get(object)\r\n        if meta?\r\n            let index = meta.callbacks.lastIndexOf(callback)\r\n            if index >= 0\r\n                meta.callbacks.splice(index, 1)\r\n                if meta.callbacks.length is 0\r\n                    # remove no longer observed objects\r\n                    map.delete(object)\r\n                    array.splice(array.lastIndexOf(meta), 1)\r\n    let getChanges = (oldValue, newValue) ->\r\n        let changes = null\r\n        let change = (type, name, oldValue) ->\r\n            changes ?= []\r\n            changes.push({type,name,oldValue})\r\n            # console.log('change', type, name)\r\n        for name of oldValue if oldValue.hasOwnProperty(name)\r\n            let oldPropertyValue = oldValue[name]\r\n            if not newValue.hasOwnProperty(name)\r\n                change(\"delete\", name, oldPropertyValue)\r\n            else\r\n                let newPropertyValue = newValue[name]\r\n                if newPropertyValue isnt oldPropertyValue\r\n                    change(\"update\", name, oldPropertyValue)\r\n        for name of newValue if newValue.hasOwnProperty(name) and not oldValue.hasOwnProperty(name)\r\n            change(\"add\", name)\r\n        return changes\r\n    observe.checkForChanges = ->\r\n        let maxCycles = 100\r\n        # we have to run multiple cycles in case callbacks cause further change propagation\r\n        for let i = 0; i < maxCycles; i++\r\n            let totalChanges = 0\r\n            let pendingChanges = []\r\n            # traverse all objects and find changes\r\n            for meta in array\r\n                let changes = getChanges(meta.clone, meta.object)\r\n                if changes?\r\n                    totalChanges++\r\n                    meta.clone = clone(meta.object)\r\n                    # callbacks must be deferred until after ALL changes have been found\r\n                    pendingChanges.push([changes, meta.callbacks.slice(0)])\r\n            if totalChanges is 0\r\n                return\r\n            for [changes, callbacks] in pendingChanges\r\n                for callback in callbacks\r\n                    callback(changes)\r\n\r\n        # we have hit max cycles, indicates a circular dependency error\r\n        throw new Error(\"Circular Object.observe dependency\")\r\n\r\n    return [observe,unobserve,array]\r\n\r\nexport const test = ->\r\n    let [observe,unobserve] = createObjectObserveAndUnobserve()\r\n    let object =\r\n        a: 1\r\n        b:\r\n            c: 2\r\n            d: 3\r\n    let changes\r\n    let handler = (c) ->\r\n        changes = c\r\n    observe(object, handler)\r\n    object.a = 2\r\n    delete object.b\r\n    object.c = 5\r\n    observe.checkForChanges()\r\n    assert JSON.stringify(changes) is JSON.stringify([{\"type\":\"update\",\"name\":\"a\",\"oldValue\":1},{\"type\":\"delete\",\"name\":\"b\",\"oldValue\":{\"c\":2,\"d\":3}},{\"type\":\"add\",\"name\":\"c\"}])\r\n    unobserve(object, handler)\r\n\r\nif not Object.observe? and global.Map?\r\n    let [observe,unobserve,array] = createObjectObserveAndUnobserve()\r\n    Object.observe = observe\r\n    Object.unobserve = unobserve\r\n    # temp debug\r\n    global.array = array\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}