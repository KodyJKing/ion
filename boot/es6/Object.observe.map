{"version":3,"sources":["Object.observe.ion"],"names":["clone",{"type":"Identifier","name":"clone","loc":{"start":{"line":2,"column":6,"fixed":true},"end":{"line":2,"column":11,"fixed":true}}},"object","properties","key","value","createShim","map","Map","observers","observe","callback","property","nodeType","global","document","meta","get","all","callbacks","set","push","unobserve","index","lastIndexOf","splice","length","delete","getChanges","oldValue","newValue","changes","change","type","name","checkForChange","hasOwnProperty","oldPropertyValue","newPropertyValue","checkForChanges","maxCycles","i","totalChanges","pendingChanges","slice","Error","test","a","b","c","d","handler","JSON","stringify","Object"],"mappings":"aAAA;AACA,IAAMA,KAAA,GAAQC,UAACC,MAADD,EAASE,UAATF,EACd;AAAA,IAAI,IAAGE,U,QAAH,EACJ;AAAA,Q,YAAe,E,CAAf;AAAA,QACY,SAAIC,GAAJ,IAAWD,UAAX,EACZ;AAAA,Y,MAAiBC,G,IAAMF,MAAA,CAAOE,GAAP,C,CAAvB;AAAA,SAFA;AAAA,QAAQ,O,KAAA,CAAR;AAAA,KADI,MAKJ;AAAA,Q,YAAe,E,CAAf;AAAA,QACY,SAAIA,GAAJ,IAAkBF,MAAlB,EACZ;AAAA,Y,IADqBG,K,GAASH,M,CAAdE,G,EAChB;AAAA,Y,MAAiBA,G,IAAMC,K,CAAvB;AAAA,SAFA;AAAA,QAAQ,O,KAAA,CAAR;AAAA,KALA;AAAA,CADA,CADA;AAWO,IAAMC,UAAA,G,QAAAA,U,GAAaL,YAE1B;AAAA,QAAI,IAAIM,GAAA,GAAM,IAAIC,GAAJ,EAAV,CAAJ;AAAA,QACI,IAAIC,SAAA,GAAY,EAAhB,CADJ;AAAA,QAGI,IAAIC,OAAA,GAAUT,UAACC,MAADD,EAASU,QAATV,EAAmBW,QAAnBX,EAElB;AAAA,YAAQ,IAAGC,MAAA,CAAOW,QAAP,KAAmB,CAAnB,IAAwBX,MAAA,KAAUY,MAAA,CAAOC,QAA5C,EACR;AAAA,gBAAY,IAAG,C,CAAIH,Q,SAAP,EAEZ;AAAA,oBAAgB,OAAhB;AAAA,iBAFA;AAAA,aADA;AAAA,YAKQ,IAAII,IAAA,GAAOT,GAAA,CAAIU,GAAJ,CAAQf,MAAR,CAAX,CALR;AAAA,YAMQ,IAAG,C,CAAIc,I,SAAP,EACR;AAAA,gB,eAAA;AAAA,gB,MAIkDJ,Q,IAAU,C,CAJ5D;AAAA,gBAAYI,IAAA,GAAM;AAAA,oBACFd,MAAA,EAAQA,MADN;AAAA,oBAEFC,UAAA,EAAY,EAFV;AAAA,oBAGFe,GAAA,EAAK,CAHH;AAAA,oBAIFlB,KAAA,EAAOA,KAAA,CAAME,MAAN,EAAcU,QAAA,G,KAAA,GAA4B,IAA1C,CAJL;AAAA,oBAKFO,SAAA,EAAW,EALT;AAAA,iBAAN,CAAZ;AAAA,gBAMYZ,GAAA,CAAIa,GAAJ,CAAQlB,MAAR,EAAgBc,IAAhB,EANZ;AAAA,gBAOYP,SAAA,CAAUY,IAAV,CAAeL,IAAf,EAPZ;AAAA,aAPA;AAAA,YAeQ,IAAGJ,Q,QAAH,EACR;AAAA,gBAAYI,IAAA,CAAKb,UAAL,CAAgBS,QAAhB,IAAAI,IAAA,CAAKb,UAAL,CAAgBS,QAAhB,C,WAAAI,IAAA,CAAKb,UAAL,CAAgBS,QAAhB,C,GAA6B,CAA7B,CAAZ;AAAA,gBACYI,IAAA,CAAKb,UAAL,CAAgBS,QAAhB,IADZ;AAAA,aADQ,MAIR;AAAA,gBAAYI,IAAA,CAAKE,GAAL,GAAZ;AAAA,aAnBA;AAAA,YAoBQF,IAAA,CAAKG,SAAL,CAAeE,IAAf,CAAoBV,QAApB,EApBR;AAAA,SAFI,CAHJ;AAAA,QA0BI,IAAIW,SAAA,GAAYrB,UAACC,MAADD,EAASU,QAATV,EAAmBW,QAAnBX,EAEpB;AAAA,YAAQ,IAAIe,IAAA,GAAOT,GAAA,CAAIU,GAAJ,CAAQf,MAAR,CAAX,CAAR;AAAA,YACQ,IAAGc,I,QAAH,EACR;AAAA,gBAAY,IAAIO,KAAA,GAAQP,IAAA,CAAKG,SAAL,CAAeK,WAAf,CAA2Bb,QAA3B,CAAZ,CAAZ;AAAA,gBACY,IAAGY,KAAA,IAAS,CAAZ,EACZ;AAAA,oBAAgBP,IAAA,CAAKG,SAAL,CAAeM,MAAf,CAAsBF,KAAtB,EAA6B,CAA7B,EAAhB;AAAA,oBACgB,IAAGP,IAAA,CAAKG,SAAL,CAAeO,MAAf,KAAyB,CAA5B,EAEhB;AAAA,wBAAoBnB,GAAA,CAAIoB,MAAJ,CAAWzB,MAAX,EAApB;AAAA,wBACoBO,SAAA,CAAUgB,MAAV,CAAiBhB,SAAA,CAAUe,WAAV,CAAsBR,IAAtB,CAAjB,EAA8C,CAA9C,EADpB;AAAA,qBAHA;AAAA,iBAFA;AAAA,gBAOY,IAAGJ,Q,QAAH,EACZ;AAAA,oBAAgBI,IAAA,CAAKb,UAAL,CAAgBS,QAAhB,IAAhB;AAAA,oBACgB,IAAGI,IAAA,CAAKb,UAAL,CAAgBS,QAAhB,MAA6B,CAAhC,EAChB;AAAA,wBAAoB,OAAOI,IAAA,CAAKb,UAAL,CAAgBS,QAAhB,CAAP,CAApB;AAAA,qBAFA;AAAA,iBADY,MAKZ;AAAA,oBAAgBI,IAAA,CAAKE,GAAL,GAAhB;AAAA,iBAZA;AAAA,aAFA;AAAA,SAFI,CA1BJ;AAAA,QA4CI,IAAIU,UAAA,GAAa3B,UAAC4B,QAAD5B,EAAW6B,QAAX7B,EAAqBE,UAArBF,EACrB;AAAA,YAAQ,IAAI8B,OAAA,GAAU,IAAd,CAAR;AAAA,YACQ,IAAIC,MAAA,GAAS/B,UAACgC,IAADhC,EAAOiC,IAAPjC,EAAa4B,QAAb5B,EACrB;AAAA,gBAAY8B,OAAA,GAAAA,O,WAAAA,O,GAAW,EAAX,CAAZ;AAAA,gBACYA,OAAA,CAAQV,IAAR,CAAa;AAAA,oBAACY,IAAA,EAAAA,IAAD;AAAA,oBAAMC,IAAA,EAAAA,IAAN;AAAA,oBAAWL,QAAA,EAAAA,QAAX;AAAA,iBAAb,EADZ;AAAA,aADQ,CADR;AAAA,YAKQ,IAAIM,cAAA,GAAiBlC,UAACW,QAADX,EAC7B;AAAA,gBAAY,IAAG4B,QAAA,CAASO,cAAT,CAAwBF,IAAxB,CAAH,EACZ;AAAA,oBAAgB,IAAIG,gBAAA,GAAmBR,QAAA,CAASK,IAAT,CAAvB,CAAhB;AAAA,oBACgB,IAAG,CAAIJ,QAAA,CAASM,cAAT,CAAwBF,IAAxB,CAAP,EAChB;AAAA,wBAAoBF,MAAA,C,QAAA,EAAiBE,IAAjB,EAAuBG,gBAAvB,EAApB;AAAA,qBADgB,MAGhB;AAAA,wBAAoB,IAAIC,gBAAA,GAAmBR,QAAA,CAASI,IAAT,CAAvB,CAApB;AAAA,wBACoB,IAAGI,gBAAA,KAAsBD,gBAAzB,EACpB;AAAA,4BAAwBL,MAAA,C,QAAA,EAAiBE,IAAjB,EAAuBG,gBAAvB,EAAxB;AAAA,yBAFA;AAAA,qBAJA;AAAA,iBADY,MAQK,IAAGP,QAAA,CAASM,cAAT,CAAwBF,IAAxB,CAAH,EACjB;AAAA,oBAAgBF,MAAA,C,KAAA,EAAcE,IAAd,EAAhB;AAAA,iBATA;AAAA,aADQ,CALR;AAAA,YAiBQ,IAAG/B,U,QAAH,EACR;AAAA,gBAAY,SAAI+B,IAAJ,IAAY/B,UAAZ,EACZ;AAAA,oBAAgBgC,cAAA,CAAeD,IAAf,EAAhB;AAAA,iBADA;AAAA,aADQ,MAIR;AAAA,gBAAY,SAAIA,IAAJ,IAAYL,QAAZ,EACZ;AAAA,oBAAgBM,cAAA,CAAeD,IAAf,EAAhB;AAAA,iBADA;AAAA,gBAEY,SAAIA,IAAJ,IAAYJ,QAAZ,EACZ;AAAA,oBAAgB,IAAG,CAAID,QAAA,CAASO,cAAT,CAAwBF,IAAxB,CAAP,EAChB;AAAA,wBAAoBC,cAAA,CAAeD,IAAf,EAApB;AAAA,qBADA;AAAA,iBAHA;AAAA,aArBA;AAAA,YA0BQ,OAAOH,OAAP,CA1BR;AAAA,SADI,CA5CJ;AAAA,QAwEIrB,OAAA,CAAQ6B,eAAR,GAA0B,YAC9B;AAAA,YAAQ,IAAIC,SAAA,GAAY,EAAhB,CAAR;AAAA,YAEQ,KAAI,IAAIC,CAAA,GAAI,CAAR,CAAJ,CAAeA,CAAA,GAAID,SAAnB,EAA8BC,CAAA,EAA9B,EACR;AAAA,gBAAY,IAAIC,YAAA,GAAe,CAAnB,CAAZ;AAAA,gBACY,IAAIC,cAAA,GAAiB,EAArB,CADZ;AAAA,gB,sBAGwBlC,S,eACxB;AAAA,oB,IADgBO,I,GAAQP,S,KACxB;AAAA,oBAAgB,IAAIN,UAAA,GAAaa,IAAA,CAAKE,GAAL,GAAW,CAAX,GAAe,IAAf,GAAsBF,IAAA,CAAKb,UAA5C,CAAhB;AAAA,oBACgB,IAAI4B,OAAA,GAAUH,UAAA,CAAWZ,IAAA,CAAKhB,KAAhB,EAAuBgB,IAAA,CAAKd,MAA5B,EAAoCC,UAApC,CAAd,CADhB;AAAA,oBAEgB,IAAG4B,O,QAAH,EAChB;AAAA,wBAAoBW,YAAA,GAApB;AAAA,wBACoB1B,IAAA,CAAKhB,KAAL,GAAaA,KAAA,CAAMgB,IAAA,CAAKd,MAAX,EAAmBC,UAAnB,CAAb,CADpB;AAAA,wBAGoBwC,cAAA,CAAetB,IAAf,CAAoB;AAAA,4BAACU,OAAD;AAAA,4BAAUf,IAAA,CAAKG,SAAL,CAAeyB,KAAf,CAAqB,CAArB,CAAV;AAAA,yBAApB,EAHpB;AAAA,qBAHA;AAAA,iBAJA;AAAA,gBAWY,IAAGF,YAAA,KAAgB,CAAnB,EACZ;AAAA,oBAAgB,OAAhB;AAAA,iBAZA;AAAA,gB,wBAawCC,c,gBAExC;AAAA,oB,YAFwCA,c,MAExC;AAAA,oB,IAFiBZ,O,YAEjB;AAAA,oB,IAF0BZ,S,YAE1B;AAAA,oB,wBAAgCA,S,gBAChC;AAAA,wB,IADoBR,Q,GAAYQ,S,MAChC;AAAA,wBAAoBR,QAAA,CAASoB,OAAT,EAApB;AAAA,qBADA;AAAA,iBAfA;AAAA,aAHA;AAAA,YAsBQ,MAAM,IAAIc,KAAJ,C,oCAAA,CAAN,CAtBR;AAAA,SADI,CAxEJ;AAAA,QAiGInC,OAAA,CAAQD,SAAR,GAAoBA,SAApB,CAjGJ;AAAA,QAkGI,OAAO;AAAA,YAACC,OAAA,EAAAA,OAAD;AAAA,YAASY,SAAA,EAAAA,SAAT;AAAA,SAAP,CAlGJ;AAAA,KAFO,CAXP;AAiHO,IAAMwB,IAAA,G,QAAAA,I,GAAO7C,YACpB;AAAA,QAAI,I,IAAI,GAAsBK,UAAA,EAA1B,CAAJ;AAAA,Q,IAASI,O,QAAAA,O,CAAT;AAAA,Q,IAAiBY,S,QAAAA,S,CAAjB;AAAA,QACI,IAAIpB,MAAA,GAAQ;AAAA,gBACR6C,CAAA,EAAG,CADK;AAAA,gBAERC,CAAA,EAAE;AAAA,oBACEC,CAAA,EAAG,CADL;AAAA,oBAEEC,CAAA,EAAG,CAFL;AAAA,iBAFM;AAAA,aAAZ,CADJ;AAAA,QAMI,IAAInB,OAAJ,CANJ;AAAA,QAOI,IAAIoB,OAAA,GAAUlD,UAACgD,CAADhD,EAClB;AAAA,YAAQ8B,OAAA,GAAUkB,CAAV,CAAR;AAAA,SADI,CAPJ;AAAA,QASIvC,OAAA,CAAQR,MAAR,EAAgBiD,OAAhB,EATJ;AAAA,QAUIjD,MAAA,CAAO6C,CAAP,GAAW,CAAX,CAVJ;AAAA,QAWI,OAAO7C,MAAA,CAAO8C,CAAd,CAXJ;AAAA,QAYI9C,MAAA,CAAO+C,CAAP,GAAW,CAAX,CAZJ;AAAA,QAaIvC,OAAA,CAAQ6B,eAAR,GAbJ;AAAA,Q,KAcW,CAAAa,IAAA,CAAKC,SAAL,CAAetB,OAAf,MAA2BqB,IAAA,CAAKC,SAAL,CAAe;AAAA,gBAAC;AAAA,oB,MAAC,E,QAAD;AAAA,oB,MAAiB,E,GAAjB;AAAA,oB,UAA4B,EAAW,CAAvC;AAAA,iBAAD;AAAA,gBAA2C;AAAA,oB,MAAC,E,QAAD;AAAA,oB,MAAiB,E,GAAjB;AAAA,oB,UAA4B,EAAW;AAAA,wB,GAAC,EAAI,CAAL;AAAA,wB,GAAO,EAAI,CAAX;AAAA,qBAAvC;AAAA,iBAA3C;AAAA,gBAAiG;AAAA,oB,MAAC,E,KAAD;AAAA,oB,MAAc,E,GAAd;AAAA,iBAAjG;AAAA,aAAf,CAA3B,C;0NAdX;AAAA,QAeI/B,SAAA,CAAUpB,MAAV,EAAkBiD,OAAlB,EAfJ;AAAA,KADO,CAjHP;AAmIA,IAAG,C,CAAIG,MAAA,CAAO5C,O,SAAX,IAAwBI,MAAA,CAAON,G,QAAlC,EACA;AAAA,I;oBAAsBF,UAAA,E;QAAlB,SAAIF,GAAJ,I,KAAA,EACJ;AAAA,Y,IADaC,K,SAALD,G,EACR;AAAA,YAAQkD,MAAA,CAAOlD,GAAP,IAAcC,KAAd,CAAR;AAAA,S;KADA;AAAA","sourcesContent":["\r\nconst clone = (object, properties) ->\r\n    if properties?\r\n        return {}\r\n            for key of properties\r\n                [key]: object[key]\r\n    else\r\n        return {}\r\n            for key, value of object\r\n                [key]: value\r\n\r\nexport const createShim = ->\r\n    # multiple callbacks on same object.\r\n    let map = new Map()\r\n    let observers = []\r\n\r\n    let observe = (object, callback, property) ->\r\n        # console.log('+observe', property)\r\n        if object.nodeType is 1 or object is global.document\r\n            if not property?\r\n                # you cannot watch all properties on an element, if so we silently fail.\r\n                return\r\n                # throw new Error(\"You can only observe specific properties on an element\")\r\n        let meta = map.get(object)\r\n        if not meta?\r\n            meta =\r\n                object: object\r\n                properties: {}\r\n                all: 0\r\n                clone: clone(object, property ? {[property]:0} : null)\r\n                callbacks: []\r\n            map.set(object, meta)\r\n            observers.push(meta)\r\n        if property?\r\n            meta.properties[property] ?= 0\r\n            meta.properties[property]++\r\n        else\r\n            meta.all++\r\n        meta.callbacks.push(callback)\r\n    let unobserve = (object, callback, property) ->\r\n        # console.log('-unobserve', object, callback)\r\n        let meta = map.get(object)\r\n        if meta?\r\n            let index = meta.callbacks.lastIndexOf(callback)\r\n            if index >= 0\r\n                meta.callbacks.splice(index, 1)\r\n                if meta.callbacks.length is 0\r\n                    # remove no longer observed objects\r\n                    map.delete(object)\r\n                    observers.splice(observers.lastIndexOf(meta), 1)\r\n            if property?\r\n                meta.properties[property]--\r\n                if meta.properties[property] is 0\r\n                    delete meta.properties[property]\r\n            else\r\n                meta.all--\r\n\r\n    let getChanges = (oldValue, newValue, properties) ->\r\n        let changes = null\r\n        let change = (type, name, oldValue) ->\r\n            changes ?= []\r\n            changes.push({type,name,oldValue})\r\n            # console.log('change', type, name)\r\n        let checkForChange = (property) ->\r\n            if oldValue.hasOwnProperty(name)\r\n                let oldPropertyValue = oldValue[name]\r\n                if not newValue.hasOwnProperty(name)\r\n                    change(\"delete\", name, oldPropertyValue)\r\n                else\r\n                    let newPropertyValue = newValue[name]\r\n                    if newPropertyValue isnt oldPropertyValue\r\n                        change(\"update\", name, oldPropertyValue)\r\n            else if newValue.hasOwnProperty(name)\r\n                change(\"add\", name)\r\n\r\n        if properties?\r\n            for name of properties\r\n                checkForChange(name)\r\n        else\r\n            for name of oldValue\r\n                checkForChange(name)\r\n            for name of newValue\r\n                if not oldValue.hasOwnProperty(name)\r\n                    checkForChange(name)\r\n        return changes\r\n    observe.checkForChanges = ->\r\n        let maxCycles = 10\r\n        # we have to run multiple cycles in case callbacks cause further change propagation\r\n        for let i = 0; i < maxCycles; i++\r\n            let totalChanges = 0\r\n            let pendingChanges = []\r\n            # traverse all objects and find changes\r\n            for meta in observers\r\n                let properties = meta.all > 0 ? null : meta.properties\r\n                let changes = getChanges(meta.clone, meta.object, properties)\r\n                if changes?\r\n                    totalChanges++\r\n                    meta.clone = clone(meta.object, properties)\r\n                    # callbacks must be deferred until after ALL changes have been found\r\n                    pendingChanges.push([changes, meta.callbacks.slice(0)])\r\n            if totalChanges is 0\r\n                return\r\n            for [changes, callbacks] in pendingChanges\r\n                # console.log(i, changes)\r\n                for callback in callbacks\r\n                    callback(changes)\r\n\r\n        # we have hit max cycles, indicates a circular dependency error\r\n        throw new Error(\"Circular Object.observe dependency\")\r\n\r\n    observe.observers = observers\r\n    return {observe,unobserve}\r\n\r\nexport const test = ->\r\n    let {observe,unobserve} = createShim()\r\n    let object =\r\n        a: 1\r\n        b:\r\n            c: 2\r\n            d: 3\r\n    let changes\r\n    let handler = (c) ->\r\n        changes = c\r\n    observe(object, handler)\r\n    object.a = 2\r\n    delete object.b\r\n    object.c = 5\r\n    observe.checkForChanges()\r\n    assert JSON.stringify(changes) is JSON.stringify([{\"type\":\"update\",\"name\":\"a\",\"oldValue\":1},{\"type\":\"delete\",\"name\":\"b\",\"oldValue\":{\"c\":2,\"d\":3}},{\"type\":\"add\",\"name\":\"c\"}])\r\n    unobserve(object, handler)\r\n\r\nif not Object.observe? and global.Map?\r\n    for key, value of createShim()\r\n        Object[key] = value\r\n"]}