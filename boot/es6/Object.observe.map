{"version":3,"sources":["Object.observe.ion"],"names":["clone",{"type":"Identifier","name":"clone","loc":{"start":{"line":2,"column":6,"fixed":true},"end":{"line":2,"column":11,"fixed":true}}},"object","properties","key","value","createShim","map","Map","observe","callback","property","meta","get","all","callbacks","set","push","unobserve","remove","length","delete","getChanges","oldValue","newValue","changes","change","type","name","checkForChange","constructor","Object","hasOwnProperty","oldPropertyValue","newPropertyValue","is","checkForChanges","maxCycles","i","totalChanges","pendingChanges","keys","slice","Error","test","a","b","c","d","handler","JSON","stringify","global","console","warn"],"mappings":"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","sourcesContent":["\r\nconst clone = (object, properties) ->\r\n    if properties?\r\n        return {}\r\n            for key of properties\r\n                [key]: object[key]\r\n    else\r\n        return {}\r\n            for key, value of object\r\n                [key]: value\r\n\r\nexport const createShim = ->\r\n    # multiple callbacks on same object.\r\n    let map = new Map()\r\n\r\n    let observe = (object, callback, property) ->\r\n        # console.log('+observe', property)\r\n        let meta = map.get(object)\r\n        if not meta?\r\n            meta =\r\n                object: object\r\n                properties: {}\r\n                all: 0\r\n                clone: clone(object, property ? {[property]:0} : null)\r\n                callbacks: []\r\n            map.set(object, meta)\r\n        if property?\r\n            meta.properties[property] ?= 0\r\n            meta.properties[property]++\r\n        else\r\n            meta.all++\r\n        meta.callbacks.push(callback)\r\n    let unobserve = (object, callback, property) ->\r\n        # console.log('-unobserve', object, callback)\r\n        let meta = map.get(object)\r\n        if meta?\r\n            meta.callbacks.remove(callback)\r\n            if meta.callbacks.length is 0\r\n                # remove no longer observed objects\r\n                map.delete(object)\r\n            if property?\r\n                meta.properties[property]--\r\n                if meta.properties[property] is 0\r\n                    delete meta.properties[property]\r\n            else\r\n                meta.all--\r\n\r\n    let getChanges = (oldValue, newValue, properties) ->\r\n        let changes = null\r\n        let change = (type, name, oldValue, object) ->\r\n            changes ?= []\r\n            changes.push({type,name,oldValue,object})\r\n            # console.log('change', type, name)\r\n        let checkForChange = (property) ->\r\n            # we only check add/delete on plain old javascript objects\r\n            if newValue.constructor is Object\r\n                if oldValue.hasOwnProperty(name)\r\n                    let oldPropertyValue = oldValue[name]\r\n                    if not newValue.hasOwnProperty(name)\r\n                        if oldPropertyValue isnt undefined\r\n                            change(\"delete\", name, oldPropertyValue, oldValue)\r\n                    else\r\n                        let newPropertyValue = newValue[name]\r\n                        # must use Object.is because NaN != NaN\r\n                        if not Object.is(newPropertyValue, oldPropertyValue)\r\n                            change(\"update\", name, oldPropertyValue, newValue)\r\n                else if newValue.hasOwnProperty(name)\r\n                    change(\"add\", name, undefined, newValue)\r\n            else\r\n                # for everything else, we only check current property values\r\n                let oldPropertyValue = oldValue[name]\r\n                let newPropertyValue = newValue[name]\r\n                # must use Object.is because NaN != NaN\r\n                if not Object.is(newPropertyValue, oldPropertyValue)\r\n                    change(\"update\", name, oldPropertyValue, oldValue)\r\n\r\n        if properties?\r\n            for name of properties\r\n                checkForChange(name)\r\n        else\r\n            for name of oldValue\r\n                checkForChange(name)\r\n            for name of newValue\r\n                if not oldValue.hasOwnProperty(name)\r\n                    checkForChange(name)\r\n        return changes\r\n    observe.checkForChanges = ->\r\n        let maxCycles = 10\r\n        # we have to run multiple cycles in case callbacks cause further change propagation\r\n        for let i = 0; i < maxCycles; i++\r\n            let totalChanges = 0\r\n            let pendingChanges = []\r\n            # traverse all objects and find changes\r\n            for key in map.keys()\r\n                let meta = map.get(key)\r\n                let properties = meta.all > 0 ? null : meta.properties\r\n                let changes = getChanges(meta.clone, meta.object, properties)\r\n                if changes?\r\n                    totalChanges++\r\n                    meta.clone = clone(meta.object, properties)\r\n                    # callbacks must be deferred until after ALL changes have been found\r\n                    pendingChanges.push([changes, meta.callbacks.slice(0), meta])\r\n            if totalChanges is 0\r\n                return\r\n            for [changes, callbacks] in pendingChanges\r\n                # console.log(i, changes)\r\n                for callback in callbacks\r\n                    callback(changes)\r\n\r\n        # we have hit max cycles, indicates a circular dependency error\r\n        throw new Error(\"Circular Object.observe dependency\")\r\n\r\n    return {observe,unobserve}\r\n\r\nexport const test = ->\r\n    let {observe,unobserve} = createShim()\r\n    let object =\r\n        a: 1\r\n        b:\r\n            c: 2\r\n            d: 3\r\n    let changes\r\n    let handler = (c) ->\r\n        changes = c\r\n    observe(object, handler)\r\n    object.a = 2\r\n    delete object.b\r\n    object.c = 5\r\n    observe.checkForChanges()\r\n    assert JSON.stringify(changes) is JSON.stringify([{\"type\":\"update\",\"name\":\"a\",\"oldValue\":1,\"object\":{\"a\":2,\"c\":5}},{\"type\":\"delete\",\"name\":\"b\",\"oldValue\":{\"c\":2,\"d\":3},\"object\":{\"a\":1,\"b\":{\"c\":2,\"d\":3}}},{\"type\":\"add\",\"name\":\"c\",\"object\":{\"a\":2,\"c\":5}}])\r\n    unobserve(object, handler)\r\n\r\nif not Object.observe? and global.Map?\r\n    console.warn('Shimming Object.observe')\r\n    for key, value of createShim()\r\n        Object[key] = value\r\n"]}