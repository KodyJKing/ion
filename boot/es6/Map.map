{"version":3,"sources":["Map.ion"],"names":["ion","uniqueCounter","idName","getId",{"type":"Identifier","name":"getId","loc":{"start":{"line":8,"column":6,"fixed":true},"end":{"line":8,"column":11,"fixed":true}}},"key","String","id","Object","defineProperty","value","enumerable","MapShim","pairs","Error","lookup","keys","methods","get","set","hasOwnProperty","push","has","delete","remove","clear","forEach","callback","thisArg","call","global","Map","prototype","console","warn","test","map","length","mykey1"],"mappings":"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","sourcesContent":["const ion = null\r\n# don't depend on ion for this.\r\n\r\n# the uniqueCounter and getId have to be defined outside of the MapShim constructor.\r\n# otherwise some objects may end up with the same uniqueId if they are added to different Maps.\r\nlet uniqueCounter = 0\r\nconst idName = \"__Map_id\"\r\nconst getId = (key) ->\r\n    if not key?\r\n        return String(key)\r\n    if typeof key is 'string' or typeof key is 'number' or typeof key is 'boolean'\r\n        return \"_\" + key\r\n    let id = key[idName]\r\n    if not id?\r\n        id = ++uniqueCounter\r\n        Object.defineProperty(key, idName, {value:id,enumerable:false})\r\n    return id\r\n\r\nconst MapShim(pairs) ->\r\n    if pairs?\r\n        throw new Error(\"Don't add items in the constructor, IE implementation of Set breaks this\")\r\n    let lookup = {}\r\n    let keys = []\r\n    const methods =\r\n        get: (key) -> lookup[getId(key)]\r\n        set: (key, value) ->\r\n            let id = getId(key)\r\n            if not lookup.hasOwnProperty(id)\r\n                keys.push(key)\r\n            lookup[id] = value\r\n            return value\r\n        has: (key) ->\r\n            let id = getId(key)\r\n            return lookup.hasOwnProperty(id)\r\n        delete: (key) ->\r\n            let id = getId(key)\r\n            keys.remove(key)\r\n            delete lookup[id]\r\n        clear: ->\r\n            lookup = {}\r\n            keys = []\r\n        forEach: (callback, thisArg) ->\r\n            for key in keys\r\n                let value = @get(key)\r\n                callback.call(thisArg, value, key, @)\r\n    for key, value of methods\r\n        Object.defineProperty(@, key, {value})\r\n\r\n# we will even replace Googles crap implementation of Map that doesn't yet have forEach\r\nif not global.Map?.prototype.forEach?\r\n    console.warn('Shimming Map')\r\n    global.Map = MapShim\r\n\r\nexport const test = ->\r\n    const Map = global.Map\r\n    let map = new Map()\r\n    map.set('a', 1)\r\n    map.set('b', 2)\r\n    assert Object.keys(map).length is 0\r\n    assert map.has('a')\r\n    assert not map.has('c')\r\n    assert map.get('a') is 1\r\n    assert map.get('b') is 2\r\n    assert map.get('c') is undefined\r\n    let mykey1 = {}\r\n    map.set(mykey1, \"one\")\r\n    assert Object.keys(mykey1).length is 0\r\n    assert map.get(mykey1) is \"one\"\r\n"]}