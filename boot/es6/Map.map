{"version":3,"sources":["Map.ion"],"names":["uniqueCounter","idName","getId",{"type":"Identifier","name":"getId","loc":{"start":{"line":7,"column":6,"fixed":true},"end":{"line":7,"column":11,"fixed":true}}},"key","String","id","Object","defineProperty","value","MapShim","pairs","lookup","keys","methods","get","set","hasOwnProperty","push","has","delete","remove","clear","slice","forEach","callback","thisArg","call","global","Map","prototype","console","warn","test","map","length","mykey1","JSON","stringify"],"mappings":"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","sourcesContent":["# don't depend on ion for this.\r\n\r\n# the uniqueCounter and getId have to be defined outside of the MapShim constructor.\r\n# otherwise some objects may end up with the same uniqueId if they are added to different Maps.\r\nlet uniqueCounter = 0\r\nconst idName = \"__Map_id\"\r\nconst getId = (key) ->\r\n    if not key?\r\n        return String(key)\r\n    if typeof key is 'string' or typeof key is 'number' or typeof key is 'boolean'\r\n        return \"_\" + key\r\n    let id = key[idName]\r\n    if not id?\r\n        id = ++uniqueCounter\r\n        Object.defineProperty(key, idName, {value:id})\r\n    return id\r\n\r\nconst MapShim(pairs) ->\r\n    let lookup = {}\r\n    let keys = []\r\n    const methods =\r\n        get: (key) -> lookup[getId(key)]\r\n        set: (key, value) ->\r\n            let id = getId(key)\r\n            if not lookup.hasOwnProperty(id)\r\n                keys.push(key)\r\n            lookup[id] = value\r\n            return value\r\n        has: (key) ->\r\n            let id = getId(key)\r\n            return lookup.hasOwnProperty(id)\r\n        delete: (key) ->\r\n            let id = getId(key)\r\n            keys.remove(key)\r\n            delete lookup[id]\r\n        clear: ->\r\n            lookup = {}\r\n            keys = []\r\n        keys: -> keys.slice(0)\r\n        forEach: (callback, thisArg) ->\r\n            for key in keys\r\n                let value = @get(key)\r\n                callback.call(thisArg, value, key, @)\r\n    for key, value of methods\r\n        Object.defineProperty(@, key, {value})\r\n    if pairs?\r\n        for [key, value] in pairs\r\n            @set(key, value)\r\n\r\n# we will even replace Googles crap implementation of Map that doesn't yet have forEach or keys\r\nif not global.Map? or not Map.prototype.forEach?\r\n    console.warn('Shimming Map')\r\n    global.Map = MapShim\r\n# shim keys if not provided for Chrome.\r\nif not (new Map()).keys?\r\n    console.warn('Shimming Map.prototype.keys')\r\n    Map.prototype.keys = ->\r\n        let keys = []\r\n        (@forEach)\r\n            (value, key) ->\r\n                keys.push(key)\r\n        return keys\r\n\r\nexport const test = ->\r\n    const Map = global.Map\r\n    let map = new Map([['a', 1], ['b', 2]])\r\n    assert Object.keys(map).length is 0\r\n    assert map.has('a')\r\n    assert not map.has('c')\r\n    assert map.get('a') is 1\r\n    assert map.get('b') is 2\r\n    assert map.get('c') is undefined\r\n    let mykey1 = {}\r\n    map.set(mykey1, \"one\")\r\n    assert Object.keys(mykey1).length is 0\r\n    assert map.get(mykey1) is \"one\"\r\n    assert JSON.stringify(map.keys()) is JSON.stringify(['a','b',mykey1])\r\n"]}