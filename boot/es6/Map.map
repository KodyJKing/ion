{"version":3,"sources":["Map.ion"],"names":[{"type":"Identifier","name":"MapShim","loc":{"start":{"line":3,"column":6,"fixed":true},"end":{"line":3,"column":13,"fixed":true}}},"MapShim","pairs","lookup","uniqueCounter","idName","getId","key","String","id","Object","defineProperty","value","methods","get","set","has","hasOwnProperty","delete","del","clear","global","Map","test","map","keys","length","mykey1"],"mappings":"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","sourcesContent":["# don't depend on ion for this.\r\n\r\nconst MapShim(pairs) ->\r\n    let lookup = {}\r\n    let uniqueCounter = 0\r\n    const idName = \"__Map_id\"\r\n    const getId = (key) ->\r\n        if not key?\r\n            return String(key)\r\n        if typeof key is 'string' or typeof key is 'number' or typeof key is 'boolean'\r\n            return \"_\" + key\r\n        let id = key[idName]\r\n        if not id?\r\n            id = ++uniqueCounter\r\n            Object.defineProperty(key, idName, {value:id})\r\n        return id\r\n    const methods =\r\n        get: get(key) -> lookup[getId(key)]\r\n        set: set(key, value) -> lookup[getId(key)] = value\r\n        has: has(key) -> lookup.hasOwnProperty(getId(key))\r\n        delete: del(key) -> delete lookup[getId(key)]\r\n        clear: clear ->\r\n            lookup = {}\r\n    for key, value of methods\r\n        Object.defineProperty(@, key, {value})\r\n    if pairs?\r\n        for [key, value] in pairs\r\n            @set(key, value)\r\n\r\nif not global.Map?\r\n    global.Map = MapShim\r\n\r\nexport const test = ->\r\n    const Map = MapShim\r\n    let map = new Map([['a', 1], ['b', 2]])\r\n    assert Object.keys(map).length is 0\r\n    assert map.has('a')\r\n    assert not map.has('c')\r\n    assert map.get('a') is 1\r\n    assert map.get('b') is 2\r\n    assert map.get('c') is undefined\r\n    let mykey1 = {}\r\n    map.set(mykey1, \"one\")\r\n    assert Object.keys(mykey1).length is 0\r\n    assert map.get(mykey1) is \"one\""]}