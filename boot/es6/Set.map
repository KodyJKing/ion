{"version":3,"sources":["Set.ion"],"names":[{"type":"Identifier","name":"SetShim","loc":{"start":{"line":3,"column":6,"fixed":true},"end":{"line":3,"column":13,"fixed":true}}},"SetShim","items","map","Map","methods","has","key","delete","add","set","values","keys","forEach","callback","thisArg","value","call","Object","defineProperty","item","global","Set","prototype","console","warn","test","a","b"],"mappings":"aAAA;yBAAA;OAAA,CAAO,OAAP;AAEMA,SAAAC,OAAAD,CAAQE,KAARF,EACN;AAAA,IAAI,IAAIG,GAAA,GAAM,IAAIC,GAAJ,EAAV,CAAJ;AAAA,IACI,IAAMC,OAAA,GAAS;AAAA,YACXC,GAAA,EAAKN,UAACO,GAADP,E;uBAASG,GAAA,CAAIG,GAAJ,CAAQC,GAAR,C;aADH;AAAA,YAEXC,MAAA,EAAQR,UAACO,GAADP,E;uBAASG,GAAA,CAAIK,MAAJ,CAAWD,GAAX,C;aAFN;AAAA,YAGXE,GAAA,EAAKT,UAACO,GAADP,E;uBAASG,GAAA,CAAIO,GAAJ,CAAQH,GAAR,EAAa,IAAb,C;aAHH;AAAA,YAIXI,MAAA,EAAQX,Y;uBAAGG,GAAA,CAAIS,IAAJ,E;aAJA;AAAA,YAKXC,OAAA,EAASb,UAACc,QAADd,EAAWe,OAAXf,EACjB;AAAA,gBAAaG,GAAA,CAAIU,OAAL,C,SACI,UAACG,KAAD,EAAQT,GAAR,EAChB;AAAA,oBAAoBO,QAAA,CAASG,IAAT,CAAcF,OAAd,EAAuBR,GAAvB,EAA4B,IAA5B,EAApB;AAAA,iB,OAFY,EAAZ;AAAA,aANmB;AAAA,SAAf,CADJ;AAAA,IAUI,SAAIA,GAAJ,IAAkBF,OAAlB,EACJ;AAAA,Q,IADaW,K,GAASX,O,CAAdE,G,EACR;AAAA,QAAQW,MAAA,CAAOC,cAAP,CAAsB,IAAtB,EAAyBZ,GAAzB,EAA8B,EAACS,KAAA,EAAAA,KAAD,EAA9B,EAAR;AAAA,KAXA;AAAA,IAYI,IAAGd,K,QAAH,EACJ;AAAA,Q,sBAAoBA,K,eACpB;AAAA,Y,IADYkB,I,GAAQlB,K,KACpB;AAAA,YAAY,KAACO,GAAD,CAAKW,IAAL,EAAZ;AAAA,SADA;AAAA,KAbA;AAAA,CAHA;AAoBA,IAAG,C,CAAIC,MAAA,CAAOC,G,SAAX,IAAmB,C,CAAIA,GAAA,CAAIC,SAAJ,CAAcV,O,SAAxC,EACA;AAAA,IAAIW,OAAA,CAAQC,IAAR,CAAa,cAAb,EAAJ;AAAA,IACIJ,MAAA,CAAOC,GAAP,GAAarB,OAAb,CADJ;AAAA,CArBA;AAwBO,IAAMyB,IAAA,G,QAAAA,I,GAAO1B,YACpB;AAAA,QAAI,IAAMsB,GAAA,GAAMD,MAAA,CAAOC,GAAnB,CAAJ;AAAA,QACI,IAAIK,CAAA,GAAI,EAAR,CADJ;AAAA,QAEI,IAAIC,CAAA,GAAI5B,Y;SAAR,CAFJ;AAAA,QAGI,IAAIU,GAAA,GAAM,IAAIY,GAAJ,CAAQ;AAAA,gBAACK,CAAD;AAAA,gBAAGC,CAAH;AAAA,aAAR,CAAV,CAHJ;AAAA,Q,KAIWlB,GAAA,CAAIJ,GAAJ,CAAQqB,CAAR,C;8DAJX;AAAA,Q,KAKWjB,GAAA,CAAIJ,GAAJ,CAAQsB,CAAR,C;8DALX;AAAA,QAMIlB,GAAA,CAAIF,MAAJ,CAAWoB,CAAX,EANJ;AAAA,Q,KAOW,CAAIlB,GAAA,CAAIJ,GAAJ,CAAQsB,CAAR,C;kEAPf;AAAA,QAQIlB,GAAA,CAAID,GAAJ,CAAQmB,CAAR,EARJ;AAAA,Q,KASWlB,GAAA,CAAIJ,GAAJ,CAAQsB,CAAR,C;8DATX;AAAA,KADO","sourcesContent":["import './Map'\r\n\r\nconst SetShim(items) ->\r\n    let map = new Map\r\n    const methods =\r\n        has: (key) -> map.has(key)\r\n        delete: (key) -> map.delete(key)\r\n        add: (key) -> map.set(key, true)\r\n        values: -> map.keys()\r\n        forEach: (callback, thisArg) ->\r\n            (map.forEach)\r\n                (value, key) =>\r\n                    callback.call(thisArg, key, @)\r\n    for key, value of methods\r\n        Object.defineProperty(@, key, {value})\r\n    if items?\r\n        for item in items\r\n            @add(item)\r\n\r\n# we will even replace Googles crap implementation of Map that doesn't yet have forEach or keys\r\nif not global.Set? or not Set.prototype.forEach?\r\n    console.warn('Shimming Set')\r\n    global.Set = SetShim\r\n\r\nexport const test = ->\r\n    const Set = global.Set\r\n    let a = {}\r\n    let b = ->\r\n    let set = new Set([a,b])\r\n    assert set.has(a)\r\n    assert set.has(b)\r\n    set.delete(b)\r\n    assert not set.has(b)\r\n    set.add(b)\r\n    assert set.has(b)\r\n"]}