{"version":3,"sources":["index.ion"],"names":["ion","makePrettyError",{"type":"Identifier","name":"makePrettyError","loc":{"start":{"line":4,"column":4,"fixed":true},"end":{"line":4,"column":19,"fixed":true}}},"e","source","id","line","column","split","caret","i","newMessage","message","originalMessage","stack","parse","content","options","generate","compile","compileWithSourceMap","loc","target","preprocessor","parser","postprocessor","escodegen","sourceMapping","result","preprocess","sourceMap","preprocessed","sourceLocationsFixed","fixSourceLocations","postprocess","generateOptions","sourceMapWithCode","global","window","sourceContent","verbatim","output","code","map","toString","fixSourceLocation"],"mappings":"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","sourcesContent":["\r\nconst\r\n    ion = import '../'\r\n    makePrettyError = (e, source, id) ->\r\n        if typeof e.line is 'number' and typeof e.column is 'number' and e.line > 0 and e.column > 0\r\n            let line = source.split('\\n')[e.line - 1]\r\n            let caret = '^'\r\n            for let i = 1; i < e.column; i++\r\n                caret = ' ' + caret\r\n            let newMessage = \"{{id ? '(anonymous)'}}:{{e.line}}:{{e.column}}: {{e.message}}\\n{{line}}\\n{{caret}}\"\r\n            e.originalMessage = e.message\r\n            e.message = newMessage\r\n            e.stack = newMessage # + '\\n' + e.stack\r\n\r\nexport const\r\n    parse = (content, options = {}) ->\r\n        options.generate = false\r\n        return compile(content, options)\r\n\r\n    compile = (content, options = {}) ->\r\n        return compileWithSourceMap(content, options)[0]\r\n\r\n    compileWithSourceMap = (content, options = {}) ->\r\n        options.id ?= \"unknown\"\r\n        options.loc ?= true\r\n        options.target ?= 'es5'\r\n        const\r\n            preprocessor = import './preprocessor'\r\n            parser = import './parser'\r\n            postprocessor = import './postprocessor'\r\n            escodegen = import './escodegen'\r\n        let\r\n            sourceMapping = {}\r\n            result = preprocessor.preprocess(content, sourceMapping)\r\n            sourceMap = null\r\n            preprocessed = result\r\n            sourceLocationsFixed = false\r\n        try\r\n            result = parser.parse(result, options)\r\n            if options.loc\r\n                result.loc.source = content\r\n            result = preprocessor.fixSourceLocations(result, sourceMapping)\r\n            sourceLocationsFixed = true\r\n            if options.postprocess isnt false\r\n                result = postprocessor.postprocess(result, options)\r\n                if options?.generate isnt false\r\n                    let generateOptions =\r\n                        sourceMapWithCode: true\r\n                        if not global.window?\r\n                            sourceMap: options.sourceMap ? options.id\r\n                        sourceContent: content\r\n                        verbatim: 'verbatim'\r\n                    let output = escodegen.generate(result, generateOptions)\r\n                    result = output.code\r\n                    sourceMap = output.map?.toString()\r\n        catch e\r\n            if not sourceLocationsFixed\r\n                preprocessor.fixSourceLocation(e, sourceMapping)\r\n            # console.log('-Preprocessed--------------------------------------------')\r\n            # console.log(preprocessed)\r\n            makePrettyError(e, content, options.id)\r\n            throw e\r\n        return [result,sourceMap]\r\n"]}