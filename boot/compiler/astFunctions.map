{"version":3,"sources":["astFunctions.ion"],"names":["ion","addStatement",{"type":"Identifier","name":"addStatement","loc":{"start":{"line":4,"column":4,"fixed":true},"end":{"line":4,"column":16,"fixed":true}}},"node","statement","index","offset","body","type","Array","isArray","indexOf","Math","max","min","length","splice","forEachDestructuringAssignment","pattern","expression","callback","properties","key","value","object","property","computed","elements"],"mappings":"aAAA;AACO,IACHA,GAAA,G,QAAAA,G,UAAM,CAAO,KAAP,CADH,EAEHC,YAAA,G,QAAAA,Y,GAAeC,UAACC,IAADD,EAAOE,SAAPF,EAAkBG,KAAlBH,EAAyBI,MAAzBJ,EACnB;AAAA,QAAQ,IAAIK,IAAA,GAAOJ,IAAA,CAAKI,IAAhB,CAAR;AAAA,QACQ,IAAGA,IAAA,CAAKC,IAAL,K,gBAAH,EACR;AAAA,YAAYD,IAAA,GAAOA,IAAA,CAAKA,IAAZ,CAAZ;AAAA,SADQ,MAEK,IAAG,CAAIE,KAAA,CAAMC,OAAN,CAAcH,IAAd,CAAP,EACb;AAAA,YAAYJ,IAAA,CAAKI,IAAL,GAAW;AAAA,gBACPC,IAAA,E,gBADO;AAAA,gBAEPD,IAAA,EAAMA,IAAA,GAAO,CAACJ,IAAA,CAAKI,IAAN,CAFN;AAAA,aAAX,CAAZ;AAAA,SAJA;AAAA,QASQ,IAAG,C,CAAIF,K,SAAP,EACR;AAAA,YAAYA,KAAA,GAAQ,CAAR,CAAZ;AAAA,SADQ,MAEK,IAAGA,KAAA,CAAMG,I,QAAT,EACb;AAAA,YAAYH,KAAA,GAAQE,IAAA,CAAKI,OAAL,CAAaN,KAAb,I,CAAuBC,M,WAAAA,M,GAAS,C,CAAxC,CAAZ;AAAA,SAZA;AAAA,QAaQD,KAAA,GAAQO,IAAA,CAAKC,GAAL,CAAS,CAAT,EAAYD,IAAA,CAAKE,GAAL,CAAST,KAAT,EAAgBE,IAAA,CAAKQ,MAArB,CAAZ,CAAR,CAbR;AAAA,QAcQR,IAAA,CAAKS,MAAL,CAAYX,KAAZ,EAAmB,CAAnB,EAAsBD,SAAtB,EAdR;AAAA,KAHO,EAsBHa,8BAAA,G,QAAAA,8B,GAAiCf,UAACgB,OAADhB,EAAUiB,UAAVjB,EAAsBkB,QAAtBlB,EACrC;AAAA,QAAQ,IAAGgB,OAAA,CAAQV,IAAR,KAAgB,YAAnB,EACR;AAAA,YAAYY,QAAA,CAASF,OAAT,EAAkBC,UAAlB,EAAZ;AAAA,SADQ,MAEK,IAAGD,OAAA,CAAQG,U,QAAX,EACb;AAAA,Y;2BAA+BH,OAAA,CAAQG,U;yDACvC;AAAA,oB,qBAAA;AAAA,oB,IADiBC,G,SAAAA,G,CACjB;AAAA,oB,IADqBC,K,SAAAA,K,CACrB;AAAA,oBAAgBN,8BAAA,CACIM,KADJ,EAEI;AAAA,wBACIf,IAAA,EAAM,kBADV;AAAA,wBAEIgB,MAAA,EAAQL,UAFZ;AAAA,wBAGIM,QAAA,EAAUH,GAHd;AAAA,wBAIII,QAAA,EAAUJ,GAAA,CAAId,IAAJ,KAAc,YAJ5B;AAAA,qBAFJ,EAOIY,QAPJ,EAAhB;AAAA,iB;aADA;AAAA,SADa,MAWA,IAAGF,OAAA,CAAQS,Q,QAAX,EACb;AAAA,Y;4BAAgCT,OAAA,CAAQS,Q;6DACxC;AAAA,oB,IADuBtB,K,OACvB;AAAA,oB,IADgBkB,K,cAChB;AAAA,oBAAgBN,8BAAA,CACIM,KADJ,EAEI;AAAA,wBACIf,IAAA,EAAM,kBADV;AAAA,wBAEIgB,MAAA,EAAQL,UAFZ;AAAA,wBAGIM,QAAA,EAAS;AAAA,4BACLjB,IAAA,EAAM,SADD;AAAA,4BAELe,KAAA,EAAOlB,KAFF;AAAA,yBAHb;AAAA,wBAMIqB,QAAA,EAAU,IANd;AAAA,qBAFJ,EASIN,QATJ,EAAhB;AAAA,iB;aADA;AAAA,SAdA;AAAA,KAvBO","sourcesContent":["\r\nexport const\r\n    ion = import '../'\r\n    addStatement = (node, statement, index, offset) ->\r\n        let body = node.body\r\n        if body.type is \"BlockStatement\"\r\n            body = body.body\r\n        else if not Array.isArray(body)\r\n            node.body =\r\n                type: \"BlockStatement\"\r\n                body: body = [node.body]\r\n\r\n        # clamp index from zero to length\r\n        if not index?\r\n            index = 0\r\n        else if index.type?\r\n            index = body.indexOf(index) + (offset ? 1)\r\n        index = Math.max(0, Math.min(index, body.length))\r\n        body.splice(index, 0, statement)\r\n\r\n    # traverses the pattern and finds every destructuring assignment\r\n    # the first callback argument is the identifier to assign to\r\n    # the second callback argument is the expression used to extract the value\r\n    forEachDestructuringAssignment = (pattern, expression, callback) ->\r\n        if pattern.type is 'Identifier'\r\n            callback(pattern, expression)\r\n        else if pattern.properties?\r\n            for {key,value} in pattern.properties\r\n                forEachDestructuringAssignment(\r\n                    value\r\n                    {}\r\n                        type: 'MemberExpression'\r\n                        object: expression\r\n                        property: key\r\n                        computed: key.type isnt 'Identifier'\r\n                    callback\r\n                )\r\n        else if pattern.elements?\r\n            for value, index in pattern.elements\r\n                forEachDestructuringAssignment(\r\n                    value\r\n                    {}\r\n                        type: 'MemberExpression'\r\n                        object: expression\r\n                        property:\r\n                            type: 'Literal'\r\n                            value: index\r\n                        computed: true\r\n                    callback\r\n                )\r\n\r\n"]}