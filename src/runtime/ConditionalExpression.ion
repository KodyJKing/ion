const
    ion = import '../'
    DynamicExpression = import './DynamicExpression'

module.exports = class ConditionalExpression extends DynamicExpression
    # [@test, @consequent, @alternate]
    properties:
        activate: ->
            super
            @testExpression ?= @context.createRuntime(@test)
            @testExpression.watchValue(
                @testWatcher ?= (value) =>
                    if not @hasOwnProperty('testValue') or Boolean(value) isnt Boolean(@testValue)
                        @testValue = value
                        if value
                            @alternateExpression?.unwatchValue(@alternateWatcher)
                            @alternateExpression = null
                            @consequentExpression ?= @context.createRuntime(@consequent)
                            @consequentExpression.watchValue(
                                @consequentWatcher ?= (value) =>
                                    if @testValue
                                        @setValue(value)
                            )
                        else
                            @consequentExpression?.unwatchValue(@consequentWatcher)
                            @consequentExpression = null
                            @alternateExpression ?= @context.createRuntime(@alternate)
                            @alternateExpression.watchValue(
                                @alternateWatcher ?= (value) =>
                                    if not @testValue
                                        @setValue(value)
                            )
            )
        deactivate: ->
            super
            @testExpression.unwatchValue(@testWatcher)
            @consequentExpression?.unwatchValue(@consequentWatcher)
            @alternateExpression?.unwatchValue(@alternateWatcher)
