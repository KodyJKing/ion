const
    ion = import '../'
    {Statement,Factory} = import './'


export class IfStatement extends Statement
    properties:
        activate: ->
            super
            @testExpression ?= @context.createRuntime(@test)
            @unobserve = @testExpression.observe(
                @testExpressionObserver ?= (value) =>
                    if value
                        if @alternateStatement?.isActive
                            @alternateStatement.deactivate()
                            # we don't have to necessarily delete old statements
                            # but behavior is more predictable this way
                            @alternateStatement = null
                        let context = @context.newContext()
                        @consequentStatement = context.createRuntime(@consequent, @order)
                        @consequentStatement.activate()
                    else
                        if @consequentStatement?.isActive
                            @consequentStatement.deactivate()
                            @consequentStatement = null
                        if @alternate?
                            let context = @context.newContext()
                            @alternateStatement = context.createRuntime(@alternate, @order)
                            @alternateStatement.activate()
            )
        deactivate: ->
            super
            @unobserve()
            if @alternateStatement?.isActive
                @alternateStatement?.deactivate()
                @alternateStatement = null
            if @consequentStatement?.isActive
                @consequentStatement?.deactivate()
                @consequentStatement = null
