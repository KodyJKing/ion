const
    ion = import '../'
    Statement = import './Statement'

export class Property extends Statement
    properties:
        activate: ->
            super
            @keyExpression ?= @context.createRuntime(@computed ? @key : @key.name)
            (@keyExpression.watch)
                @keyWatcher ?= (key) =>
                    @restoreProperty()
                    @keyValue = key
                    @setProperty()
            @valueExpression ?= @context.createRuntime(@value)
            (@valueExpression.watch)
                @valueWatcher ?= (value) =>
                    @valueValue = value
                    @setProperty()
        deactivate: ->
            super
            @restoreProperty()
            @keyExpression.unwatch(@keyWatcher)
            @valueExpression.unwatch(@valueWatcher)
        restoreProperty: ->
            if @originalKey?
                ion.set(@context.output, @originalKey, @originalValue)
                @originalKey = undefined
                @originalValue = undefined
        setProperty: (key = @keyValue, value = @valueValue) ->
            if key? and value isnt undefined
                let currentValue = ion.get(@context.output, key)
                if currentValue isnt value
                    @originalKey ?= key
                    @originalValue ?= currentValue
                    ion.set(@context.output, key, value)
