const
    ion = import '../'
    Statement = import './Statement'

export class Property extends Statement
    properties:
        activate: ->
            super
            # create the runtime expressions
            @keyExpression ?= @context.createRuntime(@computed ? @key : (@key.name ? @key.value))
            @valueExpression ?= @context.createRuntime(@value)
            # then watch them, this way, the keywatcher can set the left value on the right hand side
            # before it is activated
            @keyExpression.watch(
                @keyWatcher ?= (key) =>
                    if key? and @valueExpression.setLeftValue?
                        # if there is a context.output then get the current key from that
                        # otherwise the key is probably referring to a variable
                        let currentValue = @context.output ? ion.get(@context.output, key) : @context.get(key)
                        if currentValue?
                            @valueExpression.setLeftValue(currentValue)

                    @restoreProperty()
                    @keyValue = key
                    @setProperty()
            )
            @valueExpression.watch(
                @valueWatcher ?= (value) =>
                    @valueValue = value
                    @setProperty()
            )

            if @bi
                # then we need to observe the context output object for changes to the leftValue property.
                # console.log('bidirectional!!!!!!!!!!!!!', @valueValue, @keyValue, @context.output)
                ion.observe(
                    @context.output
                    @contextObserver ?= =>
                        # console.log('CALLBACK FROM OBSERVER', @valueValue)
                        let value = ion.get(@context.output, @keyValue)
                        if value isnt undefined
                            @valueExpression.setMemberValue(value)
                    @keyValue
                )

        deactivate: ->
            super
            @restoreProperty()
            ion.unobserve(@context.output, @contextObserver, @leftValue)
            @keyExpression.unwatch(@keyWatcher)
            @valueExpression.unwatch(@valueWatcher)
        restoreProperty: ->
            # if @originalKey?
            #     ion.set(@context.output, @originalKey, @originalValue)
            #     @originalKey = undefined
            #     @originalValue = undefined
        setProperty: (key = @keyValue, value = @valueValue) ->
            # we must have a key, and the value must not be undefined UNLESS the value is explicitly undefined!
            let explicitUndefined = @value.operator is 'void'
            if key? and (value isnt undefined or explicitUndefined)
                let currentValue = ion.get(@context.output, key)
                if explicitUndefined or currentValue isnt value
                    @originalKey ?= key
                    @originalValue ?= currentValue
                    ion.set(@context.output, key, value, not explicitUndefined)
