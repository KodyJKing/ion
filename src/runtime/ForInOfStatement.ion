const
    ion = import '../'
    Statement = import './Statement'
    DynamicExpression = import './DynamicExpression'

export class ForInOfStatement extends Statement
    properties:
        toKey: (name) ->
            if @type is 'ForOfStatement'
                return parseInt(name)
            else
                return name
        forEach: (collection, callback) ->
            # console.log('forEach', collection)
            if @type is 'ForOfStatement'
                for let key = 0; key < collection.length; key++
                    let value = collection[key]
                    callback(key, value)
            else
                for key, value of collection
                    callback(key, value)
        activate: ->
            super

            if not @statements?
                @statements = {}            
                @valueName = @left.declarations[@type is 'ForOfStatement' ? 0 : 1]?.id.name
                @keyName = @left.declarations[@type is 'ForOfStatement' ? 1 : 0]?.id.name

            # we must create new contexts for every item in the list thingy.
            # console.log('ForEachStatement.activate', @)
            @collectionExpression ?= @context.createRuntime(@right)
            (@collectionExpression.watch)
                @collectionWatcher ?= (collection) =>
                    # console.log('collectionWatcher', collection)
                    if @collection isnt collection
                        if @collection?
                            @forEach(@collection, @removeItem.bind(@))
                            ion.unobserve(@collection, @collectionObserver)
                        @collection = collection
                        if @collection?
                            @forEach(@collection, @addItem.bind(@))
                            ion.observe(@collection, @collectionObserver ?= @applyChanges.bind(@))
        deactivate: ->
            super
            @collectionExpression.unwatch(@collectionWatcher)
        addItem: (key, value, cache) ->
            # console.log('add ' + key + ' ' + value)
            if value isnt undefined
                # see if there is a cached statement with that value
                let statement = cache?.get(value)
                if statement?
                    # if so, just update the new key
                    #debugger
                    statement.context._keyExpression?.setValue(key)
                    # and remove it from the cache
                    cache.delete(value)
                else
                    let newContext = @context.newContext()
                    if @valueName?
                        newContext.setVariable(@valueName, value)
                    if @keyName?
                        # the key *could* by dynamic if this is an array
                        # this way we only need to change the key if an items index in an array changes.
                        let keyExpression = newContext._keyExpression = new DynamicExpression({value:key})
                        newContext.setVariable(@keyName, keyExpression)
                    statement = newContext.createRuntime(@body)
                    statement.activate()
                @statements[key] = statement
        removeItem: (key, value, cache) ->
            let statement = @statements[key]
            # console.log('remove ' + key + ' ' + value + ' ', statement)
            if statement?
                if cache?
                    cache.set(value, statement)
                else
                    statement.deactivate()
            delete @statements[key]
        applyChanges: (changes) ->
            let ignoreProperty = (name) =>
                if not name?
                    return true
                if name[0] is '_'
                    return true
                if name is 'length' and @type is 'ForOfStatement'
                    return true
                return false
            # this will be an N performance algorithm for ARRAY insertions/deletions.
            # we can improve this later by looking for "slice" events and seeing if index is not relevant.
            # console.log('changes', changes)
            let cache = new Map

            for {name,oldValue} in changes
                let ignore = ignoreProperty(name)
                if not ignore
                    let key = @toKey(name)
                    if oldValue isnt undefined
                        @removeItem(key, oldValue, cache)

            for {name,oldValue} in changes
                let ignore = ignoreProperty(name)
                if not ignore
                    let newValue = @collection[name]
                    let key = @toKey(name)
                    if newValue isnt undefined
                        @addItem(key, newValue, cache)

            # now anything left in the cache are statements to be deactivated.
            for key in cache.keys()
                let statement = cache.get(key)
                # console.log('-----------------------', key, statement)
                statement.deactivate()

