const
    ion = import '../'
    DynamicExpression = import './DynamicExpression'

export class ObjectExpression extends DynamicExpression
    properties:
        # this is called by a PropertyExpression to let us know the current left hand value.
        setLeftValue: (value) ->
            @value = value
        activate: ->
            super
            @typeExpression ?= @context.createRuntime(@objectType ? null)
            @typeExpression.watch(
                @typeWatcher ?= (type) =>
                    let value
                    if not ion.is(@value, type)
                        @statements?.deactivate()
                        @statements = null
                        value = type ? {}
                    else
                        # a default value could have been passed in
                        value = @value

                    if value? and not @statements?
                        let newContext = @context.newContext(value)
                        @statements = newContext.createRuntime({type:'BlockStatement', body:@properties})
                        @statements.activate()

                    @setValue(value)
            )
        deactivate: ->
            super
            @typeExpression.unwatch(@typeWatcher)
