const ion = import '../'

const templates = []
    []
        template ->
            const
                a = 1
                b = 2
                c = a + b
            return c
        []
        3
    []
        template -> {a:1,b:2}
        []
        {a:1,b:2}
    []
        template ->
            return []
                1
                2
        []
        [1,2]
    []
        template ->
            let a = 1
            let b = 2
            return []
                a
                b
                if a > b
                    10
                else if b > a
                    20
        []
        [1,2,20]
    []
        template ->
            let items = [1,2,3]
            let x = [item + index for item, index in items]
            return x
        []
        [1,3,5]
    []
        template ->
            let items = {a:1,b:2,c:3}
            let x = [key + value for key, value of items]
            return x
        []
        ['a1', 'b2', 'c3']
    []
        template ->
            let object = {a:{b:1}}
            return object.a.b
        []
        1
    []
        template -> false ? 1 : 2
        []
        2
    []
        template -> null ? 2
        []
        2
    []
        template ->
            let a = null
            let b = 2
            return [a?, b?]
        []
        [false,true]
    []
        template -> Math.min(1, 2)
        []
        1
    []
        template -> Math.min.call(null, 1, 2)
        []
        1
    []
        template -> new Date(2011, 10, 5)
        []
        new Date(2011, 10, 5)
    []
        template -> /foo/
        []
        /foo/
    []
        template ->
            return
                x: 1
                y: 2
                z: []
                    let items = [3,2,1]
                    for item in items
                        item * 2
        []
        {x:1, y:2, z:[6,4,2]}
    []
        template -> [null ? 1, undefined ? 2]
        []
        [1, 2]
    []
        template ({a,b}) -> a + b
        [{a:1,b:2}]
        3
    []
        template (type) ->
            return type
                position:
                    x: 10
        []
            ->
                @position = {x:1,y:2}
        {position:{x:10,y:2}}
    []
        template (input, output) ->
            output:
                e: input.a + input.b
            return output
        []
            {a:1,b:2}
            {c:3,d:4}
        {c:3,d:4,e:3}

export const
    test = ->
        for [templateType, args, expected] in templates if expected?
            let template = ion.create(templateType, args)
            template.activate()
            let reactiveResult = null
            (template.watch)
                (value) -> reactiveResult = value
            # console.log('reactiveResult: ', reactiveResult)
            try
                assert JSON.stringify(reactiveResult) is JSON.stringify(expected)
            catch e
                console.log(JSON.stringify(reactiveResult), JSON.stringify(expected))
                throw e
            
            template.deactivate()
            assert reactiveResult is undefined
            # also, call the template function imperatively and see that it's still the expected value
            let imperativeResult = templateType.apply(null, args)
            # console.log('imperativeResult: ', imperativeResult)
            assert JSON.stringify(imperativeResult) is JSON.stringify(expected)

