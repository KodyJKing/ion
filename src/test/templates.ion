
const templates = []
    []
        template ->
            const
                a = 1
                b = 2
                c = a + b
            return c
        3
    []
        template -> {a:1,b:2}
        {a:1,b:2}
    []
        template ->
            return []
                1
                2
        [1,2]
    []
        template ->
            let a = 1
            let b = 2
            return []
                a
                b
                if a > b
                    10
                else if b > a
                    20
        [1,2,20]
    []
        template ->
            let items = [1,2,3]
            let x = [item + index for item, index in items]
            return x
        [1,3,5]
    []
        template ->
            let items = {a:1,b:2,c:3}
            let x = [key + value for key, value of items]
            return x
        ['a1', 'b2', 'c3']

export const
    test = ->
        for [templateType,expected] in templates if expected?
            let template = new templateType()
            template.activate()
            let reactiveResult = null
            (template.watch)
                (value) -> reactiveResult = value
            console.log('reactiveResult: ', reactiveResult)
            assert JSON.stringify(reactiveResult) is JSON.stringify(expected)
            template.deactivate()
            assert reactiveResult is undefined
            # also, call the template function imperatively and see that it's still the expected value
            let imperativeResult = templateType()
            console.log('imperativeResult: ', imperativeResult)
            assert JSON.stringify(imperativeResult) is JSON.stringify(expected)

