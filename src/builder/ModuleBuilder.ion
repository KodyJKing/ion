
Load dependencies.

    File = require './File'
    Directory = require './Directory'
    builder = require './'
    name = $name ? ''
    input = new Directory $input
    output = new Directory $output

Compile coffeescript and add browser module boilerplate

    for input.search ".coffee"
        source = .
        target = output.getFile builder.changeExtension key, ".js"
        moduleId = builder.getModuleId name, key
        [target.path]: builder.compileCoffeeScript source, moduleId

Compile any pegjs grammars

    for input.search ".pegjs"
        source = .
        target = output.getFile builder.changeExtension key, ".js"
        moduleId = builder.getModuleId name, key
        [target.path]: builder.compilePegjs source, moduleId

Copy any plain javascript and add browser module boilerplate

    for input.search ".js"
        source = .
        target = output.getFile key
        moduleId = builder.getModuleId name, key
        [target.path]: builder.shimJavascript source, moduleId

Compile any ion templates

    templateModuleId = $templateModuleId ? "ion/runtime/Template"
    for input.search ".ion"
        source = .
        target = output.getFile builder.changeExtension key, ".js"
        moduleId = builder.getModuleId name, key
        [target.path]: builder.compileTemplate source, moduleId, templateModuleId

Write a manifest.json file listing all of our modules with require.js at the top

    outputFiles = output.search(".js")
    filter = (name) -> name.endsWith 'require.js'
    top = Object.keys(outputFiles).filter filter
    sortedFiles = top.concat((outputFiles.*{ !builder.isPrivate(key) && top.indexOf(key) < 0 }.(key)))
    manifest =
        modified: (outputFiles.*.modified).max()
        files: sortedFiles.map(builder.normalizePath)
    manifestFile = output.getFile "manifest.json"
    if sortedFiles.length > 0
        [manifestFile]: JSON.stringify manifest, null, '    '

Build a merged uglified single file

    if $browser
        allName = $browser.name ? "_browser.js"
        uglyOptions =
            mangle: $browser.compress ? false
            compress: $browser.compress ? false
            outSourceMap: allName + ".map"
            forceRebuild: manifestFile.modified
        all = output.getFile allName
        map = output.getFile uglyOptions.outSourceMap
        files = JSON.parse(manifestFile.read()).files
        result = builder.minify output.path, files, uglyOptions
        [all.path]: "if (this.window == null) return;" + result.code + "//# sourceMappingURL=" + uglyOptions.outSourceMap
        if result.map
            [map.path]: result.map.replace new RegExp('"' + output.path + "\\\\\\\\", "g"), '"'

Run tests on all of our output modules

    if $test
        builder.runTests.debounce(100).throttle(3000) manifestFile, manifestFile.modified

