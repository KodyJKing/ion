
const
    ion = import '../'
    File = import './File'
    Directory = import './Directory'
    builder = import './'
    compilers = []
        {}
            extension: '.coffee'
            compile: builder.compileCoffeeScript
        {}
            extension: '.pegjs'
            compile: builder.compilePegjs
        {}
            extension: '.js'
            compile: builder.shimJavascript
        {}
            extension: '.ion'
            compile: builder.compileIon

export template (options) ->
    let packageJson = JSON.parse(new File('package.json').read())
    let input = new Directory(packageJson.directories.src)
    let output = new Directory(packageJson.directories.lib)
    let moduleName = packageJson.name ? ''
    output:
        # build all source files
        for {extension,compile} in compilers
            for path, source of input.search(extension)
                let targetPath = builder.changeExtension(path, '.js')
                let moduleId = builder.getModuleId(moduleName, path)
                [targetPath]: compile(source, moduleId, packageJson)

        # build a manifest file with require.js at the top
        let outputFiles = output.search(".js", /^_/) # ignore output _browser.js
        let top = [key for key of outputFiles if key.endsWith('require.js')]
        let sortedFiles = top.concat([key for key of outputFiles if not builder.isPrivate(key) and top.indexOf(key) < 0])
        let manifestFileName = "manifest.json"
        let manifest =
            modified: Math.max.apply(null, [file.modified for path, file of outputFiles])
            files: [builder.normalizePath(path) for path in sortedFiles]
        [manifestFileName]: JSON.stringify(manifest, null, '  ')

        # build merged file, just so we can test locally with file:// protocol
        if options?.merge?
            [options.merge]: [outputFiles[name].read() for name in sortedFiles].join('\n')

        # builder.test
        let manifestFile = output.getFile(manifestFileName)
        builder.runTests(manifestFile, manifestFile.modified)
