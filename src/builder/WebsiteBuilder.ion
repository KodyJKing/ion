const
    ion = import '../'
    File = import './File'
    Directory = import './Directory'
    builder = import './'
    utility = import './utility'
    ModuleBuilder = import './ModuleBuilder'
    clientJsDir = 'js'
    serverJsDir = 'WEB-INF/js'
    serverJavaDir = 'WEB-INF/java'
    np = import 'path'


export template (packagePatch) ->
    const
        packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})
        input = new Directory(packageJson.directories.src ? 'src')
        output = new Directory(packageJson.directories.www ? 'debug')
        clientOutput = output.getDirectory(clientJsDir)
        serverOutput = output.getDirectory(serverJsDir)
        nodepaths = ['node_modules'].concat(process.env.NODE_PATH.split(np.delimiter))

    # Copy local development versions of glass-pages to input directory if available
    # They will be copied from src to the build directory by ant
    let glassPages = new Directory('../glass-pages/dist')
    if glassPages.exists
        let javaDirectory = input.getDirectory(serverJavaDir)
        for key, source of glassPages.search()
            let target = javaDirectory.getFile(key)
            if target.modified < source.modified
                target.copyFrom(source)

    # Copy client and server node modules to the output
    for moduleName in packageJson.build.client.modules
        for nodepath in nodepaths
            let directory = new Directory(np.join(nodepath, moduleName))
            for key, source of directory.search([".js",".map"], ["node_modules"].concat(packageJson.build.client.exclude))
                clientOutput:
                    [source.path.substring(nodepath.length)]: source.read()
    for moduleName in packageJson.build.server.modules
        for nodepath in nodepaths
            let directory = new Directory(np.join(nodepath, moduleName))
            for key, source of directory.search([".js",".map"], ["node_modules"].concat(packageJson.build.server.exclude))
                serverOutput:
                    [source.path.substring(nodepath.length)]: source.read()

    # build client javascript
    (ModuleBuilder)
        directories:
            src:input + '/js' # client side javascript
            lib:output + '/' + clientJsDir
        build:
            exclude: packageJson.build.client.exclude
            test: false

    # build server javascript
    (ModuleBuilder)
        directories:
            src:input + '/js' # server side javascript
            lib:output + '/' + serverJsDir
        build:
            exclude: packageJson.build.server.exclude
            test: true

    # Copy all other files from src to output
    for key, source of input.search(null, [".ionpage",".coffeepage",".coffee",".java",".class",".jar", ".ion"])
        let target = output.getFile(key)
        output:
            [key]: source.read()

    # Compile plain ion files, while excluding the js directory
    for key, source of input.search(".ion", "js")
        let targetPath = builder.changeExtension(key, ".js")
        output:
            [targetPath]: builder.compileIon(source)

    # Compile ion pages
    let pageOutput = output.getDirectory('WEB-INF/pages')
    for key, source of input.search(".ionpage")
        let targetPath = builder.changeExtension(key, ".js")
        pageOutput:
            [targetPath]: "(function {{key.replace(/[\.\/\\]/g, '_')}}(){ {{builder.compileIon(source)}} })"

    # Compile coffee pages
    # TODO: port all .coffeepages to .ionpages and delete this.
    for key, source of input.search(".coffeepage")
        let targetPath = builder.changeExtension(key, ".js")
        pageOutput:
            [targetPath]: "(function {{key.replace(/[\.\/\\]/g, '_')}}(){ {{builder.compileCoffeeScript(source)}} })"
