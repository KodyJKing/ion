const
    ion = import 'ion'
    File = import './File'
    Directory = import './Directory'
    builder = import './'
    utility = import './utility'
    ModuleBuilder = import './ModuleBuilder'
    clientJsDir = 'js'
    serverJsDir = 'WEB-INF/js'
    serverJavaDir = 'WEB-INF/java'

export template (packagePatch) ->
    const
        packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})
        input = new Directory(packageJson.directories.src ? 'src')
        output = new Directory(packageJson.directories.www ? 'debug')
        clientOutput = output.getDirectory(clientJsDir)
        serverOutput = output.getDirectory(serverJsDir)
        nodepath = 'node_modules/'

    # Copy local development versions of glass-pages to input directory if available
    # They will be copied from src to the build directory by ant
    let glassPages = new Directory('../glass-pages/dist')
    if glassPages.exists
        let javaDirectory = input.getDirectory(serverJavaDir)
        for key, source of glassPages.search()
            let target = javaDirectory.getFile(key)
            if target.modified < source.modified
                target.copyFrom(source)

    # Copy client and server node modules to the output
    for moduleName in packageJson.build.client.modules
        let directory = new Directory(nodepath + moduleName)
        for key, source of directory.search(".js", ["node_modules"].concat(packageJson.build.client.exclude))
            clientOutput:
                [source.path.substring(nodepath.length)]: source.read()
    for moduleName in packageJson.build.server.modules
        let directory = new Directory(nodepath + moduleName)
        for key, source of directory.search(".js", ["node_modules"])
            serverOutput:
                [source.path.substring(nodepath.length)]: source.read()

    # build client javascript
    (ModuleBuilder)
        directories:
            src:input + '/' + clientJsDir
            lib:output + '/' + clientJsDir
        build:
            test: false
    # build server javascript
    (ModuleBuilder)
        directories:
            src:input + '/' + serverJsDir
            lib:output + '/' + serverJsDir
        build:
            test: false

# Copy all other files from src to output

# for key, source of input.search(null, [".coffeepage",".coffee",".java",".class",".jar", ".ion"])
#     let target = output.getFile(key)
#     output:
#         [target.path]: source.read()

# Compile coffeescript pages

#     pageOutput = output.getDirectory 'WEB-INF/pages'
#     for key, source of input.search ".coffeepage"
#         target = pageOutput.getFile builder.changeExtension key, ".js"
#         [target.path]: "(function(){" + builder.compileCoffeeScript(source) + "})"
