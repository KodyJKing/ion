const
    ion = import './'
    isObject = (a) -> a? and typeof a is 'object'
    deleteValue = null
    # current options
    #   deleteNull: delete properties if value is null, default: true
    #   factory: function to use when constructing new objects, defaults to using plain objects {}
    applyPatch = (target, values, options) ->
        let deleteNull = options?.deleteNull ? true
        if values?.constructor isnt Object
            return values
        if not isObject(target)
            if options?.factory?
                target = options.factory(values)
            else
                target = {}
        for key, value of values
            if deleteNull and value is deleteValue
                delete target[key]
            else
                target[key] = applyPatch(target[key], value, options)
        return target
    # combines two patches to make a single patch
    combine = (patch1, patch2) -> applyPatch(patch1, patch2, {deleteNull:false})
    # watches object for changes and calls the handler with patches
    watch = (object, handler, callInitial = true) ->
        if not isObject(object)
            throw new Error("Cannot watch: #{object}")
        # recurse watching and unwatching
        let subWatchers = {}
        # pending patch allows several changes at simultaneous levels of the
        # heirarchy to be combined into a single patch call
        let pendingPatch = null
        let processPatch = (patchValues) ->
            # watch sub objects
            for name of patchValues
                # unwatch any current value being watched
                subWatchers[name]?()
                # now watch sub values if we can
                let value = object[name]
                if isObject(value)
                    do (name) ->
                        let subHandler = (patch) ->
                            let basePatch = {}
                            basePatch[name] = patch
                            queuePatch(basePatch)
                        subWatchers[name] = watch(value, subHandler, false)
        let pendingTimeout = null
        let queuePatch = (patch) ->
            if not callInitial
                handler(patch)
            else
                pendingPatch = combine(pendingPatch, patch)
                processPatch(pendingPatch)
                pendingTimeout ?= (setTimeout)
                    ->
                        handler(pendingPatch)
                        pendingPatch = null
                        pendingTimeout = null
                    0
        let watcher = (changes) ->
            try
                let patch = {}
                for change in changes
                    # we convert undefined values from delete into explicit nulls
                    patch[change.name] = object[change.name] ? deleteValue
                queuePatch(patch)
            catch e
                # catch and log errors, because object observe callbacks suppress errors
                console.error(e)
        # call process patch on the object to watch children
        processPatch(object)
        ion.observe(object, watcher)
        # return an function that lets us unwatch
        return ->
            ion.unobserve(object, watcher)
            # unwatch subWatchers
            for key, value of subWatchers
                value()
    diff = (oldValue, newValue) ->
        # returns a patch which can convert from the oldValue to the newValue
        # returns undefined if there is no difference between them
        # the patch SHOULD be treated as readonly, since it may reference pre-existing objects
        if oldValue is newValue
            return undefined
        if not(oldValue? and newValue? and typeof newValue is 'object' and typeof oldValue is 'object')
            return (newValue ? null)
        let patch = undefined
        for name of oldValue if oldValue.hasOwnProperty(name)
            let propertyDiff = diff(oldValue[name], newValue[name])
            if propertyDiff isnt undefined
                patch ?= {}
                patch[name] = propertyDiff
        for name of newValue if newValue.hasOwnProperty(name) and not oldValue.hasOwnProperty(name)
            patch ?= {}
            patch[name] = newValue[name]
        return patch
    isChange = (oldValue, newValue) ->
        # returns true if a newValue will change the old value
        # returns false if a newValue will not change the old value
        if oldValue is newValue
            return false
        if not (oldValue? and newValue? and typeof newValue is 'object' and typeof oldValue is 'object')
            return true
        for name of newValue
            if newValue[name] is null and not oldValue.hasOwnProperty(name)
                continue
            if isChange(oldValue[name], newValue[name])
                return true
        return false

# we export the applyPatch method, but add the specialized internal methods to it
export applyPatch
    combine: combine
    watch: watch
    diff: diff
    isChange: isChange
    test: do ->
        const equal = (a, b) -> not isChange(a, b) and not isChange(b, a)
        return
            applyPatch: ->
                assert equal({a:{b:2,c:3},d:4}, applyPatch({a:{b:2}}, {a:{c:3},d:4}))
                assert equal({b:2}, applyPatch(null, {b:2}))
                assert equal({a:1,b:2}, applyPatch({a:1,b:2,c:3}, {c:undefined}))
                let double = (x) -> x * 2
                assert equal({a:double}, applyPatch({},{a:double}))
            isChange: ->
                assert isChange({a:1}, null)
                assert not isChange(null, null)
                assert isChange(undefined, null)
                assert isChange(null, undefined)
                assert not isChange({a:1}, {a:1})
                assert not isChange({a:{b:2,c:3}}, {a:{b:2}})
                assert isChange({a:{b:2}}, {a:{b:3}})
                assert not isChange({a:1}, {b:null})
            diff: ->
                assert equal({b:2}, diff({a:1}, {a:1,b:2}))
                assert equal({a:{b:3,c:null}}, diff({a:{b:2,c:4}}, {a:{b:3}}))
                assert equal({a:1}, diff(null, {a:1}))
                assert equal({c:{d:{f:4}}}, diff({a:1,b:2,c:{d:{e:1,f:2}}}, {a:1,b:2,c:{d:{e:1,f:4}}}))
                assert equal(null, diff({a:1}, undefined))
                assert equal(null, diff({a:1}, null))
                assert equal(undefined, diff({a:{b:2}}, {a:{b:2}}))
            observe: (done) ->
                if not Object.observe?
                    return done(null, "Object.observe missing.")
                let source =
                    name: 'Kris'
                    age: 41
                    children: 
                        Sadera:
                            grandchildren:
                                One: 1
                                Two: 2
                        Orion: {}
                        Third: {}
                let target = ion.clone(source, true)
                let unwatch = (watch)
                    source
                    (patch) ->
                        target = applyPatch(target, patch)
                        # should be immediate assert
                        if equal(source, target)
                            done()
                            unwatch()
                source:
                    name: 'Fred'
                    children:
                        Orion:
                            a: 1
                            b: 2
                            c: 12
                        Sadera:
                            grandchildren:
                                three: 3
                # todo: delete a property in a literal?
                delete source.children.Third
                # temp requirement
                Object.observe.checkForChanges?()
