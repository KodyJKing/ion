// Generated by CoffeeScript 1.6.3
(function() {
  var core, expectedResult, getSpace, preprocess, sample, sample2;

  core = require('./core');

  getSpace = function(size) {
    var i, result, _i;
    result = [];
    for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
      result.push(" ");
    }
    return result.join("");
  };

  exports.isMarkdownCommented = function(source) {
    return /(\n|^)[^\s\n][^\n]*\n(\s*\n)+\s+[^\s\n]/.test(source);
  };

  exports.preprocess = preprocess = function(source, lineMapping) {
    var baseIndent, comment, indent, indentStack, index, inputLine, isEmpty, isMarkdownCommented, line, lines, outdent, output, totalIndent, writeLine, _i, _len;
    isMarkdownCommented = exports.isMarkdownCommented(source);
    baseIndent = isMarkdownCommented ? 1 : 0;
    totalIndent = 0;
    indentStack = [];
    lines = core.splitLines(source);
    inputLine = 0;
    writeLine = function(line) {
      output.push(line);
      return lineMapping != null ? lineMapping.push(inputLine) : void 0;
    };
    outdent = function() {
      var _ref;
      indentStack.pop();
      totalIndent = (_ref = indentStack[indentStack.length - 1]) != null ? _ref : 0;
      if (totalIndent >= baseIndent) {
        return writeLine(getSpace(totalIndent) + core.outdentToken);
      }
    };
    output = [];
    for (index = _i = 0, _len = lines.length; _i < _len; index = ++_i) {
      line = lines[index];
      inputLine = index;
      indent = core.getIndent(line);
      isEmpty = line.trim().length === 0;
      if (!isEmpty) {
        if (indent > totalIndent) {
          if (totalIndent >= baseIndent) {
            writeLine(getSpace(totalIndent) + core.indentToken);
          }
          totalIndent = indent;
          indentStack.push(indent);
        } else {
          while (indent < totalIndent) {
            outdent();
          }
        }
      }
      comment = isMarkdownCommented && indent === 0 && !isEmpty;
      if (!comment) {
        writeLine(line);
      }
    }
    while (indentStack.length > 0) {
      outdent();
    }
    return core.unindent(core.joinLines(output));
  };

  sample = "\nThis is a comment.\nAnything left justified is a comment.\n\n    Person\n        name: \"Alpha\"\n        age: 40\n        children:\n            Person\n                name: \"Beta\"\n                age: 1\n            Person\n\n                name: \"Charlie\"\n\n                age: 2\n                description: \"\"\n                        This is just a\n                    sample indented multiline\n                    string literal.";

  sample2 = "Person\n    name: \"Alpha\"\n    age: 40\n    children:\n        Person\n            name: \"Beta\"\n            age: 1\n        Person\n\n            name: \"Charlie\"\n\n            age: 2\n            description: \"\"\n                    This is just a\n                sample indented multiline\n                string literal.";

  expectedResult = "Person\n{{{{\n    name: \"Alpha\"\n    age: 40\n    children:\n    {{{{\n        Person\n        {{{{\n            name: \"Beta\"\n            age: 1\n        }}}}\n        Person\n\n        {{{{\n            name: \"Charlie\"\n\n            age: 2\n            description: \"\"\n            {{{{\n                    This is just a\n            }}}}\n                sample indented multiline\n            {{{{\n                string literal.\n            }}}}\n        }}}}\n    }}}}\n}}}}";

  exports.test = function() {
    var lineMapping, result;
    lineMapping = [];
    result = preprocess(sample, lineMapping);
    if (result !== expectedResult) {
      console.log('result---------------------------------');
      console.log(result);
      console.log('expected-------------------------------');
      console.log(expectedResult);
      throw new Error("Preprocessor result not expected result.");
    }
    if (JSON.stringify(lineMapping) !== "[0,3,4,5,5,6,7,8,8,9,9,10,11,11,12,13,13,14,15,16,17,17,18,18,19,19,19,19,19,19]") {
      throw new Error("Unexpected line mapping: " + JSON.stringify(lineMapping));
    }
    result = preprocess(sample2, lineMapping);
    if (result !== expectedResult) {
      console.log('result---------------------------------');
      console.log(result);
      console.log('expected-------------------------------');
      console.log(expectedResult);
      throw new Error("Preprocessor result not expected result.");
    }
  };

}).call(this);
