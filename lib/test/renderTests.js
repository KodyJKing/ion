// Generated by CoffeeScript 1.6.3
(function() {
  var expressionTests, ion;

  ion = require('../');

  expressionTests = [
    ["12", {}, 12], ["12 + 5", {}, 17], [". == 2", {}, false], [". == 2", 2, true], [
      ".foo.bar", {
        foo: {
          bar: 3
        }
      }, 3
    ], [
      "{}\n    foo: 1\n    bar: 2\n    baz: .x + .y", {
        x: 10,
        y: 20
      }, {
        foo: 1,
        bar: 2,
        baz: 30
      }
    ], [
      "{}\n    name: \"Alpha\"\n    children:\n        Beta: 1\n        Charlie: 2", {
        x: 10,
        y: 20
      }, {
        name: "Alpha",
        children: {
          Beta: 1,
          Charlie: 2
        }
      }
    ], [
      "{}\n    even: []\n        for .numbers\n            if (. & 1) == 0\n                .\n    odd: []\n        for .numbers\n            if (. & 1) == 1\n                .", {
        numbers: [1, 2, 3, 4, 5, 6]
      }, {
        even: [2, 4, 6],
        odd: [1, 3, 5]
      }
    ], [
      "{}\n    even: .numbers.*{(. & 1) == 0}\n    odd: .numbers.*{(. & 1) == 1}", {
        numbers: [1, 2, 3, 4, 5, 6]
      }, {
        even: [2, 4, 6],
        odd: [1, 3, 5]
      }
    ], [
      "{}\n    alpha:= 1\n    beta: alpha", {}, {
        alpha: 1,
        beta: 1
      }
    ], [
      "{}\n    a: $numbers.*{. < 4}\n    b: @a.*", {
        numbers: [1, 2, 3, 4, 5, 6]
      }, {
        a: [1, 2, 3],
        b: [1, 2, 3]
      }
    ], [
      "{}\n    c: $b.sum($a, 2)", {
        a: 1,
        b: {
          sum: (function(a, b) {
            return a + b + this.c;
          }),
          c: 10
        }
      }, {
        c: 13
      }
    ], ["Math.min(2,1)", null, 1], [
      "{}\n    name: $order.name\n    items: []\n        for $order.items\n            {}\n                name: .[0]\n                quantity: .[1]\n                unitPrice: $store.items[@name].price\n                extendedPrice: @unitPrice * @quantity\n                tax: $store.items[@name].taxable ? $store.tax.rate * @extendedPrice : 0\n    subtotal: (@items.*.extendedPrice).sum()\n    tax: (@items.*.tax).sum()\n    total: @subtotal + @tax", {
        store: {
          items: {
            apples: {
              price: 1.00,
              taxable: true
            },
            bananas: {
              price: 0.50,
              taxable: true
            },
            oranges: {
              price: 0.75,
              taxable: false
            }
          },
          tax: {
            rate: 0.08
          }
        },
        order: {
          name: "Joe Shopper",
          items: [["apples", 4], ["bananas", 3], ["oranges", 1]]
        }
      }, {
        "name": "Joe Shopper",
        "items": [
          {
            "name": "apples",
            "quantity": 4,
            "unitPrice": 1,
            "extendedPrice": 4,
            "tax": 0.32
          }, {
            "name": "bananas",
            "quantity": 3,
            "unitPrice": 0.5,
            "extendedPrice": 1.5,
            "tax": 0.12
          }, {
            "name": "oranges",
            "quantity": 1,
            "unitPrice": 0.75,
            "extendedPrice": 0.75,
            "tax": 0
          }
        ],
        "subtotal": 6.25,
        "tax": 0.44,
        "total": 6.69
      }
    ]
  ];

  exports.test = {
    parse: function() {
      var ast, e, expected, input, result, source, watcher, _i, _len, _ref;
      for (_i = 0, _len = expressionTests.length; _i < _len; _i++) {
        _ref = expressionTests[_i], source = _ref[0], input = _ref[1], expected = _ref[2];
        ast = ion.parseExpression(source);
        e = ion.createRuntime(ast, input);
        result = null;
        watcher = function(value) {
          return result = value;
        };
        e.watch(watcher);
        if (!Object.equal(result, expected)) {
          console.log("-----------------Template--------------");
          console.log(source);
          console.log("-----------------Result----------------");
          console.log(JSON.stringify(result, null, '  '));
          console.log("-----------------Expected--------------");
          console.log(JSON.stringify(expected));
          console.log("---------------------------------------");
          throw new Error(JSON.stringify(result) + " != " + JSON.stringify(expected));
        }
        e.unwatch(watcher);
      }
    }
  };

}).call(this);
