// Generated by CoffeeScript 1.6.3
(function() {
  var expressionTests, ion;

  ion = require('../');

  expressionTests = [
    ["12", {}, 12], ["12 + 5", {}, 17], [". == 2", {}, false], [". == 2", 2, true], [
      "@foo.bar", {
        foo: {
          bar: 3
        }
      }, 3
    ], [
      "{}\n    foo: 1\n    bar: 2\n    baz: @x + @y", {
        x: 10,
        y: 20
      }, {
        foo: 1,
        bar: 2,
        baz: 30
      }
    ], [
      "{}\n    name: \"Alpha\"\n    children:\n        Beta: 1\n        Charlie: 2", {
        x: 10,
        y: 20
      }, {
        name: "Alpha",
        children: {
          Beta: 1,
          Charlie: 2
        }
      }
    ], [
      "{}\n    even: []\n        for .numbers\n            if (. & 1) == 0\n                .\n    odd: []\n        for .numbers\n            if (. & 1) == 1\n                .", {
        numbers: [1, 2, 3, 4, 5, 6]
      }, {
        even: [2, 4, 6],
        odd: [1, 3, 5]
      }
    ]
  ];

  exports.test = {
    parse: function() {
      var ast, e, expected, input, result, source, watcher, _i, _len, _ref;
      for (_i = 0, _len = expressionTests.length; _i < _len; _i++) {
        _ref = expressionTests[_i], source = _ref[0], input = _ref[1], expected = _ref[2];
        ast = ion.parseExpression(source);
        e = ion.createRuntime(ast, input);
        result = null;
        watcher = function(value) {
          return result = value;
        };
        e.watch(watcher);
        console.log(source, " -> ", input, " = ", result);
        if (!Object.equal(result, expected)) {
          console.log("-----------------Template--------------");
          console.log(source);
          console.log("-----------------Result----------------");
          console.log(JSON.stringify(result));
          console.log("-----------------Expected--------------");
          console.log(JSON.stringify(expected));
          console.log("-----------------AST-------------------");
          console.log(JSON.stringify(ast, null, "    "));
          console.log("---------------------------------------");
          throw new Error(JSON.stringify(result) + " != " + JSON.stringify(expected));
        }
        e.unwatch(watcher);
      }
    }
  };

}).call(this);
