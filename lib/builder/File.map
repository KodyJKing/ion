{"version":3,"sources":["File.ion"],"names":["global","Window","ion","fs","np","utility","File","constructor","path","Error","Object","defineProperties","value","enumerable","writable","modified","getModified","makeReactive","watcher","existsSync","watch","checkForChanges","close","properties","isFile","get",{"type":"Identifier","name":"get","loc":{"start":{"line":49,"column":12,"fixed":true,"source":"ion/builder/File.ion"},"end":{"line":49,"column":15,"fixed":true,"source":"ion/builder/File.ion"}}},"isDirectory","statSync","directoryName","dirname","exists","copyFrom","file","content","read","length","console","log","write","normalize","_lastModified","_content","encoding","getExtension","index","lastIndexOf","substring","delete","toString","valueOf"],"mappings":"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","sourcesContent":["\nif global.Window\n    return\n\nconst\n    ion = import '../'\n    fs = import 'fs'\n    np = import 'path'\n    utility = import './utility'\n\nexport class File\n    constructor: (path) ->\n        if path?.constructor is File\n            return path\n        if @constructor isnt File\n            return new File(path)\n        if typeof path isnt 'string'\n            throw new Error(\"path string is required\")\n        Object.defineProperties(\n            @\n            {}\n                path:\n                    value: path\n                    enumerable: true\n                    writable: false\n        )\n        # set modified immediately\n        @modified = utility.getModified(path)\n        # make us reactive to observers.  Specifically we will just update our modified value as needed.\n        ion.makeReactive(\n            @\n            =>\n                let watcher\n                if fs.existsSync(@path)\n                    watcher = fs.watch(\n                        @path\n                        =>\n                            let modified = utility.getModified(@path)\n                            if @modified isnt modified\n                                @modified = modified\n                                # explicit check is only because current\n                                # nodejs versions don't have Object.observe yet.\n                                ion.checkForChanges()\n                    )\n                return -> watcher?.close()\n        )\n    properties:\n        isFile:\n            get: -> not @isDirectory\n        isDirectory:\n            get: -> fs.statSync(@path).isDirectory()\n        directoryName:\n            get: -> np.dirname(@path) ? \"\"\n        exists:\n            get: -> fs.existsSync(@path)\n        copyFrom: (file) ->\n            file = File(file)\n            let content = file.read(null)\n            if content.length is 0\n                console.log(\n                    \"\"\n                        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n                        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n                        {{ file }} {{ file.modified }}\n                        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n                        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n                )\n            else\n                @write(content, null)\n                console.log(\"Copied: {{np.normalize(@path)}}\")\n        read: do ->\n            # we store changes here, not in File, otherwise\n            # reading will cause file to change which causes\n            let _lastModified = {}\n            let _content = {}\n            return (encoding) ->\n                if fs.existsSync(@path)\n                    # cache file content as long as the file remains unmodified\n                    let modified = utility.getModified(@path)\n                    let content\n                    if modified is _lastModified[@path]\n                        content = _content[@path]\n                    else\n                        content = utility.read(@path, encoding)\n                        if content.length > 0\n                            _content[@path] = content\n                            _lastModified[@path] = modified\n                        else\n                            delete _content[@path]\n                            delete _lastModified[@path]\n                    return content\n                else\n                    return null\n        getExtension: ->\n            let index = @path.lastIndexOf('.')\n            return index < 0 ? \"\" : @path.substring(index)\n        write: (content, encoding) ->\n            if content? and content isnt @read(encoding)\n                utility.write(@path, content, encoding)\n        delete: -> utility.write(@path, null)\n        toString: -> @path\n        valueOf: -> @path\n"]}