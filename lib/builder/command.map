{"version":3,"sources":["command.ion"],"names":["require","main","module","args","process","argv","slice","length","console","log","ModuleBuilder","watch","exit","global","ion","File","compiler","arg","file","exists","Error","code","read","js","compile","eval"],"mappings":"aAAA;AAEA,IAAGA,OAAA,CAAQC,IAAR,KAAkBC,MAArB,EACA;AAAA,IAAI,OAAJ;AAAA,CAHA;AAKA,IAAIC,IAAA,GAAOC,OAAA,CAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAX,CALA;AAMA,IAAGH,IAAA,CAAKI,MAAL,KAAe,CAAf,IAAoBJ,IAAA,CAAK,CAAL,MAAW,QAAlC,EACA;AAAA,IAAIK,OAAA,CAAQC,GAAR,C,gKAAA,EAAJ;AAAA,IAOI,OAPJ;AAAA,CAPA;AAgBA,IAAIC,aAAA,G,OAAgB,CAAO,0BAAP,CAApB,CAhBA;AAiBA,IAAGP,IAAA,CAAK,CAAL,M,IAAH,EACA;AAAA,IAAIO,aAAA,GAAgBC,KAAhB,GAAJ;AAAA,IACIP,OAAA,CAAQQ,IAAR,GADJ;AAAA,CADA,MAGK,IAAGT,IAAA,CAAK,CAAL,M,IAAH,EACL;AAAA,IAAIO,aAAA,GAAgBC,KAAhB,GAAJ;AAAA,CADK,MAIL;AAAA,IAAIE,MAAA,CAAOC,GAAP,G,OAAa,CAAO,KAAP,CAAb,CAAJ;AAAA,IACI,IAAIC,IAAA,G,OAAO,CAAO,QAAP,CAAX,CADJ;AAAA,IAEI,IAAIC,QAAA,G,OAAW,CAAO,aAAP,CAAf,CAFJ;AAAA,I,sBAGeb,I,eACf;AAAA,Q,IADQc,G,GAAOd,I,KACf;AAAA,QAAQ,IAAIe,IAAA,GAAO,IAAIH,IAAJ,CAASE,GAAT,CAAX,CAAR;AAAA,QACQ,IAAG,CAAIC,IAAA,CAAKC,MAAZ,EACR;AAAA,YAAY,MAAM,IAAIC,KAAJ,C,qBAA6BH,GAA7B,CAAN,CAAZ;AAAA,SAFA;AAAA,QAGQ,IAAII,IAAA,GAAOH,IAAA,CAAKI,IAAL,EAAX,CAHR;AAAA,QAIQ,IAAIC,EAAA,GAAKP,QAAA,CAASQ,OAAT,CAAiBH,IAAjB,CAAT,CAJR;AAAA,QAKQI,IAAA,CAAKF,EAAL,EALR;AAAA,KAJA;AAAA","sourcesContent":["#!/usr/bin/env node\n\nif require.main isnt module\n    return\n\nlet args = process.argv.slice(2)\nif args.length is 0 or args[0] is '--help'\n    console.log(\n        \"\"\n            Usage: ion -c | -w | file-to-run\n\n              -c   compiles the local module defined in package.json\n              -w   compiles the local module defined in package.json and watch\n    )\n    return\n\nlet ModuleBuilder = import '../builder/ModuleBuilder'\nif args[0] is \"-c\"\n    ModuleBuilder().watch()\n    process.exit()\nelse if args[0] is \"-w\"\n    ModuleBuilder().watch()\nelse\n    # import ion into global namespace\n    global.ion = import('../')\n    let File = import('./File')\n    let compiler = import('../compiler')\n    for arg in args\n        let file = new File(arg)\n        if not file.exists\n            throw new Error(\"File not found: {{arg}}\")\n        let code = file.read()\n        let js = compiler.compile(code)\n        eval(js)\n"]}