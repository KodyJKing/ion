{"version":3,"sources":["WebsiteBuilder.ion"],"names":["global","window","ion","File","Directory","builder","utility","ModuleBuilder","clientJsDir","serverJsDir","serverJavaDir","np","fs"],"mappings":"aAAA;AAAA,IAAGA,MAAA,CAAOC,MAAV,EACA;AAAA,IAAI,OAAJ;AAAA,CADA;AAGA,IACIC,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,IAAA,G,OAAO,CAAO,QAAP,CAFX,EAGIC,SAAA,G,OAAY,CAAO,aAAP,CAHhB,EAIIC,OAAA,G,OAAU,CAAO,IAAP,CAJd,EAKIC,OAAA,G,OAAU,CAAO,WAAP,CALd,EAMIC,aAAA,G,OAAgB,CAAO,iBAAP,CANpB,EAOIC,WAAA,GAAc,IAPlB,EAQIC,WAAA,GAAc,YARlB,EASIC,aAAA,GAAgB,cATpB,EAUIC,EAAA,G,OAAK,CAAO,MAAP,CAVT,EAWIC,EAAA,G,OAAK,CAAO,IAAP,CAXT,CAHA","sourcesContent":["if global.window\r\n    return\r\n\r\nconst\r\n    ion = import '../'\r\n    File = import './File'\r\n    Directory = import './Directory'\r\n    builder = import './'\r\n    utility = import './utility'\r\n    ModuleBuilder = import './ModuleBuilder'\r\n    clientJsDir = 'js'\r\n    serverJsDir = 'WEB-INF/js'\r\n    serverJavaDir = 'WEB-INF/java'\r\n    np = import 'path'\r\n    fs = import 'fs'\r\n\r\n\r\nexport template (packagePatch) ->\r\n    const\r\n        packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})\r\n        input = new Directory(packageJson.directories.src ? 'src')\r\n        output = new Directory(packageJson.directories.www ? 'debug')\r\n        clientOutput = output.getDirectory(clientJsDir)\r\n        serverOutput = output.getDirectory(serverJsDir)\r\n        nodepaths = ['node_modules'].concat(process.env.NODE_PATH.split(np.delimiter))\r\n\r\n    # Copy local development versions of glass-pages to input directory if available\r\n    # They will be copied from src to the build directory by ant\r\n    let glassPages = new Directory('../glass-pages/dist')\r\n    if glassPages.exists\r\n        let javaDirectory = input.getDirectory(serverJavaDir)\r\n        for key, source of glassPages.search()\r\n            let target = javaDirectory.getFile(key)\r\n            if target.modified < source.modified\r\n                target.copyFrom(source)\r\n\r\n    # Copy client and server node modules to the output\r\n    for moduleName in packageJson.build.client.modules\r\n        for nodepath in nodepaths\r\n            let directory = new Directory(np.join(nodepath, moduleName))\r\n            for key, source of directory.search([\".js\",\".map\"], [\"node_modules\"].concat(packageJson.build.client.exclude))\r\n                clientOutput.write(source.path.substring(nodepath.length), source.read())\r\n    for moduleName in packageJson.build.server.modules\r\n        for nodepath in nodepaths\r\n            let directory = new Directory(np.join(nodepath, moduleName))\r\n            for key, source of directory.search([\".js\",\".map\"], [\"node_modules\"].concat(packageJson.build.server.exclude))\r\n                serverOutput.write(source.path.substring(nodepath.length), source.read())\r\n\r\n    # build client javascript\r\n    ModuleBuilder(\r\n        directories:\r\n            src:input + '/js' # client side javascript\r\n            lib:output + '/' + clientJsDir\r\n        build:\r\n            exclude: packageJson.build.client.exclude\r\n            test: false\r\n    )\r\n\r\n    # build server javascript\r\n    ModuleBuilder(\r\n        directories:\r\n            src:input + '/js' # server side javascript\r\n            lib:output + '/' + serverJsDir\r\n        build:\r\n            exclude: packageJson.build.server.exclude\r\n            test: true\r\n    )\r\n\r\n    # Copy all other files from src to output\r\n    for path, file of input.search(null, [\".ionpage\",\".coffeepage\",\".coffee\",\".java\",\".class\",\".jar\", \".ion\"])\r\n        if file.isFile\r\n            output.write(path, file.read(null), null)\r\n    else\r\n        output.delete(path)\r\n\r\n    # Compile plain ion files, while excluding the js directory\r\n    for path, file of input.search(\".ion\", \"js\")\r\n        let targetPath = builder.changeExtension(path, \".js\")\r\n        output.write(targetPath, builder.compileIon(file))\r\n    else\r\n        output.delete(targetPath)\r\n\r\n    # Compile ion pages\r\n    let pageOutput = output.getDirectory('WEB-INF/pages')\r\n    for path, file of input.search(\".ionpage\")\r\n        let targetPath = builder.changeExtension(path, \".js\")\r\n        pageOutput.write(targetPath, \"(function {{path.replace(/[\\.\\/\\\\]/g, '_')}}(){ {{builder.compileIon(file)}} })\")\r\n    else\r\n        pageOutput.delete(targetPath)\r\n\r\n    # Compile coffee pages\r\n    # TODO: port all .coffeepages to .ionpages and delete this.\r\n    for path, file of input.search(\".coffeepage\")\r\n        let targetPath = builder.changeExtension(path, \".js\")\r\n        pageOutput.write(targetPath, \"(function {{path.replace(/[\\.\\/\\\\]/g, '_')}}(){ {{builder.compileCoffeeScript(file)}} })\")\r\n    else\r\n        pageOutput.delete(targetPath)\r\n"]}