// Generated by CoffeeScript 1.6.3
(function() {
  var Context, Operation, Template, parse, parser, postprocessor, preprocessor;

  require('sugar');

  Template = require('./Template');

  preprocessor = require('./preprocessor');

  postprocessor = require('./postprocessor');

  parser = require('./parser');

  parse = function(input) {
    var ast, lineMapping, postprocessed, preprocessed;
    lineMapping = [];
    preprocessed = preprocessor.preprocess(input, lineMapping);
    ast = parser.parse(preprocessed);
    postprocessed = postprocessor.postprocess(ast);
    return postprocessed;
  };

  exports.parseStatement = parse;

  exports.parseExpression = function(input) {
    var ast;
    ast = parse(input);
    if (ast.op !== 'add') {
      throw new Error("Expected a single expression:\n" + input);
    }
    return ast.args[0];
  };

  Context = require('./runtime/Context');

  Operation = require('./runtime/Operation');

  exports.createRuntime = function(ast, input, output, options) {
    var context, runtime;
    context = new Context(input, output);
    runtime = Operation.createRuntime(context, ast);
    return runtime;
  };

  exports.count = function(container) {
    var _ref;
    return (_ref = container.length) != null ? _ref : 0;
  };

  exports.add = function(container, item, index, context) {
    if ((index != null) && (container.splice != null)) {
      return container.splice(index, 0, item);
    } else {
      return container.add(item);
    }
  };

  exports.remove = function(container, item) {
    return container.remove(item);
  };

  exports.is = function(instance, type) {
    if (instance == null) {
      return false;
    }
    if (type == null) {
      return true;
    }
    if (typeof instance.is === 'function') {
      return instance.is(type);
    }
    return instance instanceof type;
  };

}).call(this);
