{"version":3,"sources":["Object.ion"],"names":["ion","typeKey","visible","type","get",{"type":"Identifier","name":"get","loc":{"start":{"line":17,"column":12,"fixed":true,"source":"ion/Object.ion"},"end":{"line":17,"column":15,"fixed":true,"source":"ion/Object.ion"}}},"constructor","name","set","toJSON","properties","key","value","hasOwnProperty","Object","arguments","arg","is","object","types","has","test"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,IAAP,CADV;AAGA,IAAMC,OAAA,GAAU,GAAhB,CAHA;eAAA;;UAaSA,O,oBAAAA,O,GAAS;AAAA,QACNC,OAAA,EAAS,KADH;AAAA,QAENC,IAAA,EAAM,QAFA;AAAA,QAGNC,GAAA,EAAKC,Y;mBAAG,KAACC,WAAD,CAAaC,I;SAHf;AAAA,QAINC,GAAA,EAAKH,Y;SAJC;AAAA,K;UAKVI,M,GAAQJ,YAChB;AAAA,QAAY,IAAMK,UAAA,G,EAAN,CAAZ;AAAA,QAAkBA,U,CAAeT,O,IAAU,KAAEA,OAAF,C,CAA3C;AAAA,Q;uBAC8B,I;YAAlB,SAAIU,GAAJ,I,IAAA,E;oBAASC,K,QAALD,G;oBAAmB,KAACE,cAAD,CAAgBF,GAAhB,C,EACnC;AAAA,oBAAgBD,UAAA,CAAWC,GAAX,IAAkBC,KAAlB,CAAhB;AAAA,iB;;SAFA;AAAA,QAGY,OAAOF,UAAP,CAHZ;AAAA,K;CAnBA;IAIaI,M;;QACTR,WAAA,EAAa,SADJQ,MACI,CAACJ,UAAD,EACjB;AAAA,Y,sBAAmBK,S,eACnB;AAAA,gB,IADYC,G,GAAOD,S,KACnB;AAAA,gBAAY,IAAGC,G,QAAH,EACZ;AAAA,oBAAgB,SAAIL,GAAJ,IAAkBK,GAAlB,EAChB;AAAA,wB,IADyBJ,K,GAASI,G,CAAdL,G,EACpB;AAAA,wB,IADyBC,K,GAASI,G,CAAdL,G,EACpB;AAAA,wBAAoB,KAAEA,GAAF,IAASC,KAAT,CAApB;AAAA,qBADA;AAAA,iBADA;AAAA,aADA;AAAA,S;QAIIX,OAAA,EAASA,O;QACTgB,EAAA,EAAIZ,UAACa,MAADb,E;mBAAYa,M,WAAAA,MAAA,CAAQZ,WAAR,CAAoBa,K,WAApBD,MAAA,CAAQZ,WAAR,CAAoBa,KAApB,CAA2BC,G,WAA3BF,MAAA,CAAQZ,WAAR,CAAoBa,KAApB,CAA2BC,GAA3B,CAAgC,IAAhC,C;;QAChBV,UAAA,E;QAWAW,IAAA,EAAMhB,YACV;AAAA,YAAQ,IAAIa,MAAA,GAAS,IAAIJ,MAAJ,EAAb,CAAR;AAAA,Y,KACeA,MAAA,CAAOG,EAAP,CAAUC,MAAV,C;yEADf;AAAA,S;OApB4B,I,EAJ5B;2BAIaJ,M","sourcesContent":["const\n    ion = import './'\n\nconst typeKey = '$'\nexport class Object extends null\n    constructor: (properties) ->\n        for arg in arguments\n            if arg?\n                for key, value of arg\n                    @[key] = value\n    typeKey: typeKey\n    is: (object) -> object?.constructor.types?.has?(@)\n    properties:\n        [typeKey]:\n            visible: false\n            type: 'string'\n            get: -> @constructor.name\n            set: ->\n        toJSON: ->\n            const properties = {[typeKey]: @[typeKey]}\n            for key, value of @ if @hasOwnProperty(key)\n                properties[key] = value\n            return properties\n    test: ->\n        let object = new Object()\n        assert Object.is(object)\n"]}