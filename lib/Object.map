{"version":3,"sources":["Object.ion"],"names":["ion","typeKey","visible","type","get",{"type":"Identifier","name":"get","loc":{"start":{"line":17,"column":12,"fixed":true,"source":"ion/Object.ion"},"end":{"line":17,"column":15,"fixed":true,"source":"ion/Object.ion"}}},"id","set","toJSON","properties","key","value","hasOwnProperty","Object","constructor","arguments","arg","is","object","types","has","test"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,IAAP,CADV;AAGA,IAAMC,OAAA,GAAU,GAAhB,CAHA;eAAA;;UAaSA,O,oBAAAA,O,GAAS;AAAA,QACNC,OAAA,EAAS,KADH;AAAA,QAENC,IAAA,EAAM,QAFA;AAAA,QAGNC,GAAA,EAAKC,Y;mBAAG,K,WAAA,CAAEC,E;SAHJ;AAAA,QAINC,GAAA,EAAKF,Y;SAJC;AAAA,K;UAKVG,M,GAAQH,YAChB;AAAA,QAAY,IAAMI,UAAA,GAAa,EAAnB,CAAZ;AAAA,QACY,IAAG,K,WAAA,CAAEH,E,QAAL,EACZ;AAAA,YAAgBG,UAAA,CAAW,K,WAAA,CAAER,OAAb,IAAwB,K,WAAA,CAAEK,EAA1B,CAAhB;AAAA,SAFA;AAAA,Q;uBAG8B,I;YAAlB,SAAII,GAAJ,I,IAAA,E;oBAASC,K,QAALD,G;oBAAmB,KAACE,cAAD,CAAgBF,GAAhB,C,EACnC;AAAA,oBAAgBD,UAAA,CAAWC,GAAX,IAAkBC,KAAlB,CAAhB;AAAA,iB;;SAJA;AAAA,QAKY,OAAOF,UAAP,CALZ;AAAA,K;CAnBA;IAIaI,M;;QACTC,WAAA,EAAa,SADJD,MACI,CAACJ,UAAD,EACjB;AAAA,Y,sBAAmBM,S,eACnB;AAAA,gB,IADYC,G,GAAOD,S,KACnB;AAAA,gBAAY,IAAGC,G,QAAH,EACZ;AAAA,oBAAgB,SAAIN,GAAJ,IAAkBM,GAAlB,EAChB;AAAA,wB,IADyBL,K,GAASK,G,CAAdN,G,EACpB;AAAA,wB,IADyBC,K,GAASK,G,CAAdN,G,EACpB;AAAA,wBAAoB,KAAEA,GAAF,IAASC,KAAT,CAApB;AAAA,qBADA;AAAA,iBADA;AAAA,aADA;AAAA,S;QAIIV,OAAA,EAASA,O;QACTgB,EAAA,EAAIZ,UAACa,MAADb,E;mBAAYa,M,WAAAA,MAAA,CAAQJ,WAAR,CAAoBK,K,WAApBD,MAAA,CAAQJ,WAAR,CAAoBK,KAApB,CAA2BC,G,WAA3BF,MAAA,CAAQJ,WAAR,CAAoBK,KAApB,CAA2BC,GAA3B,CAAgC,IAAhC,C;;QAChBX,UAAA,E;QAaAY,IAAA,EAAMhB,YACV;AAAA,YAAQ,IAAIa,MAAA,GAAS,IAAIL,MAAJ,EAAb,CAAR;AAAA,Y,KACeA,MAAA,CAAOI,EAAP,CAAUC,MAAV,C;yEADf;AAAA,S;OAtB4B,I,EAJ5B;2BAIaL,M","sourcesContent":["const\n    ion = import './'\n\nconst typeKey = '$'\nexport class Object extends null\n    constructor: (properties) ->\n        for arg in arguments\n            if arg?\n                for key, value of arg\n                    @[key] = value\n    typeKey: typeKey\n    is: (object) -> object?.constructor.types?.has?(@)\n    properties:\n        [typeKey]:\n            visible: false\n            type: 'string'\n            get: -> @@id\n            set: ->\n        toJSON: ->\n            const properties = {}\n            if @@id?\n                properties[@@typeKey] = @@id\n            for key, value of @ if @hasOwnProperty(key)\n                properties[key] = value\n            return properties\n    test: ->\n        let object = new Object()\n        assert Object.is(object)\n"]}