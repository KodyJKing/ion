// Generated by CoffeeScript 1.6.3
(function() {
  var DynamicExpression, Expression, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Expression = require('./Expression');

  module.exports = DynamicExpression = (function(_super) {
    __extends(DynamicExpression, _super);

    function DynamicExpression() {
      _ref = DynamicExpression.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DynamicExpression.prototype.isActive = false;

    DynamicExpression.prototype.activate = function() {
      return this.isActive = true;
    };

    DynamicExpression.prototype.deactivate = function() {
      return this.isActive = false;
    };

    DynamicExpression.prototype.watch = function(watcher) {
      var value, watchers;
      watchers = this._watchers != null ? this._watchers : this._watchers = [];
      if (watchers.length === 0) {
        this.activate();
      }
      watchers.add(watcher);
      value = this.getValue();
      if (value !== void 0) {
        return this._notifyWatcher(watcher, value);
      }
    };

    DynamicExpression.prototype.unwatch = function(watcher) {
      var value, _ref1;
      if ((_ref1 = this._watchers) != null) {
        _ref1.remove(watcher);
      }
      if (this._watchers.length === 0) {
        this.deactivate();
      }
      value = this.getValue();
      if (value !== void 0) {
        return this._notifyWatcher(watcher, void 0);
      }
    };

    DynamicExpression.prototype._notifyWatcher = function(watcher, value) {
      return watcher.call(this, value);
    };

    DynamicExpression.prototype.notify = function() {
      var value, watcher, _i, _len, _ref1;
      if (this._watchers != null) {
        value = this.getValue();
        _ref1 = this._watchers;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          watcher = _ref1[_i];
          this._notifyWatcher(watcher, value);
        }
      }
    };

    DynamicExpression.prototype.getValue = function() {
      return this._value;
    };

    DynamicExpression.prototype.setValue = function(value) {
      if (value !== this._value) {
        this._value = value;
        this.notify();
      }
    };

    return DynamicExpression;

  })(Expression);

  module.exports.test = function() {
    var d, total, watcher;
    d = new DynamicExpression();
    if (d.getValue() !== void 0) {
      throw "d.getValue() != undefined";
    }
    total = 10;
    watcher = function(value) {
      if (value !== void 0) {
        return total += value;
      }
    };
    d.watch(watcher);
    if (total !== 10) {
      throw "total != 10";
    }
    d.setValue(10);
    if (d.getValue() !== 10) {
      throw "d.getValue() != 10";
    }
    if (total !== 20) {
      throw "total != 20";
    }
    d.setValue(20);
    if (total !== 40) {
      throw "total != 40";
    }
    d.unwatch(watcher);
    if (total !== 40) {
      throw "total != 40";
    }
    d.setValue(50);
    if (total !== 40) {
      throw "total != 40";
    }
  };

}).call(this);
