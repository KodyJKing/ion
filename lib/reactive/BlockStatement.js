// Generated by CoffeeScript 1.6.3
(function() {
  var BlockStatement, Expression, Operation, Statement, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Operation = require('./Operation');

  Expression = require('./Expression');

  Statement = require('./Statement');

  module.exports = BlockStatement = (function(_super) {
    __extends(BlockStatement, _super);

    function BlockStatement() {
      _ref = BlockStatement.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockStatement.prototype.activate = function() {
      var statement, _i, _len, _ref1, _results;
      BlockStatement.__super__.activate.call(this);
      if (this.statements == null) {
        this.statements = Operation.createRuntimes(this.context, this.args);
      }
      _ref1 = this.statements;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        statement = _ref1[_i];
        _results.push(statement.activate());
      }
      return _results;
    };

    BlockStatement.prototype.deactivate = function() {
      var index, statement, _i, _ref1, _results;
      BlockStatement.__super__.deactivate.call(this);
      _results = [];
      for (index = _i = _ref1 = this.statements.length - 1; _i >= 0; index = _i += -1) {
        statement = this.statements[index];
        _results.push(statement.deactivate());
      }
      return _results;
    };

    return BlockStatement;

  })(Statement);

}).call(this);
