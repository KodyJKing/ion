// Generated by CoffeeScript 1.6.3
(function() {
  var Context, IfStatement, Operation, Statement, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Operation = require('./Operation');

  Statement = require('./Statement');

  Context = require('./Context');

  module.exports = IfStatement = (function(_super) {
    __extends(IfStatement, _super);

    function IfStatement() {
      _ref = IfStatement.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    IfStatement.prototype.activate = function() {
      var _this = this;
      IfStatement.__super__.activate.call(this);
      if (this.conditionExpression == null) {
        this.conditionExpression = Operation.createRuntime(this.context, this.args[0]);
      }
      return this.conditionExpression.watch(this.conditionWatcher != null ? this.conditionWatcher : this.conditionWatcher = function(conditionValue) {
        _this.conditionValue = conditionValue;
        return _this._choose();
      });
    };

    IfStatement.prototype.deactivate = function() {
      IfStatement.__super__.deactivate.call(this);
      return this.conditionExpression.unwatch(this.conditionWatcher);
    };

    IfStatement.prototype._choose = function() {
      var _ref1, _ref2;
      if (this.conditionValue) {
        if (this.trueStatement == null) {
          this.trueStatement = Operation.createRuntime(this.context, this.args[1]);
        }
        this.trueStatement.activate();
        return (_ref1 = this.falseStatement) != null ? _ref1.deactivate() : void 0;
      } else {
        if (this.args[2] != null) {
          if (this.falseStatement == null) {
            this.falseStatement = Operation.createRuntime(this.context, this.args[2]);
          }
          this.falseStatement.activate();
        }
        return (_ref2 = this.trueStatement) != null ? _ref2.deactivate() : void 0;
      }
    };

    IfStatement.prototype.dispose = function() {
      var _ref1;
      IfStatement.__super__.dispose.call(this);
      return (_ref1 = this.conditionExpression) != null ? _ref1.dispose() : void 0;
    };

    return IfStatement;

  })(Statement);

  module.exports.test = function(done) {
    var a, context, object;
    object = {
      a: true,
      x: 1,
      y: 2
    };
    context = new Context(object);
    a = Operation.createRuntime(context, {
      op: 'if',
      args: [
        {
          op: 'member',
          args: [
            {
              op: 'ancestor',
              args: [0]
            }, "a"
          ]
        }, {
          op: ':',
          args: ["z1", true]
        }, {
          op: ':',
          args: ["z2", false]
        }
      ]
    });
    a.activate();
    if (object.z1 !== true) {
      throw new "object.z1 != true";
    }
    a.deactivate();
    object.a = false;
    a.activate();
    if (object.hasOwnProperty('z1')) {
      throw new "object.hasOwnProperty('z1')";
    }
    if (object.z2 !== false) {
      throw new "object.z2 != false";
    }
    Object.observe(object, function(changes) {
      if (object.z1 === true) {
        if (object.hasOwnProperty('z2')) {
          throw new "object.hasOwnProperty('z2')";
        }
        a.deactivate();
        return done();
      }
    });
    object.a = true;
  };

}).call(this);
