// Generated by CoffeeScript 1.6.3
(function() {
  var Context, IfStatement, Operation, Statement, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Operation = require('./Operation');

  Statement = require('./Statement');

  Context = require('./Context');

  module.exports = IfStatement = (function(_super) {
    __extends(IfStatement, _super);

    function IfStatement() {
      _ref = IfStatement.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    IfStatement.prototype.activate = function() {
      var _this = this;
      IfStatement.__super__.activate.call(this);
      if (this.leftExpression == null) {
        this.leftExpression = Operation.createRuntime(this.context, this.args[0]);
      }
      if (this.rightExpression == null) {
        this.rightExpression = Operation.createRuntime(this.context, this.args[1]);
      }
      this.leftExpression.watch(this.leftWatcher != null ? this.leftWatcher : this.leftWatcher = function(leftValue) {
        _this.leftValue = leftValue;
        return _this.assign();
      });
      return this.rightExpression.watch(this.rightWatcher != null ? this.rightWatcher : this.rightWatcher = function(rightValue) {
        _this.rightValue = rightValue;
        return _this.assign();
      });
    };

    IfStatement.prototype.deactivate = function() {
      IfStatement.__super__.deactivate.call(this);
      this.leftExpression.unwatch(this.leftWatcher);
      return this.rightExpression.unwatch(this.rightWatcher);
    };

    IfStatement.prototype.assign = function() {
      if ((this.leftValue != null) && this.rightValue !== void 0) {
        return this.context["this"][this.leftValue] = this.rightValue;
      }
    };

    IfStatement.prototype.dispose = function() {
      var _ref1, _ref2;
      IfStatement.__super__.dispose.call(this);
      if ((_ref1 = this.leftExpression) != null) {
        _ref1.dispose();
      }
      return (_ref2 = this.rightExpression) != null ? _ref2.dispose() : void 0;
    };

    return IfStatement;

  })(Statement);

  module.exports.test = function() {
    return "IfStatement";
  };

}).call(this);
