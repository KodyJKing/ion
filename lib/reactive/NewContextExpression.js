// Generated by CoffeeScript 1.6.3
(function() {
  var Context, DynamicExpression, NewContextExpression, Operation, core, left, right,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  core = require('../core');

  Operation = require('./Operation');

  DynamicExpression = require('./DynamicExpression');

  Context = require('./Context');

  left = 0;

  right = 1;

  module.exports = NewContextExpression = (function(_super) {
    __extends(NewContextExpression, _super);

    function NewContextExpression(properties) {
      NewContextExpression.__super__.constructor.call(this, properties);
      this.leftExpression = Operation.createRuntime(this.context, this.args[left]);
    }

    NewContextExpression.prototype.activate = function() {
      var _this = this;
      NewContextExpression.__super__.activate.call(this);
      return this.leftExpression.watch(this.leftWatcher != null ? this.leftWatcher : this.leftWatcher = function(value) {
        var _ref;
        if (_this.leftValue !== value) {
          if ((_ref = _this.rightExpression) != null) {
            _ref.unwatch(_this.rightWatcher);
          }
          if (_this.leftObserver != null) {
            core.unobserve(_this.leftValue, _this.leftObserver);
          }
          _this.leftValue = value;
          if (_this.leftValue != null) {
            if (_this.operation.observeLeftValue) {
              if (_this.leftObserver == null) {
                _this.leftObserver = function(changes) {
                  return _this.evaluate();
                };
              }
              core.observe(_this.leftValue, _this.leftObserver);
            }
            _this.leftContext = new Context(_this.leftValue, _this.context.output, _this.context);
            if (_this.rightWatcher == null) {
              _this.rightWatcher = function(value) {
                _this.rightValue = value;
                return _this.evaluate();
              };
            }
            _this.rightExpression = Operation.createRuntime(_this.leftContext, _this.args[right]);
            return _this.rightExpression.watch(_this.rightWatcher);
          } else {
            _this.leftContext = null;
            _this.rightExpression = null;
            return _this.setValue(void 0);
          }
        }
      });
    };

    NewContextExpression.prototype.deactivate = function() {
      NewContextExpression.__super__.deactivate.call(this);
      return this.leftExpression.unwatch(this.leftWatcher);
    };

    NewContextExpression.prototype.evaluate = function() {
      var value;
      value = this.operation.evaluate.call(this.context, this.leftValue, this.rightValue);
      return this.setValue(value);
    };

    return NewContextExpression;

  })(DynamicExpression);

  module.exports.test = function(done) {
    var context, e, error, object, result, watcher;
    try {
      object = {
        x: 1,
        y: 2
      };
      context = new Context(object);
      e = Operation.createRuntime(context, {
        op: 'local',
        args: [
          {
            op: 'root',
            args: []
          }, {
            op: '+',
            args: [
              {
                op: 'member',
                args: [
                  {
                    op: 'ancestor',
                    args: [0]
                  }, "x"
                ]
              }, {
                op: 'member',
                args: [
                  {
                    op: 'ancestor',
                    args: [0]
                  }, "y"
                ]
              }
            ]
          }
        ]
      });
      result = void 0;
      watcher = function(value) {
        result = value;
        if (value === 12) {
          return done();
        }
      };
      e.watch(watcher);
      if (result !== 3) {
        throw "result != 3";
      }
      return object.x = 10;
    } catch (_error) {
      error = _error;
      return done(error);
    }
  };

}).call(this);
