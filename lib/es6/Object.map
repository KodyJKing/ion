{"version":3,"sources":["Object.ion"],"names":["Object","is","defineProperty","value",{"type":"Identifier","name":"value","loc":{"start":{"line":7,"column":12,"fixed":true,"source":"ion/es6/Object.ion"},"end":{"line":7,"column":17,"fixed":true,"source":"ion/es6/Object.ion"}}},"a","b","isEmpty","object","trim","length","Array","isArray","constructor","key","test","x","Date"],"mappings":"aAAA;AACA,IAAG,C,CAAIA,MAAA,CAAOC,E,SAAd,EACA;AAAA,IAAID,MAAA,CAAOE,cAAP,CACIF,MADJ,EAEI,IAFJ,EAGI;AAAA,QACIG,KAAA,EAAOC,UAACC,CAADD,EAAIE,CAAJF,EACnB;AAAA,YAAgB,IAAGC,CAAA,KAAKC,CAAR,EAChB;AAAA,gBAAoB,IAAGD,CAAA,KAAK,CAAR,EACpB;AAAA,oBAAwB,OAAO,IAAIA,CAAJ,KAAS,IAAIC,CAApB,CAAxB;AAAA,iBADA;AAAA,gBAEoB,OAAO,IAAP,CAFpB;AAAA,aADA;AAAA,YAIgB,OAAOD,CAAA,KAAOA,CAAP,IAAaC,CAAA,KAAOA,CAA3B,CAJhB;AAAA,SAFQ;AAAA,KAHJ,EAAJ;AAAA,CAFA;AAeAN,MAAA,CAAOO,OAAP,GAAiB,UAACC,MAAD,EACjB;AAAA,IAAI,IAAG,C,CAAIA,M,SAAP,EACJ;AAAA,QAAQ,OAAO,IAAP,CAAR;AAAA,KADA;AAAA,IAEI,IAAG,OAAOA,MAAP,KAAiB,QAApB,EACJ;AAAA,QAAQ,OAAOA,MAAA,CAAOC,IAAP,GAAcC,MAAd,KAAwB,CAA/B,CAAR;AAAA,KAHA;AAAA,IAII,IAAGC,KAAA,CAAMC,OAAN,CAAcJ,MAAd,CAAH,EACJ;AAAA,QAAQ,OAAOA,MAAA,CAAOE,MAAP,KAAiB,CAAxB,CAAR;AAAA,KALA;AAAA,IAMI,IAAGF,MAAA,CAAOK,WAAP,KAAsBb,MAAzB,EACJ;AAAA,QAAQ,SAAIc,GAAJ,IAAWN,MAAX,EACR;AAAA,YAAY,OAAO,KAAP,CAAZ;AAAA,SADA;AAAA,QAEQ,OAAO,IAAP,CAFR;AAAA,KAPA;AAAA,IAUI,OAAO,KAAP,CAVJ;AAAA,CADA,CAfA;AA4BO,IAAMO,IAAA,G,QAAAA,I,GAAOX,YACpB;AAAA,Q,KAAWJ,MAAA,CAAOO,OAAP,CAAe,IAAf,C;wEAAX;AAAA,Q,KACWP,MAAA,CAAOO,OAAP,E;oEADX;AAAA,Q,KAEWP,MAAA,CAAOO,OAAP,CAAe,MAAf,C;6EAFX;AAAA,Q,KAGWP,MAAA,CAAOO,OAAP,CAAe,EAAf,C;sEAHX;AAAA,Q,KAIWP,MAAA,CAAOO,OAAP,CAAe,EAAf,C;sEAJX;AAAA,Q,KAKWP,MAAA,CAAOO,OAAP,C,EAAA,C;sEALX;AAAA,Q,KAMWP,MAAA,CAAOO,OAAP,C,GAAA,C;uEANX;AAAA,Q,KAOW,CAAIP,MAAA,CAAOO,OAAP,CAAe,CAAC,CAAD,CAAf,C;2EAPf;AAAA,Q,KAQW,CAAIP,MAAA,CAAOO,OAAP,CAAe,EAACS,CAAA,EAAE,CAAH,EAAf,C;6EARf;AAAA,Q,KASW,CAAIhB,MAAA,CAAOO,OAAP,C,GAAA,C;2EATf;AAAA,Q,KAUW,CAAIP,MAAA,CAAOO,OAAP,CAAe,IAAf,C;4EAVf;AAAA,Q,KAWW,CAAIP,MAAA,CAAOO,OAAP,CAAe,KAAf,C;6EAXf;AAAA,Q,KAYW,CAAIP,MAAA,CAAOO,OAAP,CAAe,EAAf,C;0EAZf;AAAA,Q,KAaW,CAAIP,MAAA,CAAOO,OAAP,CAAe,IAAIU,IAAJ,EAAf,C;kFAbf;AAAA,KADO","sourcesContent":["\nif not Object.is?\n    Object.defineProperty(\n        Object\n        'is'\n        {}\n            value: (a, b) ->\n                if a is b\n                    if a is 0\n                        return 1 / a is 1 / b\n                    return true\n                return a isnt a and b isnt b\n    )\n\n#   compatible with Sugar extensions, remove later when we refactor away our custom Array add method.\nObject.isEmpty = (object) ->\n    if not object?\n        return true\n    if typeof object is 'string'\n        return object.trim().length is 0\n    if Array.isArray(object)\n        return object.length is 0\n    if object.constructor is Object\n        for key of object\n            return false\n        return true\n    return false\n\nexport const test = ->\n    assert Object.isEmpty(null)\n    assert Object.isEmpty()\n    assert Object.isEmpty(undefined)\n    assert Object.isEmpty([])\n    assert Object.isEmpty({})\n    assert Object.isEmpty(\"\")\n    assert Object.isEmpty(\" \")\n    assert not Object.isEmpty([1])\n    assert not Object.isEmpty({x:1})\n    assert not Object.isEmpty(\"h\")\n    assert not Object.isEmpty(true)\n    assert not Object.isEmpty(false)\n    assert not Object.isEmpty(45)\n    assert not Object.isEmpty(new Date())\n"]}