{"version":3,"sources":["Object.observe.ion"],"names":["observerMap","Map","nextCheckMap","changedObjects","clone",{"type":"Identifier","name":"clone","loc":{"start":{"line":8,"column":4,"fixed":true,"source":"ion/es6/Object.observe.ion"},"end":{"line":8,"column":9,"fixed":true,"source":"ion/es6/Object.observe.ion"}}},"object","properties","key","value","getChanges","oldValue","newValue","changes","change","type","name","push","checkForChange","property","constructor","Object","hasOwnProperty","oldPropertyValue","newPropertyValue","is","observe","callback","meta","get","all","callbacks","set","unobserve","remove","length","delete","nextCheck","fn","changed","obj","arguments","checkForChanges","maxCycles","i","changeCount","check","forEach","currentCheckMap","clear","size","Error","test","a","b","c","d","handler","JSON","stringify"],"mappings":"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","sourcesContent":["\n\nlet\n    observerMap = new Map()\n    nextCheckMap = new Map()\n    changedObjects = new Map()\nconst\n    clone = (object, properties) ->\n        if properties?\n            return {}\n                for key of properties\n                    [key]: object[key]\n        else\n            return {}\n                for key, value of object\n                    [key]: value\n    getChanges = (oldValue, newValue, properties) ->\n        let changes = null\n        let change = (type, name, oldValue, object) ->\n            changes ?= []\n            changes.push({type,name,oldValue,object})\n            # console.log('change', type, name)\n        let checkForChange = (property) ->\n            # we only check add/delete on plain old javascript objects\n            if newValue.constructor is Object\n                if oldValue.hasOwnProperty(name)\n                    let oldPropertyValue = oldValue[name]\n                    if not newValue.hasOwnProperty(name)\n                        if oldPropertyValue isnt undefined\n                            change(\"delete\", name, oldPropertyValue, newValue)\n                    else\n                        let newPropertyValue = newValue[name]\n                        # must use Object.is because NaN != NaN\n                        if not Object.is(newPropertyValue, oldPropertyValue)\n                            change(\"update\", name, oldPropertyValue, newValue)\n                else if newValue.hasOwnProperty(name)\n                    change(\"add\", name, undefined, newValue)\n            else\n                # for everything else, we only check current property values\n                let oldPropertyValue = oldValue[name]\n                let newPropertyValue = newValue[name]\n                # must use Object.is because NaN != NaN\n                if not Object.is(newPropertyValue, oldPropertyValue)\n                    change(\"update\", name, oldPropertyValue, newValue)\n\n        if properties?\n            for name of properties\n                checkForChange(name)\n        else\n            for name of oldValue\n                checkForChange(name)\n            for name of newValue\n                if not oldValue.hasOwnProperty(name)\n                    checkForChange(name)\n        return changes\n\nexport const\n    observe = (object, callback, property) ->\n        # console.log('+observe', property)\n        let meta = observerMap.get(object)\n        if not meta?\n            meta =\n                object: object\n                properties: {}\n                all: 0\n                clone: clone(object, property ? {[property]:0} : null)\n                callbacks: []\n            observerMap.set(object, meta)\n        if property?\n            meta.properties[property] ?= 0\n            meta.properties[property]++\n        else\n            meta.all++\n        meta.callbacks.push(callback)\n    unobserve = (object, callback, property) ->\n        # console.log('-unobserve', object, callback)\n        let meta = observerMap.get(object)\n        if meta?\n            meta.callbacks.remove(callback)\n            if meta.callbacks.length is 0\n                # remove no longer observed objects\n                observerMap.delete(object)\n            if property?\n                meta.properties[property]--\n                if meta.properties[property] is 0\n                    delete meta.properties[property]\n            else\n                meta.all--\n    nextCheck = (fn) ->\n        # console.log('++++ nextCheck ============================')\n        nextCheckMap.set(fn, fn)\n    changed = (obj) ->\n        for object in arguments\n            # console.log('changed ' + JSON.stringify(object))\n            changedObjects.set(object, object)\n    checkForChanges = () ->\n        let changes\n        let maxCycles = 10\n        # we have to run multiple cycles in case callbacks cause further change propagation\n        for let i = 0; i < maxCycles; i++\n            # console.log('-------- check for changes ' + i + ' ' + forceAll + ' ' + changedObjects.size + ' ' + nextCheckMap.size)\n            # traverse all objects and find changes\n            let changeCount = 0\n            let check = (meta) ->\n                let properties = meta.all > 0 ? null : meta.properties\n                changes = getChanges(meta.clone, meta.object, properties)\n                if changes?\n                    changeCount++\n                    # console.log('changes: ' + JSON.stringify(changes))\n                    meta.clone = clone(meta.object, properties)\n                    # callbacks must be deferred until after ALL changes have been found\n                    for callback in meta.callbacks\n                        callback(changes)\n\n            observerMap.forEach(check)\n\n            #   then call all nextChecks.\n            let currentCheckMap = nextCheckMap\n            nextCheckMap = new Map()\n\n            currentCheckMap.forEach(\n                (callback) ->\n                    callback()\n            )\n            currentCheckMap.clear()\n\n            if changeCount is 0 and nextCheckMap.size is 0\n                return\n\n        # we have hit max cycles, indicates a circular dependency error\n        throw new Error(\"Circular Object.observe dependency\")\n\n    test = ->\n        let object =\n            a: 1\n            b:\n                c: 2\n                d: 3\n        let changes\n        let handler = (c) ->\n            changes = c\n        observe(object, handler)\n        object.a = 2\n        delete object.b\n        object.c = 5\n        changed(object)\n        checkForChanges()\n        assert JSON.stringify(changes) is JSON.stringify([{\"type\":\"update\",\"name\":\"a\",\"oldValue\":1,\"object\":{\"a\":2,\"c\":5}},{\"type\":\"delete\",\"name\":\"b\",\"oldValue\":{\"c\":2,\"d\":3},\"object\":{\"a\":2,\"c\":5}},{\"type\":\"add\",\"name\":\"c\",\"object\":{\"a\":2,\"c\":5}}])\n        unobserve(object, handler)\n\n"]}