{"version":3,"sources":["Context.ion"],"names":["ion","Factory","Literal","noop",{"type":"Identifier","name":"noop","loc":{"start":{"line":6,"column":4,"fixed":true,"source":"ion/runtime/Context.ion"},"end":{"line":6,"column":8,"fixed":true,"source":"ion/runtime/Context.ion"}}},"createArrayInserter","container","isOrdered","value","convert","getLength","length","add","index","splice","push","remove","moving","isNode","nodeType","createHtmlInserter","unordered","name","id","Error","capture","captureSuffix","endsWith","substring","originalValue","apply","arguments","checkForChanges","document","createTextNode","childNodes","addEventListener","after","insertBefore","appendChild","removeEventListener","removeChild","createOrderManager","inserter","Array","isArray","insert","order","fastInsert","update","oldOrder","newOrder","baseLength","insertionOrders","insertionValues","pendingOrderChanges","insertInternal","JSON","stringify","previousValue","newValue","sort","indexOf","removeInternal","key","insertedValue","reinsertValues","i","oldOrderValue","newOrderValue","startsWith","debug","console","log","Context","constructor","parent","output","depth","variables","root","_runtimes","returnExpression","properties","newContext","createRuntime","node","setFastInsert","get","_order","set","oldValue","variable","getVariable","context","global","cachedGlobals","globals","setVariableFromAst","setVariableExpression","setVariableLiteral","expression"],"mappings":"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","sourcesContent":["\nconst\n    ion = import '../'\n    Factory = import './Factory'\n    Literal = import './Literal'\n    noop = ->\n\nconst createArrayInserter = (container) ->\n    return\n        isOrdered: (value) -> true\n        convert: (value) -> value\n        getLength: -> container.length\n        add: (value, index) ->\n            if index?\n                container.splice(index, 0, value)\n            else\n                container.push(value)\n        remove: (index, value, moving) ->\n            container.splice(index, 1)\n\nconst isNode = (value) -> typeof value?.nodeType is \"number\"\nconst createHtmlInserter = (container) ->\n    return\n        isOrdered: (value) ->\n            if typeof value isnt 'function'\n                return false\n            if container.unordered\n                return false\n            return true\n        convert: (value) ->\n            if typeof value is 'function'\n                let name = value.id ? value.name\n                if not name?\n                    throw new Error(\"Functions added to an Element must be named\")\n                let capture = false\n                let captureSuffix = '_capture'\n                if name.endsWith(captureSuffix)\n                    capture = true\n                    name = name.substring(0, name.length - captureSuffix.length)\n                let originalValue = value\n                value = ->\n                    originalValue.apply(@, arguments)\n                    ion.checkForChanges()\n                value.id = name\n                value.capture = capture\n            else if not isNode(value)\n                value = document.createTextNode(value)\n            return value\n        getLength: -> container.childNodes.length\n        add: (value, index) ->\n            if typeof value is 'function'\n                container.addEventListener(value.id, value, value.capture)\n            else\n                if index?\n                    let after = container.childNodes[index]\n                    if after?\n                        container.insertBefore(value, after)\n                        return\n                container.appendChild(value)\n        remove: (index, value, moving) ->\n            if typeof value is 'function'\n                container.removeEventListener(value.id, value)\n            else if not moving\n                container.removeChild(value)\n\nconst createOrderManager = (container) ->\n    let inserter\n    if Array.isArray(container)\n        inserter = createArrayInserter(container)\n    else if isNode(container)\n        inserter = createHtmlInserter(container)\n    else\n        return\n            insert: (value, order, fastInsert) -> ion.add(container, value)\n            update: (oldOrder, newOrder) ->\n\n    let baseLength = inserter.getLength()\n    let insertionOrders = []\n    let insertionValues = {}\n    let pendingOrderChanges = {} # oldOrder => newOrder\n\n    let insertInternal = (value, order, fastInsert) ->\n        if insertionValues[order]?\n            throw new Error(\"Cannot add a new item with the same order as an existing item: {{JSON.stringify({order,previousValue:insertionValues[order],newValue:value})}}\")\n\n        if inserter.isOrdered(value)\n            insertionValues[order] = value\n            insertionOrders.push(order)\n        else\n            fastInsert = true\n\n        if fastInsert\n            inserter.add(value)\n        else\n            insertionOrders.sort()\n            let index = insertionOrders.indexOf(order)\n            inserter.add(value, baseLength + index)\n    let removeInternal = (value, order, moving) ->\n        if not inserter.isOrdered(value)\n            inserter.remove(null, value)\n        else\n            # order MAY change during reactive runtime, so we may have to look it back up\n            if insertionValues[order] isnt value\n                # then we must find the new order for this value... this could be a fucking big bug source IF our values are equivalent primitives\n                order = null\n                for key, insertedValue of insertionValues\n                    if insertedValue is value\n                        order = key\n                        break\n                if order is null\n                    throw new Error(\"Could not find value in insertionValues \" + value)\n\n            let index = insertionOrders.indexOf(order)\n            if index < 0\n                throw new Error(\"Insertion order {{JSON.stringify(order)}} not found {{JSON.stringify(insertionOrders)}}\")\n            # remove from insertionOrder\n            insertionOrders.splice(index, 1)\n            # remove from container at baseLength plus index\n            inserter.remove(baseLength + index, value, moving)\n            # delete from insertion values\n            delete insertionValues[order]\n\n    return\n        insert: (value, order, fastInsert) ->\n            value = inserter.convert(value)\n            insertInternal(value, order, fastInsert)\n            return -> removeInternal(value, order)\n        update: (oldOrder, newOrder) ->\n            if oldOrder? and newOrder?\n                pendingOrderChanges[oldOrder] = newOrder\n            else\n                let reinsertValues = {}\n                for let i = insertionOrders.length - 1; i >= 0; i--\n                    let order = insertionOrders[i]\n                    for oldOrderValue, newOrderValue of pendingOrderChanges\n                        if order.startsWith(oldOrderValue)\n                            let insertedValue = insertionValues[order]\n                            if insertedValue?.debug\n                                console.log('REMOVING----------', insertedValue)\n\n                            reinsertValues[newOrderValue + order.substring(oldOrderValue.length)] = insertedValue\n                            removeInternal(insertedValue, order, true)\n\n                # new re-add changed values\n                for order, value of reinsertValues\n                    if value?.debug\n                        console.log('REINSERTING+++++++++', insertedValue)\n\n                    insertInternal(value, order)\n\n                # now reset pendingOrderChanges\n                pendingOrderChanges = {}\n\nexport class Context\n    constructor: (parent, output, order) ->\n        # the output object that values are written to\n        @output = output\n        # parent is either null or another Context\n        @parent = parent\n        # calculate and set the depth\n        @depth = parent? ? parent.depth + 1 : 0\n        # an object that maps variable names to variable expressions\n        @variables = {}\n        # store a reference to the root context\n        @root = parent?.root ? @\n        # runtime nodes keyed by toCode\n        @_runtimes = {}\n        # if there is a return expression, copy it\n        @returnExpression = parent?.returnExpression\n        # if this is a new output object then create a new list of objects inserted into output object\n        # they are keyed by order string\n        @inserter = output is parent?.output ? parent?.inserter : createOrderManager(output)\n        @order = order\n    properties:\n        newContext: (output = @output, order) -> new Context(@, output, order)\n        createRuntime: (node) ->\n            return Factory.createRuntime(@, node)\n        setFastInsert: (value) ->\n            if @inserter?\n                @inserter.fastInsert = value\n        order:\n            get: ->\n                let value = @_order ? \"\"\n                if @output? and @output is @parent?.output\n                    value = @parent.order + value\n                return value\n            set: (value) ->\n                let _order = @_order\n                let oldValue = @order\n                @_order = value ? \"\"\n                let newValue = @order\n                if _order? and newValue isnt oldValue\n                    @inserter?.update(oldValue, newValue)\n        insert: (value, order) ->\n            order = @order + (order ? \"\")\n            return @inserter.insert(value, order, @inserter.fastInsert)\n        get: (name) ->\n            let variable = @getVariable(name)\n            if not variable?\n                throw new Error(\"Variable not found: '{{name}}'\")\n            return variable.value\n        getVariable: (name) ->\n            let context = @, value\n            while context?\n                let variable = context.variables[name]\n                if variable?\n                    return variable\n                context = context.parent\n            # if the variable is not defined by us then it is probably a global variable.\n            # we do however require that it be a globally defined variable, otherwise we throw an error.\n            value = global[name]\n            if value is undefined\n                throw new Error(\"Variable not found: '{{name}}'\")\n            # global values are considered to be constants.\n            # we could consider caching these values within the context.\n            let cachedGlobals = @root.globals ?= {}\n            return cachedGlobals[name] ?= new Literal({value})\n        setVariableFromAst: (name, node) ->\n            if name?\n                return @setVariableExpression(name, @createRuntime(node))\n        setVariableLiteral: (name, value) ->\n            if name?\n                return @setVariableExpression(name, new Literal({value}))\n        setVariableExpression: (name, expression) ->\n            if name?\n                if @variables[name]?\n                    throw new Error(\"Variable {{name}} is already defined\")\n                # we always watch the expression to make sure it is created only once\n                # if we don't, then it may be created and destroyed multiple times which can cause bugs\n                @variables[name] = expression\n                return expression\n"]}