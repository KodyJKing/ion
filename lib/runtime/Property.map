{"version":3,"sources":["Property.ion"],"names":["ion","Statement","Property","properties","activate",{"type":"Identifier","name":"activate","loc":{"start":{"line":7,"column":8,"fixed":true},"end":{"line":7,"column":16,"fixed":true}}},"keyExpression","context","createRuntime","computed","key","name","value","valueExpression","watch","keyWatcher","setLeftValue","currentValue","output","get","keyValue","setProperty","valueWatcher","valueValue","deactivate","unobserve","contextObserver","leftValue","unwatch","explicitUndefined","operator"],"mappings":"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","sourcesContent":["const\r\n    ion = import '../'\r\n    Statement = import './Statement'\r\n\r\nexport class Property extends Statement\r\n    properties:\r\n        activate: ->\r\n            super\r\n            # create the runtime expressions\r\n            @keyExpression ?= @context.createRuntime(@computed ? @key : (@key.name ? @key.value))\r\n            @valueExpression ?= @context.createRuntime(@value)\r\n            # then watch them, this way, the keywatcher can set the left value on the right hand side\r\n            # before it is activated\r\n            @keyExpression.watch(\r\n                @keyWatcher ?= (key) =>\r\n                    if key? and @valueExpression.setLeftValue?\r\n                        # if there is a context.output then get the current key from that\r\n                        # otherwise the key is probably referring to a variable\r\n                        let currentValue = @context.output ? @context.output?[key] : @context.get(key)\r\n                        if currentValue?\r\n                            @valueExpression.setLeftValue(currentValue)\r\n\r\n                    @keyValue = key\r\n                    @setProperty()\r\n            )\r\n            @valueExpression.watch(\r\n                @valueWatcher ?= (value) =>\r\n                    @valueValue = value\r\n                    @setProperty()\r\n            )\r\n        deactivate: ->\r\n            super\r\n            ion.unobserve(@context.output, @contextObserver, @leftValue)\r\n            @keyExpression.unwatch(@keyWatcher)\r\n            @valueExpression.unwatch(@valueWatcher)\r\n        setProperty: (key = @keyValue, value = @valueValue) ->\r\n            # we must have a key, and the value must not be undefined UNLESS the value is explicitly undefined!\r\n            let explicitUndefined = @value.operator is 'void'\r\n            if key? and (value isnt undefined or explicitUndefined)\r\n                let currentValue = @context.output?[key]\r\n                if explicitUndefined or currentValue isnt value and @context.output?\r\n                    @context.output[key] = value\r\n"]}