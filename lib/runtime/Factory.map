{"version":3,"sources":["Factory.ion"],"names":["ion","Literal","Expression","Factory","properties","runtime","createRuntime","writable","value",{"type":"Identifier","name":"value","loc":{"start":{"line":12,"column":12,"fixed":true},"end":{"line":12,"column":17,"fixed":true}}},"context","ast","clone","factory","type","lookup","VariableDeclaration","ThisExpression","getVariable","Identifier","name","Function","Template","Property","IfStatement","BlockStatement","ReturnStatement","ObjectExpression","ArrayExpression","ExpressionStatement","ForOfStatement","ForInStatement","MemberExpression","CallExpression","NewExpression","UnaryExpression","operator","evaluate","a","ConditionalExpression","test","consequent","alternate","BinaryExpression","left","right","getFactory","step","key","values","nodeValue","next","constructor","Error","JSON","stringify"],"mappings":"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","sourcesContent":["const ion = import '../'\nconst Literal = import './Literal'\nconst Expression = import './Expression'\n\nclass Factory\n    properties:\n        runtime: './OperationExpression'\n        # creates a runtime construct from this operation\n        # with the specified context and AST node\n        createRuntime:\n            writable: true\n            value: (context, ast) ->\n                let properties = ion.clone(ast)\n                properties.context = context\n                properties.factory = @\n                let type = import @runtime\n                return new type(properties)\n\nconst lookup =\n    type:\n        VariableDeclaration: new Factory\n            runtime: './VariableDeclaration'\n        ThisExpression: new Factory\n            createRuntime: (context, ast) -> context.getVariable('this')\n        Identifier: new Factory\n            createRuntime: (context, ast) -> context.getVariable(ast.name)\n        Function: new Factory\n            createRuntime: (context, ast) ->\n                let value = ast.value\n                if ast.context\n                    value = value(context)\n                return new Literal({value:value})\n        Template: new Factory\n            runtime: './Template'\n        Literal: new Factory\n            runtime: './Literal'\n        Property: new Factory\n            runtime: './Property'\n        IfStatement: new Factory\n            runtime: './IfStatement'\n        BlockStatement: new Factory\n            runtime: './BlockStatement'\n        ReturnStatement: new Factory\n            runtime: './ReturnStatement'\n        ObjectExpression: new Factory\n            runtime: './ObjectExpression'\n        ArrayExpression: new Factory\n            runtime: './ArrayExpression'\n        ExpressionStatement: new Factory\n            runtime: './ExpressionStatement'\n        ForOfStatement: new Factory\n            runtime: './ForInOfStatement'\n        ForInStatement: new Factory\n            runtime: './ForInOfStatement'\n        MemberExpression: new Factory\n            runtime: './MemberExpression'\n        CallExpression: new Factory\n            runtime: './CallExpression'\n        NewExpression: new Factory\n            runtime: './CallExpression'\n        UnaryExpression:\n            operator:\n                \"!\": new Factory\n                    evaluate: (a) -> not a\n                \"typeof\": new Factory\n                    evaluate: (a) -> typeof a\n                \"void\": new Factory\n                    evaluate: (a) -> void a\n                \"-\": new Factory\n                    evaluate: (a) -> - a\n                \"+\": new Factory\n                    evaluate: (a) -> + a\n                \"~\": new Factory\n                    evaluate: (a) -> ~ a\n                \"?\": new Factory\n                    evaluate: (a) -> a?\n        ConditionalExpression: new Factory\n            # unlike in imperative code, both consequent and alternate are always evaluated\n            evaluate: (test, consequent, alternate) -> test ? consequent : alternate\n        BinaryExpression:\n            operator:\n                \"*\": new Factory\n                    evaluate: (left, right) -> left * right\n                \"/\": new Factory\n                    evaluate: (left, right) -> left / right\n                \"%\": new Factory\n                    evaluate: (left, right) -> left % right\n                \"+\": new Factory\n                    evaluate: (left, right) -> left + right\n                \"-\": new Factory\n                    evaluate: (left, right) -> left - right\n                \"&&\": new Factory\n                    evaluate: (left, right) -> left and right\n                \"||\": new Factory\n                    evaluate: (left, right) -> left or right\n                \"&\": new Factory\n                    evaluate: (left, right) -> left & right\n                \"|\": new Factory\n                    evaluate: (left, right) -> left | right\n                \"==\": new Factory\n                    evaluate: (left, right) -> `left == right`\n                \"!=\": new Factory\n                    evaluate: (left, right) -> `left != right`\n                \"===\": new Factory\n                    evaluate: (left, right) -> left is right\n                \"!==\": new Factory\n                    evaluate: (left, right) -> left isnt right\n                \"<\": new Factory\n                    evaluate: (left, right) -> left < right\n                \">\": new Factory\n                    evaluate: (left, right) -> left > right\n                \"<=\": new Factory\n                    evaluate: (left, right) -> left <= right\n                \">=\": new Factory\n                    evaluate: (left, right) -> left >= right\n\nconst getFactory(ast, step = lookup) ->\n    for key, values of step\n        let nodeValue = ast[key]\n        let next = values[nodeValue]\n        if next?\n            if next.constructor is Factory\n                return next\n            return getFactory(ast, next)\n    return null\n\nexport const\n    createRuntime = (context, ast) ->\n        if typeof ast?.type isnt 'string'\n            ast =\n                type: 'Literal'\n                value: ast\n        let factory = getFactory(ast)\n        if not factory?\n            throw new Error(\"Factory not found for ast:\\n{{JSON.stringify(ast, null, '  ')}}\")\n        return factory.createRuntime(context, ast)\n    test = ->\n        # try to get a factory for < operation\n        let factory = getFactory(\n            {}\n                type: 'BinaryExpression'\n                operator: '>'\n                left:\n                    type: 'Literal'\n                    value: 1\n                right:\n                    type: 'Literal'\n                    value: 2\n        )\n        assert factory is lookup.type.BinaryExpression.operator[\">\"]\n        assert lookup.type.BinaryExpression.operator[\">\"]?\n"]}