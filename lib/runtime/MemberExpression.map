{"version":3,"sources":["MemberExpression.ion"],"names":["ion","DynamicExpression","MemberExpression","properties","activate",{"type":"Identifier","name":"activate","loc":{"start":{"line":7,"column":8,"fixed":true},"end":{"line":7,"column":16,"fixed":true}}},"objectExpression","context","createRuntime","object","propertyExpression","computed","property","name","watch","propertyWatcher","propertyValue","updateValue","objectWatcher","objectValue","deactivate","unwatch","value","setValue","observedObject","observedProperty","objectObserver","observe","changes","setMemberValue"],"mappings":"aAAA;AAAA,IACIA,GAAA,G,OAAM,CAAO,KAAP,CADV,EAEIC,iBAAA,G,OAAoB,CAAO,qBAAP,CAFxB;IAIaC,gB;;QACTC,UAAA,EAAW;AAAA,YACPC,QAAA,EAAUC,YAClB;AAAA,gB,iCADQD,Q,uBACI,CAAZ;AAAA,gBACY,KAACE,gBAAD,QAACA,gB,WAAD,KAACA,gB,GAAoB,KAACC,OAAD,CAASC,aAAT,CAAuB,KAACC,MAAxB,CAArB,CADZ;AAAA,gBAEY,KAACC,kBAAD,QAACA,kB,WAAD,KAACA,kB,GAAsB,KAACH,OAAD,CAASC,aAAT,CAAuB,KAACG,QAAD,GAAY,KAACC,QAAb,GAAwB,KAACA,QAAD,CAAUC,IAAzD,CAAvB,CAFZ;AAAA,gBAIY,KAACH,kBAAD,CAAoBI,KAApB,CACI,KAACC,eAAD,QAACA,e,WAAD,KAACA,e,YAAmB,UAACC,aAAD,EACpC;AAAA,oBAAoB,KAACA,aAAD,GAAiBA,aAAjB,CAApB;AAAA,oBACoB,KAACC,WAAD,GADpB;AAAA,iB,OAFY,EAJZ;AAAA,gBAUY,KAACX,gBAAD,CAAkBQ,KAAlB,CACI,KAACI,aAAD,QAACA,a,WAAD,KAACA,a,YAAiB,UAACC,WAAD,EAClC;AAAA,oBAAoB,KAACA,WAAD,GAAeA,WAAf,CAApB;AAAA,oBACoB,KAACF,WAAD,GADpB;AAAA,iB,OAFY,EAVZ;AAAA,aAFe;AAAA,YAiBPG,UAAA,EAAYf,YACpB;AAAA,gB,iCADQe,U,uBACI,CAAZ;AAAA,gBACY,KAACd,gBAAD,CAAkBe,OAAlB,CAA0B,KAACH,aAA3B,EADZ;AAAA,gBAEY,KAACR,kBAAD,CAAoBW,OAApB,CAA4B,KAACN,eAA7B,EAFZ;AAAA,aAlBe;AAAA,YAqBPE,WAAA,EAAaZ,YACrB;AAAA,gBAAY,IAAIiB,KAAA,GAAQ,MAAZ,CAAZ;AAAA,gBACY,IAAG,KAACH,W,QAAD,IAAkB,KAACH,a,QAAtB,EACZ;AAAA,oBAAgBM,KAAA,GAAQ,KAACH,WAAD,CAAa,KAACH,aAAd,CAAR,CAAhB;AAAA,iBAFA;AAAA,gBAGY,KAACO,QAAD,CAAUD,KAAV,EAHZ;AAAA,gBAMY,IAAG,KAACE,cAAD,KAAqB,KAACL,WAAtB,IAAqC,KAACM,gBAAD,KAAuB,KAACT,aAAhE,EACZ;AAAA,oBAAgB,KAACQ,cAAD,GAAkB,KAACL,WAAnB,CAAhB;AAAA,oBACgB,KAACM,gBAAD,GAAoB,KAACT,aAArB,CADhB;AAAA,oBAEgB,KAACU,c,WAAD,KAACA,cAAD,E,SAAA,CAFhB;AAAA,oBAGgB,IAAG,KAACP,W,QAAJ,EAChB;AAAA,wBAAoB,KAACO,cAAD,GAAkB1B,GAAA,CAAI2B,OAAJ,CACd,KAACR,WADa,E,SAEd,UAACS,OAAD,EACxB;AAAA,4BAA4B,KAACX,WAAD,GAA5B;AAAA,yB,OAHsC,EAId,KAACD,aAJa,CAAlB,CAApB;AAAA,qBAJA;AAAA,iBAPA;AAAA,aAtBe;AAAA,YAyCPa,cAAA,EAAgBxB,UAACiB,KAADjB,EAExB;AAAA,gBAAY,IAAG,KAACc,W,QAAD,IAAkB,KAACH,a,QAAtB,EACZ;AAAA,oBAAgB,KAACG,WAAD,CAAa,KAACH,aAAd,IAA+BM,KAA/B,CAAhB;AAAA,iBADA;AAAA,aA3Ce;AAAA,S;OADuBrB,iB,EAJtC;2BAIaC,gB","sourcesContent":["const\n    ion = import '../'\n    DynamicExpression = import './DynamicExpression'\n\nexport class MemberExpression extends DynamicExpression\n    properties:\n        activate: ->\n            super\n            @objectExpression ?= @context.createRuntime(@object)\n            @propertyExpression ?= @context.createRuntime(@computed ? @property : @property.name)\n\n            @propertyExpression.watch(\n                @propertyWatcher ?= (propertyValue) =>\n                    @propertyValue = propertyValue\n                    @updateValue()\n            )\n\n            @objectExpression.watch(\n                @objectWatcher ?= (objectValue) =>\n                    @objectValue = objectValue\n                    @updateValue()\n            )\n        deactivate: ->\n            super\n            @objectExpression.unwatch(@objectWatcher)\n            @propertyExpression.unwatch(@propertyWatcher)\n        updateValue: ->\n            let value = undefined\n            if @objectValue? and @propertyValue?\n                value = @objectValue[@propertyValue]\n            @setValue(value)\n\n            # also observe the objectValue for changes\n            if @observedObject isnt @objectValue or @observedProperty isnt @propertyValue\n                @observedObject = @objectValue\n                @observedProperty = @propertyValue\n                @objectObserver?()\n                if @objectValue?\n                    @objectObserver = ion.observe(\n                        @objectValue\n                        (changes) =>\n                            @updateValue()\n                        @propertyValue\n                    )\n\n        # sets the underlying property value.  This may be used for two way binding.\n        setMemberValue: (value) ->\n            # console.log('setMemberValue BITCHES!', @objectValue, @propertyValue, value)\n            if @objectValue? and @propertyValue?\n                @objectValue[@propertyValue] = value\n"]}