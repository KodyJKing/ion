{"version":3,"sources":["DynamicExpression.ion"],"names":["ion","DynamicExpression","properties","isActive","activate",{"type":"Identifier","name":"activate","loc":{"start":{"line":6,"column":8,"fixed":true,"source":"ion/runtime/DynamicExpression.ion"},"end":{"line":6,"column":16,"fixed":true,"source":"ion/runtime/DynamicExpression.ion"}}},"deactivate","observe","observer","options","originalObserver","removed","watchers","_watchers","length","push","hasValue","value","getValue","_notifyWatcher","remove","call","notify","hasOwnProperty","setValue","test","d","total","unobserve"],"mappings":"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","sourcesContent":["const ion = import '../'\n\nexport class DynamicExpression extends import './Expression'\n    properties:\n        isActive: false\n        activate: ->\n            # called when we have watchers\n            @isActive = true\n        deactivate: ->\n            # called when we no longer have watchers\n            @isActive = false\n        observe: (observer, options) ->\n            let originalObserver = observer\n            let removed = false\n            let watchers = @_watchers ?= []\n            if watchers.length is 0\n                @activate()\n            watchers.push(observer)\n            # notify original observer immediately if we have a value\n            if @hasValue()\n                let value = @getValue()\n                @_notifyWatcher(originalObserver, value)\n            return =>\n                if not removed\n                    removed = true\n                    @_watchers.remove(observer)\n                    # this must happen AFTER we notify the observer,\n                    # otherwise it changes the value and the observer may not be notified.\n                    if @_watchers.length is 0\n                        @deactivate()\n        _notifyWatcher: (observer, value) -> observer.call(@, value)\n        notify: ->\n            if @_watchers?\n                let value = @getValue()\n                for observer in @_watchers\n                    @_notifyWatcher(observer, value)\n            return\n        hasValue: -> @hasOwnProperty('value')\n        getValue: -> @value\n        setValue: (value) ->\n            if value isnt @value or not @hasValue()\n                @value = value\n                @notify()\n            return\n    test: ->\n        const d = new DynamicExpression()\n        if d.getValue() isnt undefined\n            throw \"d.getValue() != undefined\"\n        let total = 10\n        const observer = (value) ->\n            if value isnt undefined\n                total += value\n        let unobserve = d.observe(observer)\n        assert total is 10\n        d.setValue(10)\n        assert d.getValue() is 10\n        assert total is 20\n        d.setValue(20)\n        assert total is 40\n        unobserve()\n        assert total is 40\n        d.setValue(50)\n        assert total is 40\n"]}