(function(){require.register('ion/Operation',function(module,exports,require){// Generated by CoffeeScript 1.6.3
(function() {
  var Operation, evaluate, isOp, key, ops, properties;

  module.exports = Operation = (function() {
    function Operation(properties) {
      var key, value;
      for (key in properties) {
        value = properties[key];
        this[key] = value;
      }
    }

    Operation.prototype.format = function _format(a, b) {
      return "" + a + " " + this.op + " " + b;
    };

    Operation.prototype.toString = function _toString() {
      return this.op;
    };

    Operation.prototype.toJSON = function _toJSON() {
      return this.op;
    };

    return Operation;

  })();

  Operation.isOp = isOp = function _isOp(value) {
    var _ref;
    return (value != null ? (_ref = value.op) != null ? _ref.constructor : void 0 : void 0) === Operation;
  };

  Operation.evaluate = evaluate = function _evaluate(context, operation) {
    var args, op;
    op = operation.op;
    if ((op != null ? op.constructor : void 0) === Operation) {
      args = operation.args;
    } else {
      op = Operation.value;
      args = [operation];
    }
    return op.evaluate.apply(context, args);
  };

  ops = {
    "value": {
      evaluate : function _evaluate(value) {
        var output;
        output = this.output;
        if (Object.isFunction(output != null ? output.push : void 0)) {
          output.push(value);
        } else if (Object.isFunction(output != null ? output.add : void 0)) {
          output.add(value);
        } else {
          this.output = output = value;
        }
        return output;
      }
    },
    ":": {
      evaluate : function _evaluate(key, value) {
        var output;
        key = this.evaluate(key);
        value = this.evaluate(value);
        output = this.output;
        if (!typeof output !== 'object') {
          this.output = output = {};
        }
        return output[key] = value;
      }
    },
    "=": {},
    "if": {},
    "for": {},
    "ref": {},
    "get": {},
    "object": {},
    "*": {},
    "/": {},
    "+": {},
    "-": {}
  };

  for (key in ops) {
    properties = ops[key];
    properties.op = key;
    Operation[key] = new Operation(properties);
  }

}).call(this);

})})()