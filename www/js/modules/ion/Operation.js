(function(){require.register('ion/Operation',function(module,exports,require){// Generated by CoffeeScript 1.6.3
(function() {
  var Operation, key, ops, properties;

  module.exports = Operation = (function() {
    function Operation(properties) {
      var key, value;
      for (key in properties) {
        value = properties[key];
        this[key] = value;
      }
    }

    Operation.prototype.format = function _format(a, b) {
      return "" + a + " " + this.op + " " + b;
    };

    Operation.prototype.toString = function _toString() {
      return this.op;
    };

    Operation.prototype.toJSON = function _toJSON() {
      return this.op;
    };

    return Operation;

  })();

  ops = {
    "value": {
      evaluate : function _evaluate(value) {
        var output;
        output = this.output;
        if (Object.isFunction(output != null ? output.push : void 0)) {
          output.push(value);
        } else if (Object.isFunction(output != null ? output.add : void 0)) {
          output.add(value);
        } else {
          this.output = output = value;
        }
        return output;
      }
    },
    ":": {
      evaluate : function _evaluate(key, value) {
        var output;
        key = this.evaluate(key);
        value = this.evaluate(value);
        output = this.output;
        if (!typeof output !== 'object') {
          this.output = output = {};
        }
        return output[key] = value;
      }
    },
    "=": {},
    "if": {},
    "for": {},
    "ref": {},
    "get": {},
    "object": {},
    "*": {
      evaluate : function _evaluate(left, right) {
        return left * right;
      }
    },
    "/": {
      evaluate : function _evaluate(left, right) {
        return left / right;
      }
    },
    "%": {
      evaluate : function _evaluate(left, right) {
        return left % right;
      }
    },
    "+": {
      evaluate : function _evaluate(left, right) {
        return left + right;
      }
    },
    "-": {
      evaluate : function _evaluate(left, right) {
        return left - right;
      }
    },
    "&&": {
      evaluate : function _evaluate(left, right) {
        return left && right;
      }
    },
    "||": {
      evaluate : function _evaluate(left, right) {
        return left || right;
      }
    }
  };

  for (key in ops) {
    properties = ops[key];
    properties.op = key;
    Operation[key] = new Operation(properties);
  }

  Operation.getOperation = function _getOperation(op) {
    var operation;
    operation = Operation[op];
    if (operation == null) {
      throw new Error("Operation not found " + op);
    }
    return operation;
  };

}).call(this);

})})()