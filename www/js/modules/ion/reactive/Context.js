(function(){require.register('ion/reactive/Context',function(module,exports,require){// Generated by CoffeeScript 1.6.3
(function() {
  var Context, ion;

  ion = require('../');

  module.exports = Context = (function() {
    function Context(input, output, parent, additions) {
      var _ref;
      if (input == null) {
        input = global;
      }
      this.variables = {};
      this.input = input;
      this.output = output != null ? output : input;
      this.parent = parent;
      this.additions = (_ref = additions != null ? additions : parent != null ? parent.additions : void 0) != null ? _ref : [ion.count(this.output)];
    }

    Context.prototype.getInsertionIndex = function _getInsertionIndex(addIndex) {
      var count, i, insertionIndex, _i;
      insertionIndex = 0;
      for (i = _i = 0; 0 <= addIndex ? _i < addIndex : _i > addIndex; i = 0 <= addIndex ? ++_i : --_i) {
        count = this.additions[i];
        if (count != null) {
          insertionIndex += count;
        }
      }
      return insertionIndex;
    };

    Context.prototype.incrementAdditionCount = function _incrementAdditionCount(addIndex) {
      var _ref;
      return this.additions[addIndex] = ((_ref = this.additions[addIndex]) != null ? _ref : 0) + 1;
    };

    Context.prototype.decrementAdditionCount = function _decrementAdditionCount(addIndex) {
      var _ref;
      return this.additions[addIndex] = ((_ref = this.additions[addIndex]) != null ? _ref : 0) - 1;
    };

    Context.prototype.input = null;

    Context.prototype.output = null;

    Context.prototype.parent = null;

    Context.prototype.variables = null;

    Context.prototype.additions = null;

    return Context;

  })();

}).call(this);

})})()