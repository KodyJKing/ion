(function(){require.register('ion/reactive/ExpressionList',function(module,exports,require){// Generated by CoffeeScript 1.6.3
(function() {
  var DynamicExpression, ExpressionList, Operation,
    __hasProp = {}.hasOwnProperty,
    __extends = function ___extends(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Operation = require('./Operation');

  DynamicExpression = require('./DynamicExpression');

  module.exports = ExpressionList = (function(_super) {
    __extends(ExpressionList, _super);

    function ExpressionList(context, items) {
      this.context = context;
      this.items = items;
      if (this.items == null) {
        throw new Error("items is required");
      }
    }

    ExpressionList.prototype.setArgumentValue = function _setArgumentValue(index, value) {
      this.argumentValues[index] = value;
      if (this.isActive) {
        return this.notify();
      }
    };

    ExpressionList.prototype.activate = function _activate() {
      var expression, index, _i, _j, _len, _ref, _ref1;
      if (this.argumentValues == null) {
        this.expressions = Operation.createRuntimes(this.context, this.items);
        this.argumentValues = [];
        this.expressionWatchers = [];
        for (index = _i = 0, _ref = this.expressions.length; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
          this.expressionWatchers[index] = this.setArgumentValue.bind(this, index);
        }
      }
      _ref1 = this.expressions;
      for (index = _j = 0, _len = _ref1.length; _j < _len; index = ++_j) {
        expression = _ref1[index];
        expression.watch(this.expressionWatchers[index]);
      }
      ExpressionList.__super__.activate.call(this);
      return this.setValue(this.argumentValues);
    };

    ExpressionList.prototype.deactivate = function _deactivate() {
      var expression, index, _i, _len, _ref;
      _ref = this.expressions;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        expression = _ref[index];
        expression.unwatch(this.expressionWatchers[index]);
      }
      return ExpressionList.__super__.deactivate.call(this);
    };

    return ExpressionList;

  })(DynamicExpression);

  module.exports.test = function _test() {
    var e, result, watcher;
    e = new ExpressionList(null, [1, 2]);
    result = void 0;
    watcher = function _watcher(value) {
      return result = value;
    };
    e.watch(watcher);
    if (!Object.equal(result, [1, 2])) {
      throw "result != [1,2]";
    }
  };

}).call(this);

})})()