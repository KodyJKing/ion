(function(){require.register('ion/reactive/AddStatement',function(module,exports,require){// Generated by CoffeeScript 1.6.3
(function() {
  var AddStatement, Context, Expression, Operation, Statement, ion, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function ___extends(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Operation = require('./Operation');

  Expression = require('./Expression');

  Statement = require('./Statement');

  Context = require('./Context');

  ion = require('../');

  require('sugar');

  module.exports = AddStatement = (function(_super) {
    __extends(AddStatement, _super);

    function AddStatement() {
      _ref = AddStatement.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AddStatement.prototype.activate = function _activate() {
      var _this = this;
      AddStatement.__super__.activate.call(this);
      if (this.expression == null) {
        this.expression = Operation.createRuntime(this.context, this.args[0]);
      }
      return this.expression.watch(this.watcher != null ? this.watcher : this.watcher = function _watcher(value) {
        _this.value = value;
        return _this._update();
      });
    };

    AddStatement.prototype._addedValue = void 0;

    AddStatement.prototype._update = function __update() {
      if (this.value !== void 0) {
        return this._add();
      } else {
        return this._remove();
      }
    };

    AddStatement.prototype._getAddIndex = function __getAddIndex() {
      return this.args[1];
    };

    AddStatement.prototype._add = function __add() {
      var addIndex, insertIndex;
      if (this._addedValue === void 0) {
        addIndex = this._getAddIndex();
        insertIndex = this.context.getInsertionIndex(addIndex);
        ion.add(this.context.output, this.value, insertIndex, this.context);
        this._addedValue = this.value;
        return this.context.incrementAdditionCount(addIndex);
      }
    };

    AddStatement.prototype._remove = function __remove() {
      var addIndex;
      if (this._addedValue !== void 0) {
        addIndex = this._getAddIndex();
        ion.remove(this.context.output, this._addedValue);
        this._addedValue = void 0;
        return this.context.decrementAdditionCount(addIndex);
      }
    };

    AddStatement.prototype.deactivate = function _deactivate() {
      AddStatement.__super__.deactivate.call(this);
      return this.expression.unwatch(this.watcher);
    };

    return AddStatement;

  })(Statement);

  module.exports.test = function _test(done) {
    var context, object, s;
    object = [false];
    context = new Context(object);
    s = Operation.createRuntime(context, {
      op: "block",
      args: [
        {
          op: 'add',
          args: [1, 1]
        }, {
          op: 'if',
          args: [
            {
              op: 'member',
              args: [
                {
                  op: 'ancestor',
                  args: [0]
                }, 0
              ]
            }, {
              op: 'add',
              args: [2, 2]
            }
          ]
        }, {
          op: 'add',
          args: [3, 3]
        }, {
          op: 'add',
          args: [4, 4]
        }
      ]
    });
    s.activate();
    if (!Object.equal(object, [false, 1, 3, 4])) {
      return done(JSON.stringify(object)(" should be [false,1,3,4]"));
    }
    Object.observe(object, function(changes) {
      if (Object.equal(object, [true, 1, 2, 3, 4])) {
        return done();
      }
    });
    return object[0] = true;
  };

}).call(this);

})})()