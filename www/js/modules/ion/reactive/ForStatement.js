(function(){require.register('ion/reactive/ForStatement',function(module,exports,require){// Generated by CoffeeScript 1.6.3
(function() {
  var Context, ForStatement, Operation, Statement, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function ___extends(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Operation = require('./Operation');

  Statement = require('./Statement');

  Context = require('./Context');

  module.exports = ForStatement = (function(_super) {
    __extends(ForStatement, _super);

    function ForStatement() {
      _ref = ForStatement.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ForStatement.prototype.activate = function _activate() {
      var expression, key, newContext, value, _ref1, _results;
      ForStatement.__super__.activate.call(this);
      console.log('---activate for ' + this.context.input);
      _ref1 = this.context.input;
      _results = [];
      for (key in _ref1) {
        value = _ref1[key];
        newContext = new Context(value, this.context.output, this.context, this.context.additions);
        expression = Operation.createRuntime(newContext, this.args[1]);
        _results.push(expression.activate());
      }
      return _results;
    };

    ForStatement.prototype.deactivate = function _deactivate() {
      return ForStatement.__super__.deactivate.call(this);
    };

    ForStatement.prototype.dispose = function _dispose() {
      return ForStatement.__super__.dispose.call(this);
    };

    return ForStatement;

  })(Statement);

  module.exports.test = function _test(done) {
    var a, context, object;
    object = [1, 2, 3, 4];
    context = new Context(object);
    a = Operation.createRuntime(context, {
      op: 'for',
      args: [
        {
          op: 'ancestor',
          args: [0]
        }, {
          op: 'add',
          args: [
            {
              op: "*",
              args: [
                {
                  op: 'ancestor',
                  args: [0]
                }, 2
              ]
            }, 1
          ]
        }
      ]
    });
    a.activate();
    console.log(object);
    done();
  };

}).call(this);

})})()